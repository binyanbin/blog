{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":1},{"_id":"themes/apollo/source/favicon1.png","path":"favicon1.png","modified":1},{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":1}],"Cache":[{"_id":"source/_posts/8year-review.md","shasum":"8f20ed25a07481f823758e3f25ac0bf8cd455419","modified":1456247437294},{"_id":"source/_posts/CSharp-1.md","shasum":"03d2401919774ef5dc7f2bea1ac36ade28cdf4c2","modified":1462974399641},{"_id":"source/_posts/CSharp-2.md","shasum":"d936e1b62f48fec70371ac7d18f870e32419ef61","modified":1464089780007},{"_id":"source/_posts/c-1.md","shasum":"9f602ec2f0e51903e624e8a58edb4fdb5c306db7","modified":1458912122402},{"_id":"source/_posts/c-2.md","shasum":"f5e1c4cb4a9fc5dc9e7a9160ca1c9ef50e85da30","modified":1458917171326},{"_id":"source/_posts/c-3.md","shasum":"33f2681c83eecb41e81d98f6f4753ce456630c86","modified":1461850786485},{"_id":"source/_posts/c-4.md","shasum":"7b590070d842e0c41d154dc0d82e031905958027","modified":1459439523258},{"_id":"source/_posts/c-5.md","shasum":"94f3bd2b635f0a7f73847ec35a45f8a24cbcf55b","modified":1460875676916},{"_id":"source/_posts/c-6.md","shasum":"a944eb3dcbfe14ac0f9b83094f628a6452b1c909","modified":1460875673525},{"_id":"source/_posts/c-7.md","shasum":"60a16828872c8c755bd4885460e76507cc3960d7","modified":1462543104499},{"_id":"source/_posts/english-1.md","shasum":"499509eaaeaa2bbb653504dc626e472233d41a77","modified":1462720451662},{"_id":"source/_posts/english-2.md","shasum":"f7bae32f572b0ca1409a7e09c3943e7902bad334","modified":1464089491765},{"_id":"source/_posts/go-1.md","shasum":"a8aad76d23a371de8033226603547d3ee656e33e","modified":1463213868500},{"_id":"source/_posts/hello-world.md","shasum":"8bcd83816a1b3bacd8e0265e99c9f3393845c694","modified":1455934180357},{"_id":"source/_posts/hishop-1.md","shasum":"55d8f2394f5d4bcbcd9abe2d219d82cb5e6da52e","modified":1463213834810},{"_id":"source/_posts/hishop-2.md","shasum":"e0e36c52ab13b0ea2855e4325d014e7087acbd5b","modified":1465197772565},{"_id":"source/_posts/hishop-3.md","shasum":"3858cc0eafda7682abbd73e456a9ae95f51cac9a","modified":1465303962837},{"_id":"source/_posts/interview-hishop.md","shasum":"047867b0974540449f8788d22bfd4420db6599bb","modified":1458742824876},{"_id":"source/_posts/javascript-base-1.md","shasum":"05ab2ba74d6d6b581b8ecab703e076cafb093843","modified":1456066290124},{"_id":"source/_posts/javascript-base-2.md","shasum":"f838f36dbdcb725e5440f0458ba53ec5f16bbd99","modified":1456107399892},{"_id":"source/_posts/javascript-base-3.md","shasum":"297588d80d5f2aae495b3e5083bcf6b1795017bf","modified":1456590783403},{"_id":"source/_posts/javascript-base-4.md","shasum":"c2153385db91d355748da00304beef91021640aa","modified":1458570318781},{"_id":"source/_posts/jmeter-1.md","shasum":"7947e56b816ffdef3b6bbdb0bea7bdcd4c835fe9","modified":1457801611616},{"_id":"source/_posts/jmeter-2.md","shasum":"c4dfe8d9d720bb52d02d9a68e8e55001b788718f","modified":1463213575078},{"_id":"source/_posts/lock.md","shasum":"1542c616731196c4dc6596a0a3c4cd3a43a083e2","modified":1456589554744},{"_id":"source/_posts/redis-1.md","shasum":"0d3738dc0220cabc3127eb5cabf7082470afc096","modified":1457535102420},{"_id":"source/_posts/redis-2.md","shasum":"db1a9c3d104f2de6aaa26a9d7457a3c3cf54208a","modified":1457019299504},{"_id":"source/_posts/redis-3.md","shasum":"ce95be6d003e12bbe5eaef7041d2f6529e71407d","modified":1457019314699},{"_id":"source/_posts/redis-4.md","shasum":"ada50383579755d5d2904d7b78d264c60babfc09","modified":1457198098831},{"_id":"source/_posts/redis-5.md","shasum":"1975e947efec894988e2d59ffd45c9dbe2537aa4","modified":1457360369124},{"_id":"source/_posts/redis-7.md","shasum":"80926f51e4c6659202c875ea7b2933781bc8194a","modified":1457535152154},{"_id":"source/_posts/redis-6.md","shasum":"96fd535bd859aed0cfbbf0a35ddabf575da4cf4f","modified":1457360220704},{"_id":"source/_posts/redis-8.md","shasum":"ebb821cebb7d1149f66d587d38a91684df850d3a","modified":1457625200146},{"_id":"source/_posts/self-introduce.md","shasum":"131595cea1c8e524ab4983e5a32bc1657fbe2166","modified":1465305502770},{"_id":"themes/apollo/LICENSE","shasum":"1588511f0c37609ebfb55298b83a77ae5afca870","modified":1454565817128},{"_id":"themes/apollo/README.md","shasum":"730401101c5bffd5f4914412cfc7bd90624812b2","modified":1454565817128},{"_id":"themes/apollo/_config.yml","shasum":"ead59a93859f8e252e11b295afa2d11fe7f2f48c","modified":1460875401732},{"_id":"themes/apollo/doc/doc-en.md","shasum":"898109b8b62bd0233d80466c81f0fc07c8eddec8","modified":1454565817143},{"_id":"themes/apollo/doc/doc-zh.md","shasum":"d9ceb2a683400a0ac54f2870f1b354b88ee23608","modified":1454565817143},{"_id":"themes/apollo/gulpfile.js","shasum":"3bf61bca569665944cc61ac0483c9d568a4f58d7","modified":1454565817143},{"_id":"themes/apollo/languages/en.yml","shasum":"76d83ecb48803224eea591cabe8a8cb3758e4fa2","modified":1454565817143},{"_id":"themes/apollo/languages/zh-cn.yml","shasum":"05ef430fa5586e919839bad35aba4a9690e8e672","modified":1454565817143},{"_id":"themes/apollo/layout/index.jade","shasum":"162703bf4797b6d8050d7648eb7828c119039356","modified":1454565817143},{"_id":"themes/apollo/layout/mixins/paginator.jade","shasum":"47712f8bb3d84ff6a2742f923626d568779fc45a","modified":1454565817143},{"_id":"themes/apollo/layout/mixins/post.jade","shasum":"757aee9ae35d1c0da0df65af7c61ee1fa451dc6c","modified":1462450539404},{"_id":"themes/apollo/layout/partial/comment.jade","shasum":"ada3f92eb6b97263bbe562b56aeb1349a8a81fc4","modified":1454565817143},{"_id":"themes/apollo/layout/partial/copyright.jade","shasum":"fbcd231a3b9d60ce74ec60f9278074826b4948ee","modified":1454565817143},{"_id":"themes/apollo/layout/partial/head.jade","shasum":"8e861e246f28a0ce707c4962de3f31909690d85c","modified":1454565817143},{"_id":"themes/apollo/layout/partial/layout.jade","shasum":"f105f4e224b6d9e47f4bf0d653985878a0fe650a","modified":1454565817143},{"_id":"themes/apollo/layout/partial/nav.jade","shasum":"671b604bc38f43dfb17ea2592639ed27f4845e9f","modified":1454565817143},{"_id":"themes/apollo/layout/partial/scripts.jade","shasum":"16c0aa49ecdc3887bfb0f2c1d9629583d411b5ea","modified":1454565817143},{"_id":"themes/apollo/layout/post.jade","shasum":"926b87c2f37eaf20c6120cad32eddcb61ef140c4","modified":1454565817143},{"_id":"themes/apollo/package.json","shasum":"fa63aee8ca050ec794093182245573659a46d07c","modified":1454565817143},{"_id":"themes/apollo/source/css/apollo.css","shasum":"84861fe6f4c9634e09c0af50b0aa0709bd6f220e","modified":1454565817143},{"_id":"themes/apollo/source/favicon.png","shasum":"1ec9aea7f8bbcce08582467bd1d59d07412dc204","modified":1456588882999},{"_id":"themes/apollo/source/favicon1.png","shasum":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1454565817143},{"_id":"themes/apollo/source/scss/_partial/base.scss","shasum":"ae68d76cc1ee444504bed4aebec9276e4760e0f5","modified":1454565817143},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","shasum":"86d290ddfb6b13e1e3a980b3793bac61bb554f2f","modified":1454565817143},{"_id":"themes/apollo/source/scss/_partial/footer.scss","shasum":"8cd2631d46be05a9518f1966bd84e1a8b0270857","modified":1454565817143},{"_id":"themes/apollo/source/scss/_partial/header.scss","shasum":"2784d5347664b497cfdfb69297035304bdc7d7b7","modified":1454565817143},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","shasum":"ca723eb810235b2285f21d6873a74223dff06c8a","modified":1454565817143},{"_id":"themes/apollo/source/scss/_partial/mq.scss","shasum":"98d2e10280e763e36b144b408721f6dc61cbe283","modified":1454565817143},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","shasum":"612b367b0e9a0b9f66d37694ee64ce896c552967","modified":1454565817143},{"_id":"themes/apollo/source/scss/_partial/post.scss","shasum":"c7b64ef97ee4054d40cda1f094c9883cdbc92945","modified":1454565817143},{"_id":"themes/apollo/source/scss/apollo.scss","shasum":"42d3ad352553ffbde25bfbeb461df3aab78f1230","modified":1454565817143},{"_id":"public/scss/apollo.scss","modified":1465305524380,"shasum":"42d3ad352553ffbde25bfbeb461df3aab78f1230"},{"_id":"public/favicon1.png","modified":1465305524389,"shasum":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c"},{"_id":"public/favicon.png","modified":1465305524394,"shasum":"1ec9aea7f8bbcce08582467bd1d59d07412dc204"},{"_id":"public/css/apollo.css","modified":1465305524399,"shasum":"3769b55e027697d6d163ddf82b664b16c767ba9c"},{"_id":"public/2016/06/07/hishop-3/index.html","modified":1465305524711,"shasum":"dd5baf8221188c5fbfcc24a45d3b5afefa19b1c2"},{"_id":"public/2016/06/05/hishop-2/index.html","modified":1465305524858,"shasum":"dd2584f602db7e619709345750a9521b523bbe36"},{"_id":"public/2016/05/14/english-2/index.html","modified":1465305524951,"shasum":"2ff8dd96e7fadf0a88543efdccb0e19935af974d"},{"_id":"public/2016/05/13/jmeter-2/index.html","modified":1465305525030,"shasum":"eaa4b03e32893fda59ffe825f76d765da3cb674e"},{"_id":"public/2016/05/08/go-1/index.html","modified":1465305525123,"shasum":"53bd572633b371b1f7ce1423858ccbd94aa9a820"},{"_id":"public/2016/05/06/english-1/index.html","modified":1465305525197,"shasum":"1bbf01ae2d769d32679ee3d0363c8c0334abd127"},{"_id":"public/2016/05/02/CSharp-2/index.html","modified":1465305525289,"shasum":"fb9fda48c5933898e3e34823f6b9c151fa2b1d02"},{"_id":"public/2016/04/30/CSharp-1/index.html","modified":1465305525363,"shasum":"bedafb91b7f4b5d45b2d095d186336e47e507396"},{"_id":"public/2016/04/21/hishop-1/index.html","modified":1465305525443,"shasum":"8434b4d6db5e29dcb4af9fffb019333e4583c548"},{"_id":"public/2016/04/17/c-7/index.html","modified":1465305525521,"shasum":"d8235089b973f1335d71d6a0b839b632d098a112"},{"_id":"public/2016/04/13/c-6/index.html","modified":1465305525585,"shasum":"d9a6ee094b98fc88a42c0ec87e5cd5f727ef813d"},{"_id":"public/2016/04/12/c-5/index.html","modified":1465305525655,"shasum":"4f445a82ee8e7b6ef18f433e4aeb6a39598087a8"},{"_id":"public/2016/03/31/c-4/index.html","modified":1465305525732,"shasum":"c3407d820186afa9d83f48662b4a7c59cedaed3b"},{"_id":"public/2016/03/25/c-3/index.html","modified":1465305525815,"shasum":"dd01f93587e7f9d2dc66fdad427d275ac80db335"},{"_id":"public/2016/03/24/c-2/index.html","modified":1465305525874,"shasum":"7224e521134f51b30f1f75696c50e40653d4dcbe"},{"_id":"public/2016/03/23/c-1/index.html","modified":1465305525945,"shasum":"632219c07da7b004bef7fe7d01088d4a874b34e5"},{"_id":"public/2016/03/21/javascript-base-4/index.html","modified":1465305526015,"shasum":"8f8fec0b3b2538eaf85177f83df336f9ef63e360"},{"_id":"public/2016/03/12/jmeter-1/index.html","modified":1465305526086,"shasum":"a2b7009a03a9b07231f17fa3fe5fa75bff6aea67"},{"_id":"public/2016/03/10/redis-8/index.html","modified":1465305526159,"shasum":"d712ff0c611fd297655281341a1ba3135a9b5391"},{"_id":"public/2016/03/09/redis-7/index.html","modified":1465305526218,"shasum":"bafe4169c846c2e836af832a5f7d31255f7fff08"},{"_id":"public/2016/03/08/redis-6/index.html","modified":1465305526287,"shasum":"e40fdbf10171dee26dc7e1ec0e239a8122e4018c"},{"_id":"public/2016/03/07/redis-5/index.html","modified":1465305526358,"shasum":"c3d52ab35af2de5fd70c5158d40f0be7e5b5bd89"},{"_id":"public/2016/03/05/redis-4/index.html","modified":1465305526426,"shasum":"85edc00c2ffe14f8eb1d5b27c61296dfbe5b46d2"},{"_id":"public/2016/03/03/redis-3/index.html","modified":1465305526497,"shasum":"f0bbdf7b0eb2c4d38880c0f6cd6261571167fb03"},{"_id":"public/2016/03/02/redis-2/index.html","modified":1465305526560,"shasum":"c5e3bbec66bc4c82153e953c71138fe6a2b55ffb"},{"_id":"public/2016/02/28/redis-1/index.html","modified":1465305526629,"shasum":"d6750f9b5bcdda88393f0d5395ac423a5c2fdc6a"},{"_id":"public/2016/02/26/lock/index.html","modified":1465305526701,"shasum":"ca76162334f6e39d77bb9c40a31841e639aaf78b"},{"_id":"public/2016/02/23/8year-review/index.html","modified":1465305526767,"shasum":"93cb6ac51ea279f5215870d6cbc66a8cf9a1c878"},{"_id":"public/2016/02/21/javascript-base-3/index.html","modified":1465305526841,"shasum":"c66d8d9751ab1aff11eacfdac5f0ecdb727a7f7a"},{"_id":"public/2016/02/20/javascript-base-2/index.html","modified":1465305526904,"shasum":"985fc4b5a81edd1eeb1519f94f994857e93d1a2b"},{"_id":"public/2016/02/18/interview-hishop/index.html","modified":1465305526973,"shasum":"946b41bd77387b1e9e2ed4cd1c3c2b904ceb40fe"},{"_id":"public/2016/01/03/javascript-base-1/index.html","modified":1465305527039,"shasum":"d7f478345d4ea650e4228af9b77c4f6cc68654c8"},{"_id":"public/2016/01/02/hello-world/index.html","modified":1465305527112,"shasum":"231c647f5cfa2d9af7f03cc05b8f12c466e8343b"},{"_id":"public/2015/12/20/self-introduce/index.html","modified":1465305527173,"shasum":"6057ba76f2d083396f726ec8a268c50f1f6995ce"},{"_id":"public/archives/index.html","modified":1465305527245,"shasum":"37d14ae8cfbf6da7eb3e3145c925c5656855459c"},{"_id":"public/archives/page/2/index.html","modified":1465305527317,"shasum":"0c2536bf66aed4fa54b89f804de98a0fdbda14df"},{"_id":"public/archives/page/3/index.html","modified":1465305527383,"shasum":"d1b9fb59f4eb7a28f5c9828a82c12494a8e30bca"},{"_id":"public/archives/page/4/index.html","modified":1465305527457,"shasum":"c04ec20e584a6e0c707efff4b45c3b4f2edb0107"},{"_id":"public/archives/2015/index.html","modified":1465305527534,"shasum":"61a603a07ccf492b00b7a52efc45aad167daeee1"},{"_id":"public/archives/2015/12/index.html","modified":1465305527603,"shasum":"61a603a07ccf492b00b7a52efc45aad167daeee1"},{"_id":"public/archives/2016/index.html","modified":1465305527676,"shasum":"d1309506fd5ac1cfaf54dcbc4b2c76deb571313d"},{"_id":"public/archives/2016/page/2/index.html","modified":1465305527758,"shasum":"3e6d67ba7e95e7c4425f8737e313ebcbc8f2d093"},{"_id":"public/archives/2016/page/3/index.html","modified":1465305527836,"shasum":"a4be13ccf914c0aed7a6dbec4de25225f65fe3cb"},{"_id":"public/archives/2016/page/4/index.html","modified":1465305527890,"shasum":"94255356333356f4517225cb8c131c54ba29accc"},{"_id":"public/archives/2016/01/index.html","modified":1465305527947,"shasum":"34b11376bfcdbe4211bba64e8f9df28deab69e85"},{"_id":"public/archives/2016/02/index.html","modified":1465305528004,"shasum":"76dde1e714a239e9ca16eef5d25625d2d7978d40"},{"_id":"public/archives/2016/03/index.html","modified":1465305528054,"shasum":"83faa045034ffbc19277d0c90064a83aee56fc18"},{"_id":"public/archives/2016/03/page/2/index.html","modified":1465305528109,"shasum":"e04a2f5c2d1421183038dd17e109736d6d5dee08"},{"_id":"public/archives/2016/04/index.html","modified":1465305528169,"shasum":"52cdc4e49fc625e26949ed1c9957cd7a634a4598"},{"_id":"public/archives/2016/05/index.html","modified":1465305528222,"shasum":"962a6d6f9ddb1c7c02d38f275dc3019710eb52c1"},{"_id":"public/archives/2016/06/index.html","modified":1465305528279,"shasum":"7975d95cde9485dd96b97e23b9652d8986a43bc8"},{"_id":"public/atom.xml","modified":1465305528285,"shasum":"72fcb930a7ecb27abe6f487bb799f40622d80832"},{"_id":"public/index.html","modified":1465305528334,"shasum":"c19ec0f7e531dcca307edbc6bdd6799a6188b7c9"},{"_id":"public/page/2/index.html","modified":1465305528389,"shasum":"7d5ada2c0e0a80c46ceaa8aa5dee42edd94be3ad"},{"_id":"public/page/3/index.html","modified":1465305528446,"shasum":"784ba6b170f6060bb3f798dfa6ae5c2a761233b9"},{"_id":"public/page/4/index.html","modified":1465305528494,"shasum":"541cda42cbaaa1a699e8f53d269ca6cbbecb3ac2"},{"_id":"public/sitemap.xml","modified":1465305528501,"shasum":"4ef1ed63aa29abb37a8a3c0d2f0f19a21729540e"}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"一家公司的8年技术总结","date":"2016-02-22T16:00:00.000Z","desc":"总结 web研发技术","_content":"今天离职手续终于办完了，顺便回顾一下公司这几年研发技术的发展。\n## asp.net webform\n我刚进公司那会，公司的所有项目基本上都是按照微软的petshop来做的，页面采用webform。当时还是觉得很牛B。当时也不知道什么前后端，所有代码全由后端开发人员包办，从数据库到界面，美工把css写好，开发人员只要在控件中指定css中的class,就可以实现效果，这种方式上手简单，开发快速。缺点就不叙述了，总结一点，只合适做特定项目。\n![webform](/img/1.png)\n## asp.net mvc\n大概在2009年左右，我去参加微软技术大会，当时微软推asp.net mvc。回来之后建议公司采用了asp.net mvc方式开发项目，在此终于有一点前后端的概念了，当然对开发人员要求也高了一些，再没有无所不能的控件使用了，但是更灵活。这时候需要美工做好静态页面，静态页面中还需要包括交互效果，开发人员按照静态页面用服务端模板语言生成。但是09年那次的使用并不成功，1.开发人员要求高，2.当年的版本并不成熟。\n![mvc](/img/2.png)\n## asp.net webapi + 前端mvc的手机开发模式\n从12年公司开始做手机,由于原生开发成本太高，最后采用hybrid开发模式，最终使用开源项目cordova来开发手机app，前后端彻底分开，前端的静态页面直接放到手机中，通过ajax调用webapi中取数据，再把数据绑到前端模板上进行界面渲染。这是美工只需要做图或静态界面，不需要实现界面交互，界面交互、服务端交互、手机交互全由前端开发完成，前端开发还需要定义webapi的接口，后端开发只管实现webapi接口，能满足前端所需要的数据要求。这种以前端为主导的开发模式，对前端开发人员要求更高，但是为公司培养了一堆优秀的前端开发人员。\n![webapi](/img/3.png)\n## 大前端(全栈)开发\n本来想使用此模式尝试做web开发，由前端完成从界面到路由，从登陆到权限，以及session,cookie等进行完全控制，后端专注于业务及数据，按照做手机开发模式那样，给前端开发更大的空间。但最终没能尝试就已离职。\n![全栈开发](/img/4.png)","source":"_posts/8year-review.md","raw":"---\ntitle: 一家公司的8年技术总结\ndate: 2016-2-23\ndesc: 总结 web研发技术\n---\n今天离职手续终于办完了，顺便回顾一下公司这几年研发技术的发展。\n## asp.net webform\n我刚进公司那会，公司的所有项目基本上都是按照微软的petshop来做的，页面采用webform。当时还是觉得很牛B。当时也不知道什么前后端，所有代码全由后端开发人员包办，从数据库到界面，美工把css写好，开发人员只要在控件中指定css中的class,就可以实现效果，这种方式上手简单，开发快速。缺点就不叙述了，总结一点，只合适做特定项目。\n![webform](/img/1.png)\n## asp.net mvc\n大概在2009年左右，我去参加微软技术大会，当时微软推asp.net mvc。回来之后建议公司采用了asp.net mvc方式开发项目，在此终于有一点前后端的概念了，当然对开发人员要求也高了一些，再没有无所不能的控件使用了，但是更灵活。这时候需要美工做好静态页面，静态页面中还需要包括交互效果，开发人员按照静态页面用服务端模板语言生成。但是09年那次的使用并不成功，1.开发人员要求高，2.当年的版本并不成熟。\n![mvc](/img/2.png)\n## asp.net webapi + 前端mvc的手机开发模式\n从12年公司开始做手机,由于原生开发成本太高，最后采用hybrid开发模式，最终使用开源项目cordova来开发手机app，前后端彻底分开，前端的静态页面直接放到手机中，通过ajax调用webapi中取数据，再把数据绑到前端模板上进行界面渲染。这是美工只需要做图或静态界面，不需要实现界面交互，界面交互、服务端交互、手机交互全由前端开发完成，前端开发还需要定义webapi的接口，后端开发只管实现webapi接口，能满足前端所需要的数据要求。这种以前端为主导的开发模式，对前端开发人员要求更高，但是为公司培养了一堆优秀的前端开发人员。\n![webapi](/img/3.png)\n## 大前端(全栈)开发\n本来想使用此模式尝试做web开发，由前端完成从界面到路由，从登陆到权限，以及session,cookie等进行完全控制，后端专注于业务及数据，按照做手机开发模式那样，给前端开发更大的空间。但最终没能尝试就已离职。\n![全栈开发](/img/4.png)","slug":"8year-review","published":1,"updated":"2016-02-23T17:10:37.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2py700008cqpx4sb52wd"},{"title":"索引","date":"2015-12-19T16:00:00.000Z","desc":"博客索引","_content":"## javascript\n* [Javascript的闭包](http://binyanbin.github.io/2016/01/03/javascript-base-1/)\n* [Javascript的匿名函数](http://binyanbin.github.io/2016/02/20/javascript-base-2/)\n* [Javascript的面向对象编程](http://binyanbin.github.io/2016/02/21/javascript-base-3/)\n* [Javascript模块化开发](http://binyanbin.github.io/2016/03/21/javascript-*base-4/)\n\n## redis\n* [环境及配置](http://binyanbin.github.io/2016/02/28/redis-1/)\n* [Pub/Sub](http://binyanbin.github.io/2016/03/02/redis-2/)\n* [数据类型](http://binyanbin.github.io/2016/03/03/redis-3/)\n* [事务](http://binyanbin.github.io/2016/03/05/redis-4/)\n* [lua脚本](http://binyanbin.github.io/2016/03/07/redis-5/)\n* [持久化](http://binyanbin.github.io/2016/03/08/redis-6/)\n* [主从复制](http://binyanbin.github.io/2016/03/09/redis-7/)\n* [Sentinel集群控制](http://binyanbin.github.io/2016/03/09/redis-8/)\n\n## C\n* [C语言之编译器GCC](http://binyanbin.github.io/2016/03/23/c-1/)\n* [C语言之个性化termial](http://binyanbin.github.io/2016/03/24/c-2/)\n* [C语言之内存模型](http://binyanbin.github.io/2016/03/25/c-3/)\n* [C语言之函数库](http://binyanbin.github.io/2016/03/31/c-4/)\n* [C语言之socket 简易服务端](http://binyanbin.github.io/2016/04/12/c-5/)\n* [C语言之socket 简易客户端](http://binyanbin.github.io/2016/04/13/c-6/)\n* [C windows版开源http服务](http://binyanbin.github.io/2016/04/17/c-7/)\n\n## CSharp\n* [C#由内存模型说性能1](http://binyanbin.github.io/2016/04/30/CSharp-1/)\n* [C#由内存模型说性能2 数组与集合](http://binyanbin.github.io/2016/05/02/CSharp-2/)\n\n## jmeter\n* [jmeter基础概念](http://binyanbin.github.io/2016/03/12/jmeter-1/)\n* [jmeter himall电商抢购业务简单测试](http://binyanbin.github.io/2016/05/13/jmeter-2/)\n\n## 杂集\n* [一家公司的8年技术总结](http://binyanbin.github.io/2016/02/23/8year-review/)\n* [浅谈Himall商城限时购设计](http://binyanbin.github.io/2016/04/21/hishop-1/)\n* [golang是不是后端开发神器](http://binyanbin.github.io/2016/05/08/go-1/)\n* [英语入门视频推荐](http://binyanbin.github.io/2016/05/06/english-1/)\n* [Himall架构方案总结](http://binyanbin.github.io/2016/06/05/hishop-2/)\n* [Himall集群版解决方案及性能测试结果](http://binyanbin.github.io/2016/06/07/hishop-3/)\n\n## 关于博主\n\n80年代初出生,04年入行，刚入行从事asp开发。在IT行业差不多干了12年，做过6年技术管理,现任职于[Hishop](\nhttp://www.hishop.com.cn)。以.net为主,并从事过android,nodejs相关开发工作.\nQQ:8999482 邮箱:yanbin.yb@hotmail.com 技术交流,欢迎骚扰。","source":"_posts/self-introduce.md","raw":"---\ntitle: 索引\ndate: 2015-12-20\ndesc: 博客索引\n---\n## javascript\n* [Javascript的闭包](http://binyanbin.github.io/2016/01/03/javascript-base-1/)\n* [Javascript的匿名函数](http://binyanbin.github.io/2016/02/20/javascript-base-2/)\n* [Javascript的面向对象编程](http://binyanbin.github.io/2016/02/21/javascript-base-3/)\n* [Javascript模块化开发](http://binyanbin.github.io/2016/03/21/javascript-*base-4/)\n\n## redis\n* [环境及配置](http://binyanbin.github.io/2016/02/28/redis-1/)\n* [Pub/Sub](http://binyanbin.github.io/2016/03/02/redis-2/)\n* [数据类型](http://binyanbin.github.io/2016/03/03/redis-3/)\n* [事务](http://binyanbin.github.io/2016/03/05/redis-4/)\n* [lua脚本](http://binyanbin.github.io/2016/03/07/redis-5/)\n* [持久化](http://binyanbin.github.io/2016/03/08/redis-6/)\n* [主从复制](http://binyanbin.github.io/2016/03/09/redis-7/)\n* [Sentinel集群控制](http://binyanbin.github.io/2016/03/09/redis-8/)\n\n## C\n* [C语言之编译器GCC](http://binyanbin.github.io/2016/03/23/c-1/)\n* [C语言之个性化termial](http://binyanbin.github.io/2016/03/24/c-2/)\n* [C语言之内存模型](http://binyanbin.github.io/2016/03/25/c-3/)\n* [C语言之函数库](http://binyanbin.github.io/2016/03/31/c-4/)\n* [C语言之socket 简易服务端](http://binyanbin.github.io/2016/04/12/c-5/)\n* [C语言之socket 简易客户端](http://binyanbin.github.io/2016/04/13/c-6/)\n* [C windows版开源http服务](http://binyanbin.github.io/2016/04/17/c-7/)\n\n## CSharp\n* [C#由内存模型说性能1](http://binyanbin.github.io/2016/04/30/CSharp-1/)\n* [C#由内存模型说性能2 数组与集合](http://binyanbin.github.io/2016/05/02/CSharp-2/)\n\n## jmeter\n* [jmeter基础概念](http://binyanbin.github.io/2016/03/12/jmeter-1/)\n* [jmeter himall电商抢购业务简单测试](http://binyanbin.github.io/2016/05/13/jmeter-2/)\n\n## 杂集\n* [一家公司的8年技术总结](http://binyanbin.github.io/2016/02/23/8year-review/)\n* [浅谈Himall商城限时购设计](http://binyanbin.github.io/2016/04/21/hishop-1/)\n* [golang是不是后端开发神器](http://binyanbin.github.io/2016/05/08/go-1/)\n* [英语入门视频推荐](http://binyanbin.github.io/2016/05/06/english-1/)\n* [Himall架构方案总结](http://binyanbin.github.io/2016/06/05/hishop-2/)\n* [Himall集群版解决方案及性能测试结果](http://binyanbin.github.io/2016/06/07/hishop-3/)\n\n## 关于博主\n\n80年代初出生,04年入行，刚入行从事asp开发。在IT行业差不多干了12年，做过6年技术管理,现任职于[Hishop](\nhttp://www.hishop.com.cn)。以.net为主,并从事过android,nodejs相关开发工作.\nQQ:8999482 邮箱:yanbin.yb@hotmail.com 技术交流,欢迎骚扰。","slug":"self-introduce","published":1,"updated":"2016-06-07T13:18:22.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2pyg00018cqpixa3s7wo"},{"title":"redis学习8  Sentinel集群控制","date":"2016-03-09T16:00:00.000Z","desc":"redis  Sentinel 集群","_content":"Redis-Sentinel是Redis官方推荐的高可用性(HA)解决方案，当用Redis做Master-slave的高可用方案时，假如master宕机了，Redis本身(包括它的很多客户端)都没有实现自动进行主备切换，而Redis-sentinel本身也是一个独立运行的进程，它能监控多个master-slave集群，发现master宕机后能进行自懂切换。\n<!-- more -->\n## Sentinel任务\n* 监控:Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。\n* 提醒:当被监控的某个Redis服务器出现问题时,Sentinel 可以通过API向管理员或者其他应用程序发送通知。\n* 自动故障迁移:当一个主服务器不能正常工作时,Sentinel 会开始一次自动故障迁移操作， 它会将失效主服务器的其中一个从服务器升级为新的主服务器, 并让失效主服务器的其他从服务器改为复制新的主服务器;当客户端试图连接失效的主服务器时,集群也会向客户端返回新主服务器的地址,使得集群可以使用新主服务器代替失效服务器。\n\n## 配置Sentinel\n下面是一个Sentinel的标准配置\nport 26370\nsentinel monitor master 127.0.0.1 6381 1\nsentinel auth-pass master yanbin\nsentinel down-after-milliseconds master 60000\nsentinel parallel-syncs master 5\n第一行配置指示Sentinel去监视一个名为master的主服务器,将这个主服务器判断为失效至少需要1个Sentinel同意。只要同意Sentinel的数量不达标,自动故障迁移就不会执行。\ndown-after-milliseconds 指定了Sentinel认为服务器已经断线所需的毫秒数。\nparallel-syncs 执行故障转移时,最多可以有多少个从服务器同时对新的主服务器进行同步,数字越小,完成故障转移所需的时间就越长。\nauth-pass 监视主服务器的密码。\n\n## 运行Sentinel\nSentinel配置在我这个windows 2.8这个版本中是没有的，我自建了一个sentinel.conf配置文件。然后使用命令行启动Sentinel：\nredis-server  sentinel.conf --sentinel\n\n\n## 故障演示\n\n集群配置最少需要启动三个服务，我启动了4个服务分别是\n127.0.0.1:26370 （redis sentinel 集群监控）\n127.0.0.1:6379  （redis 主）\n127.0.0.1:6380  （redis 从）\n127.0.0.1:6381  （redis 从）\n查看网络状态\n``` bash\n$ redis-cli -h 127.0.0.1 -p 26380 info Sentinel\nSentinel\nsentinel_masters:1\nsentinel_tilt:0\nsentinel_running_scripts:0\nsentinel_scripts_queue_length:0\nmaster0:name=master,status=ok,address=127.0.0.1:6379,slaves=2,sentinels=1\n``` \n\n接着我关闭一个服务\n\n``` bash\nredis-cli -h 127.0.0.1 -p 6379 shutdow\n``` \n过了一会再次查看网络\n``` bash\n$ redis-cli -h 127.0.0.1 -p 26380 info Sentinel\n#Sentinel\nsentinel_masters:1\nsentinel_tilt:0\nsentinel_running_scripts:0\nsentinel_scripts_queue_length:0\nmaster0:name=master,status=ok,address=127.0.0.1:6381,slaves=1,sentinels=1\n``` \n6381变成主redis,可以write操作。\n再次启动6379\n``` bash\n$ redis-cli -h 127.0.0.1 -p 26380 info Sentinel\n#Sentinel\nsentinel_masters:1\nsentinel_tilt:0\nsentinel_running_scripts:0\nsentinel_scripts_queue_length:0\nmaster0:name=master,status=ok,address=127.0.0.1:6381,slaves=2,sentinels=1\n``` \n6379已不是主redis，变成了从redis,不能再write操作，只能read.\n\n","source":"_posts/redis-8.md","raw":"---\ntitle: redis学习8  Sentinel集群控制\ndate: 2016-3-10\ndesc: redis  Sentinel 集群\n---\nRedis-Sentinel是Redis官方推荐的高可用性(HA)解决方案，当用Redis做Master-slave的高可用方案时，假如master宕机了，Redis本身(包括它的很多客户端)都没有实现自动进行主备切换，而Redis-sentinel本身也是一个独立运行的进程，它能监控多个master-slave集群，发现master宕机后能进行自懂切换。\n<!-- more -->\n## Sentinel任务\n* 监控:Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。\n* 提醒:当被监控的某个Redis服务器出现问题时,Sentinel 可以通过API向管理员或者其他应用程序发送通知。\n* 自动故障迁移:当一个主服务器不能正常工作时,Sentinel 会开始一次自动故障迁移操作， 它会将失效主服务器的其中一个从服务器升级为新的主服务器, 并让失效主服务器的其他从服务器改为复制新的主服务器;当客户端试图连接失效的主服务器时,集群也会向客户端返回新主服务器的地址,使得集群可以使用新主服务器代替失效服务器。\n\n## 配置Sentinel\n下面是一个Sentinel的标准配置\nport 26370\nsentinel monitor master 127.0.0.1 6381 1\nsentinel auth-pass master yanbin\nsentinel down-after-milliseconds master 60000\nsentinel parallel-syncs master 5\n第一行配置指示Sentinel去监视一个名为master的主服务器,将这个主服务器判断为失效至少需要1个Sentinel同意。只要同意Sentinel的数量不达标,自动故障迁移就不会执行。\ndown-after-milliseconds 指定了Sentinel认为服务器已经断线所需的毫秒数。\nparallel-syncs 执行故障转移时,最多可以有多少个从服务器同时对新的主服务器进行同步,数字越小,完成故障转移所需的时间就越长。\nauth-pass 监视主服务器的密码。\n\n## 运行Sentinel\nSentinel配置在我这个windows 2.8这个版本中是没有的，我自建了一个sentinel.conf配置文件。然后使用命令行启动Sentinel：\nredis-server  sentinel.conf --sentinel\n\n\n## 故障演示\n\n集群配置最少需要启动三个服务，我启动了4个服务分别是\n127.0.0.1:26370 （redis sentinel 集群监控）\n127.0.0.1:6379  （redis 主）\n127.0.0.1:6380  （redis 从）\n127.0.0.1:6381  （redis 从）\n查看网络状态\n``` bash\n$ redis-cli -h 127.0.0.1 -p 26380 info Sentinel\nSentinel\nsentinel_masters:1\nsentinel_tilt:0\nsentinel_running_scripts:0\nsentinel_scripts_queue_length:0\nmaster0:name=master,status=ok,address=127.0.0.1:6379,slaves=2,sentinels=1\n``` \n\n接着我关闭一个服务\n\n``` bash\nredis-cli -h 127.0.0.1 -p 6379 shutdow\n``` \n过了一会再次查看网络\n``` bash\n$ redis-cli -h 127.0.0.1 -p 26380 info Sentinel\n#Sentinel\nsentinel_masters:1\nsentinel_tilt:0\nsentinel_running_scripts:0\nsentinel_scripts_queue_length:0\nmaster0:name=master,status=ok,address=127.0.0.1:6381,slaves=1,sentinels=1\n``` \n6381变成主redis,可以write操作。\n再次启动6379\n``` bash\n$ redis-cli -h 127.0.0.1 -p 26380 info Sentinel\n#Sentinel\nsentinel_masters:1\nsentinel_tilt:0\nsentinel_running_scripts:0\nsentinel_scripts_queue_length:0\nmaster0:name=master,status=ok,address=127.0.0.1:6381,slaves=2,sentinels=1\n``` \n6379已不是主redis，变成了从redis,不能再write操作，只能read.\n\n","slug":"redis-8","published":1,"updated":"2016-03-10T15:53:20.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2pyk00028cqpeh2p8v60"},{"title":"redis学习7 主从复制","date":"2016-03-08T16:00:00.000Z","desc":"redis  主从复制","_content":"redis集群有二种方式，一种分区，一种主从复制。\nredis的主从复制功能非常强大，一个master可以拥有多个slave，而一个slave又可以拥有多个slave，如此下去，形成了强大的多级服务器集群架构。下面是关于redis主从复制的一些特点：\n* master可以有多个slave\n* 除了多个slave连到相同的master外，slave也可以连接其他slave形成图状结构\n* 主从复制不会阻塞master。也就是说当一个或多个slave与master进行初次同步数据时，master可以继续处理client发来的请求。相反slave在初次同步数据时则会阻塞不能处理client的请求。\n* 主从复制可以用来提高系统的可伸缩性,我们可以用多个slave专门用于client的读请求，比如sort操作可以使用slave来处理。也可以用来做简单的数据冗余\n*可以在master禁用数据持久化，只需要注释掉master配置文件中的所有save配置，然后只在slave上配置数据持久化。\n<!-- more -->\n## 配置\n* 把安装好的redis做master,然后copy一份当slave。然后修改slave配置\nport 6379  修改为port 6380\nslaveof 127.0.0.1 6379  (映射到主服务器上)\n* 配置完成以后可以在二个服务中分别进行set和get操作来看效果,master可以get和set操作,slave上能get操作不能set，也就是说master可读可写，slave只能读。你在master上set数据，slave上可以查询得到。\n* 在master和slave分别执行info命令，查看结果如下：\n![master](/img/info1.png)\n![slave](/img/info2.png)\n","source":"_posts/redis-7.md","raw":"---\ntitle: redis学习7 主从复制\ndate: 2016-3-9\ndesc: redis  主从复制\n---\nredis集群有二种方式，一种分区，一种主从复制。\nredis的主从复制功能非常强大，一个master可以拥有多个slave，而一个slave又可以拥有多个slave，如此下去，形成了强大的多级服务器集群架构。下面是关于redis主从复制的一些特点：\n* master可以有多个slave\n* 除了多个slave连到相同的master外，slave也可以连接其他slave形成图状结构\n* 主从复制不会阻塞master。也就是说当一个或多个slave与master进行初次同步数据时，master可以继续处理client发来的请求。相反slave在初次同步数据时则会阻塞不能处理client的请求。\n* 主从复制可以用来提高系统的可伸缩性,我们可以用多个slave专门用于client的读请求，比如sort操作可以使用slave来处理。也可以用来做简单的数据冗余\n*可以在master禁用数据持久化，只需要注释掉master配置文件中的所有save配置，然后只在slave上配置数据持久化。\n<!-- more -->\n## 配置\n* 把安装好的redis做master,然后copy一份当slave。然后修改slave配置\nport 6379  修改为port 6380\nslaveof 127.0.0.1 6379  (映射到主服务器上)\n* 配置完成以后可以在二个服务中分别进行set和get操作来看效果,master可以get和set操作,slave上能get操作不能set，也就是说master可读可写，slave只能读。你在master上set数据，slave上可以查询得到。\n* 在master和slave分别执行info命令，查看结果如下：\n![master](/img/info1.png)\n![slave](/img/info2.png)\n","slug":"redis-7","published":1,"updated":"2016-03-09T14:52:32.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2pyo00038cqp7gjhv88h"},{"title":"redis学习6 持久化","date":"2016-03-07T16:00:00.000Z","desc":"redis  持久化","_content":"redis提供二种持久化方式:一种是RDB,另一种是AOF.\nRDB持久化可以在指定的时间间隔内生成数据集的时间点快照（point-in-time snapshot）。\nAOF持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。 AOF 文件中的命令全部以 Redis 协议的格式来保存，新命令会被追加到文件的末尾。 Redis 还可以在后台对 AOF 文件进行重写（rewrite），使得 AOF 文件的体积不会超出保存数据集状态所需的实际大小。\n<!-- more -->\n## 配置\n* rdb配置\n比如说， 以下设置会让 Redis 在满足“ 60 秒内有至少有 1000 个键被改动”这一条件时， 自动保存一次数据集:\nsave 60 1000\n* aof配置\nappendonly yes  启用\nappendfsync always 每次有新命令追加到 AOF 文件时就执行一次 fsync ：非常慢，也非常安全\nappendfsync everysec 每秒 fsync 一次：足够快（和使用 RDB 持久化差不多），并且在故障时只会丢失 1 秒钟的数据。\nappendfsync no 从不 fsync ：将数据交给操作系统来处理。更快，也更不安全的选择。\n配置好，启动服务之后，在你程序的目录会出现二个文件，一个是dump.rdb,一个是appendonly.aof\n* RDB和AOF 之间的相互作用\n1. 当 Redis 启动时，如果RDB持久化和AOF持久化都被打开了，那么程序会优先使用 AOF 文件来恢复数据集，因为 AOF 文件所保存的数据通常是最完整的。\n2. Redis为了防止两个后台(RDB和AOF)进程同时对磁盘进行大量的 I/O 操作。redis在RDB Save的过程中，不会执行 AOF RewriteAOF。反之,在AOF RewriteAOF执行的过程中，也不会执行RDB Save。\n","source":"_posts/redis-6.md","raw":"---\ntitle: redis学习6 持久化\ndate: 2016-3-8\ndesc: redis  持久化\n---\nredis提供二种持久化方式:一种是RDB,另一种是AOF.\nRDB持久化可以在指定的时间间隔内生成数据集的时间点快照（point-in-time snapshot）。\nAOF持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。 AOF 文件中的命令全部以 Redis 协议的格式来保存，新命令会被追加到文件的末尾。 Redis 还可以在后台对 AOF 文件进行重写（rewrite），使得 AOF 文件的体积不会超出保存数据集状态所需的实际大小。\n<!-- more -->\n## 配置\n* rdb配置\n比如说， 以下设置会让 Redis 在满足“ 60 秒内有至少有 1000 个键被改动”这一条件时， 自动保存一次数据集:\nsave 60 1000\n* aof配置\nappendonly yes  启用\nappendfsync always 每次有新命令追加到 AOF 文件时就执行一次 fsync ：非常慢，也非常安全\nappendfsync everysec 每秒 fsync 一次：足够快（和使用 RDB 持久化差不多），并且在故障时只会丢失 1 秒钟的数据。\nappendfsync no 从不 fsync ：将数据交给操作系统来处理。更快，也更不安全的选择。\n配置好，启动服务之后，在你程序的目录会出现二个文件，一个是dump.rdb,一个是appendonly.aof\n* RDB和AOF 之间的相互作用\n1. 当 Redis 启动时，如果RDB持久化和AOF持久化都被打开了，那么程序会优先使用 AOF 文件来恢复数据集，因为 AOF 文件所保存的数据通常是最完整的。\n2. Redis为了防止两个后台(RDB和AOF)进程同时对磁盘进行大量的 I/O 操作。redis在RDB Save的过程中，不会执行 AOF RewriteAOF。反之,在AOF RewriteAOF执行的过程中，也不会执行RDB Save。\n","slug":"redis-6","published":1,"updated":"2016-03-07T14:17:00.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2pys00048cqpee0ywg7v"},{"title":"redis学习5 lua脚本","date":"2016-03-06T16:00:00.000Z","desc":"redis  lua","_content":"redis内置的 Lua 解释器，可以使用lua对redis进行操作。使用脚本有以下好处:\n* 减少网络开销:批量执行redis命令。\n* 原子性操作:Redis也保证脚本会以原子性的方式执行:当某个脚本正在运行的时候，不会有其他脚本或Redis 命令被执行。\n* 复用：客户端发送的脚本会永久存储在Redis中，意味着其他客户端可以复用这一脚本而不需要使用代码完成同样的逻辑。\n<!-- more -->\n## 使用\n* lua脚本\nlua是一个很容易嵌入其它语言中使用的语言。很多应用程序、游戏使用LUA作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。查看[lua5.1在线中文用户手册](http://manual.luaer.cn/)。\n* Eval\n通过redis-cli客户端单独调用Lua脚本文件，格式如下:\nredis-cli --eval myscript.lua [key ...] arg [arg ...]\n``` lua\n--[[ \n限制一定时间内的调用次数 \nKEYS[1]:key \nARGV[1]:存在时长\nARGV[2]:调用次数\n]]\nlocal times = redis.call('incr',KEYS[1])\n\nif times == 1 then\n    redis.call('expire',KEYS[1], ARGV[1])\nend\n\nif times > tonumber(ARGV[2]) then\n    return 0\nend\nreturn 1\n```\n调用 redis-cli --eval d:\\test.lua test:127.0.0.1 , 10 3\n\n通过EVAL命令执行脚本，格式如下:\nEVAL script numkeys key [key ...] arg [arg ...]\n``` bash\n127.0.0.1:6379>eval \"local times = redis.call('incr',KEYS[1]);if times == 1 then redis.call('expire',KEYS[1], ARGV[1]);end;if times > tonumber(ARGV[2]) then return 0;end;return 1\" 1 test:127.0.0.1 , 10 3\n(integer) 1\n127.0.0.1:6379>get test:127.0.0.1\n\"1\"\n```\nredis.call lua脚本通过redis.call调用redis命令。\n\n 总结:我们可以通过Lua来实现很多功功能:用Lua来封装复杂了Redis操作的业务;计数，统计，分析，收集数据;实现业务操作事务控制等等。\n\n","source":"_posts/redis-5.md","raw":"---\ntitle: redis学习5 lua脚本\ndate: 2016-3-7\ndesc: redis  lua\n---\nredis内置的 Lua 解释器，可以使用lua对redis进行操作。使用脚本有以下好处:\n* 减少网络开销:批量执行redis命令。\n* 原子性操作:Redis也保证脚本会以原子性的方式执行:当某个脚本正在运行的时候，不会有其他脚本或Redis 命令被执行。\n* 复用：客户端发送的脚本会永久存储在Redis中，意味着其他客户端可以复用这一脚本而不需要使用代码完成同样的逻辑。\n<!-- more -->\n## 使用\n* lua脚本\nlua是一个很容易嵌入其它语言中使用的语言。很多应用程序、游戏使用LUA作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。查看[lua5.1在线中文用户手册](http://manual.luaer.cn/)。\n* Eval\n通过redis-cli客户端单独调用Lua脚本文件，格式如下:\nredis-cli --eval myscript.lua [key ...] arg [arg ...]\n``` lua\n--[[ \n限制一定时间内的调用次数 \nKEYS[1]:key \nARGV[1]:存在时长\nARGV[2]:调用次数\n]]\nlocal times = redis.call('incr',KEYS[1])\n\nif times == 1 then\n    redis.call('expire',KEYS[1], ARGV[1])\nend\n\nif times > tonumber(ARGV[2]) then\n    return 0\nend\nreturn 1\n```\n调用 redis-cli --eval d:\\test.lua test:127.0.0.1 , 10 3\n\n通过EVAL命令执行脚本，格式如下:\nEVAL script numkeys key [key ...] arg [arg ...]\n``` bash\n127.0.0.1:6379>eval \"local times = redis.call('incr',KEYS[1]);if times == 1 then redis.call('expire',KEYS[1], ARGV[1]);end;if times > tonumber(ARGV[2]) then return 0;end;return 1\" 1 test:127.0.0.1 , 10 3\n(integer) 1\n127.0.0.1:6379>get test:127.0.0.1\n\"1\"\n```\nredis.call lua脚本通过redis.call调用redis命令。\n\n 总结:我们可以通过Lua来实现很多功功能:用Lua来封装复杂了Redis操作的业务;计数，统计，分析，收集数据;实现业务操作事务控制等等。\n\n","slug":"redis-5","published":1,"updated":"2016-03-07T14:19:29.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2pyu00058cqpb6icyi23"},{"title":"redis学习4 事务","date":"2016-03-04T16:00:00.000Z","desc":"redis  事务","_content":"事务可以一次执行多个命令， 并且带有以下两个重要的保证：\n* 事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。\n* 事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。\n<!-- more -->\n## 命令\n* multi 开启事务\n* discard 放弃事务\n* WATCH 事务执行条件\n* 事务执行\n\n简单事务:\n``` bash\n127.0.0.1:6379>multi\nOK\n127.0.0.1:6379>set yanbin 1\nQUEUED\n127.0.0.1:6379>exec\n1) OK\n127.0.0.1:6379>get yanbin\n\"1\"\n```\n放弃事务:\n``` bash\n127.0.0.1:6379>multi\nOK\n127.0.0.1:6379>set yanbin 1\nQUEUED\n127.0.0.1:6379>discard\nOK\n127.0.0.1:6379>exec\n(error) ERR EXEC without MULTI\n127.0.0.1:6379>get yanbin\n(nil)\n```\n事务条件:WATCH 使得 EXEC 命令需要有条件地执行： 事务只能在所有被监视键都没有被修改的前提下执行， 如果这个前提不能满足的话，事务就不会被执行。\n``` bash\n127.0.0.1:6379>watch yanbin\nOK\n127.0.0.1:6379>set yanbin 1\nOK\n127.0.0.1:6379>multi\nOK\n127.0.0.1:6379>incr yanbin\nQUEUED\n127.0.0.1:6379>exec\n(nil)\n127.0.0.1:6379>get yanbin\n\"1\"\n```","source":"_posts/redis-4.md","raw":"---\ntitle: redis学习4 事务\ndate: 2016-3-5\ndesc: redis  事务\n---\n事务可以一次执行多个命令， 并且带有以下两个重要的保证：\n* 事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。\n* 事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。\n<!-- more -->\n## 命令\n* multi 开启事务\n* discard 放弃事务\n* WATCH 事务执行条件\n* 事务执行\n\n简单事务:\n``` bash\n127.0.0.1:6379>multi\nOK\n127.0.0.1:6379>set yanbin 1\nQUEUED\n127.0.0.1:6379>exec\n1) OK\n127.0.0.1:6379>get yanbin\n\"1\"\n```\n放弃事务:\n``` bash\n127.0.0.1:6379>multi\nOK\n127.0.0.1:6379>set yanbin 1\nQUEUED\n127.0.0.1:6379>discard\nOK\n127.0.0.1:6379>exec\n(error) ERR EXEC without MULTI\n127.0.0.1:6379>get yanbin\n(nil)\n```\n事务条件:WATCH 使得 EXEC 命令需要有条件地执行： 事务只能在所有被监视键都没有被修改的前提下执行， 如果这个前提不能满足的话，事务就不会被执行。\n``` bash\n127.0.0.1:6379>watch yanbin\nOK\n127.0.0.1:6379>set yanbin 1\nOK\n127.0.0.1:6379>multi\nOK\n127.0.0.1:6379>incr yanbin\nQUEUED\n127.0.0.1:6379>exec\n(nil)\n127.0.0.1:6379>get yanbin\n\"1\"\n```","slug":"redis-4","published":1,"updated":"2016-03-05T17:14:58.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2pyy00068cqpkhjepovx"},{"title":"redis学习3 数据类型","date":"2016-03-02T16:00:00.000Z","desc":"redis 数据类型","_content":"redis数据类型\n* String\n* List\n* Hashes\n* Sets\n* Sorted sets\n<!-- more -->\n## String\n存值取值:\n``` bash\n127.0.0.1:6379>SET yanbin redis\nok\n127.0.0.1:6379>GET yanbin\n\"redis\"\n```\n查询是否存在及删除\n``` bash\n127.0.0.1:6379>SET yanbin redis\nok\n127.0.0.1:6379>exists yanbin\n(integer) 1\n```\n设置失效时间及查询失效剩余时间\n``` bash\n127.0.0.1:6379>SET yanbin redis\nok\n127.0.0.1:6379> expire yanbin 500\n(integer) 1\n127.0.0.1:6379>tll yanbin \n(integer) 495\n```\n## List\n列表是简单的字符串列表，可以排序插入顺序,可以在头部或列表的尾部Redis的列表添加元素。\n``` bash\n127.0.0.1:6379>rpush yanbin a b c\n(integer) 3\n127.0.0.1:6379>lpush yanbin 1\n(integer) 1\n127.0.0.1:6379>lrange 0 -1\n1)\"1\"\n2)\"a\"\n3)\"b\"\n4)\"c\"\n127.0.0.1:6379>lpop yanbin\n\"1\"\n127.0.0.1:6379>rpop yanbin\n\"c\"\n127.0.0.1:6379>lrange 0 -1\n1)\"a\"\n2)\"b\"\n127.0.0.1:6379>llen yanbin\n(integer) 2\n```\n## Hashes\n哈希值是字符串字段和字符串值之间的映射，可以表示对象的数据类型。\n其实实际应用中用json格式做数据保存，可以表示对象。\n``` bash\n127.0.0.1:6379>hmset user:1000 username antirez birthyear 1977 verified 1\nok\n127.0.0.1:6379>hget user:1000 username\n\"antirez\"\n127.0.0.1:6379>hhgetall user:1000\n1)\"username\"\n2)\"antirez\"\n3)\"birthyear\"\n4)\"1977\"\n4)\"verified\"\n4)\"1\"\n```\n\n## Sets\n集合是一个无序的字符串合集,且不允许重复的成员。\n``` bash\n127.0.0.1:6379>sadd yanbin 1 2 3\n(integer) 5\n127.0.0.1:6379>smembers yanbin\n1)\"1\"\n2)\"2\"\n3)\"3\"\n127.0.0.1:6379>scard yanbin\n(integer) 3\n```\n\n## Sorted sets\n有序集合是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。有序集合的成员是唯一的,但分数(score)却可以重复。\n``` bash\n127.0.0.1:6379>zadd yanbin 1 a 2 b 3 c\n(integer) 5\n127.0.0.1:6379>zrange yanbin 0 -1\n1)\"a\"\n2)\"b\"\n3)\"c\"\n127.0.0.1:6379>zrange yanbin 0 -1 withscores\n1)\"a\"\n2)\"1\"\n3)\"b\"\n4)\"2\"\n5)\"c\"\n6)\"3\"\n127.0.0.1:6379>zcard yanbin\n(integer) 3\n```","source":"_posts/redis-3.md","raw":"---\ntitle: redis学习3 数据类型\ndate: 2016-3-3\ndesc: redis 数据类型\n---\nredis数据类型\n* String\n* List\n* Hashes\n* Sets\n* Sorted sets\n<!-- more -->\n## String\n存值取值:\n``` bash\n127.0.0.1:6379>SET yanbin redis\nok\n127.0.0.1:6379>GET yanbin\n\"redis\"\n```\n查询是否存在及删除\n``` bash\n127.0.0.1:6379>SET yanbin redis\nok\n127.0.0.1:6379>exists yanbin\n(integer) 1\n```\n设置失效时间及查询失效剩余时间\n``` bash\n127.0.0.1:6379>SET yanbin redis\nok\n127.0.0.1:6379> expire yanbin 500\n(integer) 1\n127.0.0.1:6379>tll yanbin \n(integer) 495\n```\n## List\n列表是简单的字符串列表，可以排序插入顺序,可以在头部或列表的尾部Redis的列表添加元素。\n``` bash\n127.0.0.1:6379>rpush yanbin a b c\n(integer) 3\n127.0.0.1:6379>lpush yanbin 1\n(integer) 1\n127.0.0.1:6379>lrange 0 -1\n1)\"1\"\n2)\"a\"\n3)\"b\"\n4)\"c\"\n127.0.0.1:6379>lpop yanbin\n\"1\"\n127.0.0.1:6379>rpop yanbin\n\"c\"\n127.0.0.1:6379>lrange 0 -1\n1)\"a\"\n2)\"b\"\n127.0.0.1:6379>llen yanbin\n(integer) 2\n```\n## Hashes\n哈希值是字符串字段和字符串值之间的映射，可以表示对象的数据类型。\n其实实际应用中用json格式做数据保存，可以表示对象。\n``` bash\n127.0.0.1:6379>hmset user:1000 username antirez birthyear 1977 verified 1\nok\n127.0.0.1:6379>hget user:1000 username\n\"antirez\"\n127.0.0.1:6379>hhgetall user:1000\n1)\"username\"\n2)\"antirez\"\n3)\"birthyear\"\n4)\"1977\"\n4)\"verified\"\n4)\"1\"\n```\n\n## Sets\n集合是一个无序的字符串合集,且不允许重复的成员。\n``` bash\n127.0.0.1:6379>sadd yanbin 1 2 3\n(integer) 5\n127.0.0.1:6379>smembers yanbin\n1)\"1\"\n2)\"2\"\n3)\"3\"\n127.0.0.1:6379>scard yanbin\n(integer) 3\n```\n\n## Sorted sets\n有序集合是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。有序集合的成员是唯一的,但分数(score)却可以重复。\n``` bash\n127.0.0.1:6379>zadd yanbin 1 a 2 b 3 c\n(integer) 5\n127.0.0.1:6379>zrange yanbin 0 -1\n1)\"a\"\n2)\"b\"\n3)\"c\"\n127.0.0.1:6379>zrange yanbin 0 -1 withscores\n1)\"a\"\n2)\"1\"\n3)\"b\"\n4)\"2\"\n5)\"c\"\n6)\"3\"\n127.0.0.1:6379>zcard yanbin\n(integer) 3\n```","slug":"redis-3","published":1,"updated":"2016-03-03T15:35:14.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2pz000078cqp1zk3kdfe"},{"title":"redis学习2 Pub/Sub","date":"2016-03-01T16:00:00.000Z","desc":"redis Pub/Sub 发布及订阅","_content":"Pub/Sub功能（means Publish,Subscribe）即发布及订阅功能.在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这让我想到了一种模式:观察者模式。定义了一种一对多的依赖关系，让多个观察者对象同时监听某一发布者（主题对象或目标对象），在发布者的状态发生变化时，会通知所有观察者对象。\n常见的应用场景:构建实时消息系统，比如普通的即时聊天，群聊等功能。消息队列功能.\n<!-- more -->\n## Redis-cli\n* PSUBSCRIBE\n* PUBLISH\n* PUNSUBSCRIBE\n* SUBSCRIBE\n* UNSUBSCRIBE\n\n### 一个客户端进行订阅操作(SUBSCRIBE)。\n``` bash\n$ redis-cli\n127.0.0.1:6379>subscribe first second\nReading messages....\n1) \"subscribe\"\n2) \"first\"\n3) (integer) 1\n1) \"subscribe\"\n2) \"second\"\n3) (integer) 2\n```\n订阅first及second两个频道。\n\n### 另一个客户端发布订阅消息(PUBLISH):\n``` bash\n$ redis-cli\n127.0.0.1:6379>publish first 1\n```\n订阅客户端收到消息:\n``` bash\n$ redis-cli\n127.0.0.1:6379>subscribe first second\nReading messages....\n1) \"subscribe\"\n2) \"first\"\n3) (integer) 1\n1) \"subscribe\"\n2) \"second\"\n3) (integer) 2\n1) \"message\"\n2) \"first\"\n3) \"1\"\n```\n\n### 退订(UNSUBSCRIBE)\n``` bash\n$ redis-cli\n127.0.0.1:6379>unsubsribe  first \nReading messages....\n1) \"unsubsribe\"\n2) \"first\"\n3) (integer) 0\n```\n\n### 按模式订阅和退订(PSUBSCRIBE和PUNSUBSCRIBE)\n每个模式以 * 作为匹配符，比如 it* 匹配所有以 it 开头的频道( it.news 、 it.blog 、 it.tweets 等等)。 news.* 匹配所有以 news. 开头的频道( news.it 、 news.global.today 等等)，诸如此类","source":"_posts/redis-2.md","raw":"---\ntitle: redis学习2 Pub/Sub\ndate: 2016-3-2\ndesc: redis Pub/Sub 发布及订阅\n---\nPub/Sub功能（means Publish,Subscribe）即发布及订阅功能.在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这让我想到了一种模式:观察者模式。定义了一种一对多的依赖关系，让多个观察者对象同时监听某一发布者（主题对象或目标对象），在发布者的状态发生变化时，会通知所有观察者对象。\n常见的应用场景:构建实时消息系统，比如普通的即时聊天，群聊等功能。消息队列功能.\n<!-- more -->\n## Redis-cli\n* PSUBSCRIBE\n* PUBLISH\n* PUNSUBSCRIBE\n* SUBSCRIBE\n* UNSUBSCRIBE\n\n### 一个客户端进行订阅操作(SUBSCRIBE)。\n``` bash\n$ redis-cli\n127.0.0.1:6379>subscribe first second\nReading messages....\n1) \"subscribe\"\n2) \"first\"\n3) (integer) 1\n1) \"subscribe\"\n2) \"second\"\n3) (integer) 2\n```\n订阅first及second两个频道。\n\n### 另一个客户端发布订阅消息(PUBLISH):\n``` bash\n$ redis-cli\n127.0.0.1:6379>publish first 1\n```\n订阅客户端收到消息:\n``` bash\n$ redis-cli\n127.0.0.1:6379>subscribe first second\nReading messages....\n1) \"subscribe\"\n2) \"first\"\n3) (integer) 1\n1) \"subscribe\"\n2) \"second\"\n3) (integer) 2\n1) \"message\"\n2) \"first\"\n3) \"1\"\n```\n\n### 退订(UNSUBSCRIBE)\n``` bash\n$ redis-cli\n127.0.0.1:6379>unsubsribe  first \nReading messages....\n1) \"unsubsribe\"\n2) \"first\"\n3) (integer) 0\n```\n\n### 按模式订阅和退订(PSUBSCRIBE和PUNSUBSCRIBE)\n每个模式以 * 作为匹配符，比如 it* 匹配所有以 it 开头的频道( it.news 、 it.blog 、 it.tweets 等等)。 news.* 匹配所有以 news. 开头的频道( news.it 、 news.global.today 等等)，诸如此类","slug":"redis-2","published":1,"updated":"2016-03-03T15:34:59.504Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2pz400088cqp8oe95urc"},{"title":"redis学习1 环境及配置","date":"2016-02-27T16:00:00.000Z","desc":"redis 配置","_content":"最近工作需要使用redis，现在只能边学习边总结。Redis的介绍就不说了，网上一搜一大把。\n\n## 环境搭建\n官方不提供windows版redis，[微软开源技术的github](https://github.com/MSOpenTech)上有提供，可以[下载](https://github.com/MSOpenTech/redis/releases)。下载解决之后，我们就开始可以搭建开发环境。\n<!-- more -->\n\n### 配置\n* maxheap\n这个是一个强限制，maxheap的大小包括文件存储大小及内存存储大小。如果超过这个限制，服务就会结束。\n* maxmemory\nmaxheap必需要比maxmemory大，一般设置为maxmemory的1.5倍。\n* 文件系统大小\nredis官方提供的公式:\n``` \n(size of physical memory) + (2 * size of maxheap)\n```\n如果你有一台机器内存为8G,maxheap设置为8G，那么你至少要有这么多空闲硬盘空间:\n``` \n(8GB) + (2 * 8GB) = 24GB\n```\n* maxmemory-policy\n如果运行中达到了maxmemory，redis将根据这个设置清除一些存储数据。\n* requirepass \n设置服务密码。\n* heapdir\n内存映射文件路径\n* timeout\n连接超时时间\n\n### 运行\n启动服务\n``` cmd\nredis-server redis.windows.conf\n```\n启动客户端\n``` cmd\nredis-cli -h 127.0.0.1 -p 6379 -a password\n```\n### 基本命令\n``` cmd\nset key value \nget key\ndel key\nexists key\nexpire key 100\nkeys *\ndb size\nttl key\ninfo\nflushdb \nping\n```\n","source":"_posts/redis-1.md","raw":"---\ntitle: redis学习1 环境及配置\ndate: 2016-2-28\ndesc: redis 配置\n---\n最近工作需要使用redis，现在只能边学习边总结。Redis的介绍就不说了，网上一搜一大把。\n\n## 环境搭建\n官方不提供windows版redis，[微软开源技术的github](https://github.com/MSOpenTech)上有提供，可以[下载](https://github.com/MSOpenTech/redis/releases)。下载解决之后，我们就开始可以搭建开发环境。\n<!-- more -->\n\n### 配置\n* maxheap\n这个是一个强限制，maxheap的大小包括文件存储大小及内存存储大小。如果超过这个限制，服务就会结束。\n* maxmemory\nmaxheap必需要比maxmemory大，一般设置为maxmemory的1.5倍。\n* 文件系统大小\nredis官方提供的公式:\n``` \n(size of physical memory) + (2 * size of maxheap)\n```\n如果你有一台机器内存为8G,maxheap设置为8G，那么你至少要有这么多空闲硬盘空间:\n``` \n(8GB) + (2 * 8GB) = 24GB\n```\n* maxmemory-policy\n如果运行中达到了maxmemory，redis将根据这个设置清除一些存储数据。\n* requirepass \n设置服务密码。\n* heapdir\n内存映射文件路径\n* timeout\n连接超时时间\n\n### 运行\n启动服务\n``` cmd\nredis-server redis.windows.conf\n```\n启动客户端\n``` cmd\nredis-cli -h 127.0.0.1 -p 6379 -a password\n```\n### 基本命令\n``` cmd\nset key value \nget key\ndel key\nexists key\nexpire key 100\nkeys *\ndb size\nttl key\ninfo\nflushdb \nping\n```\n","slug":"redis-1","published":1,"updated":"2016-03-09T14:51:42.420Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2pz700098cqpz6f3gyqe"},{"title":"并发情况下锁的使用","date":"2016-02-25T16:00:00.000Z","desc":"缓存 锁","_content":"在[电商面试题](http://binyanbin.github.io/2016/02/18/interview-hishop/)中，我使用了锁来控制并发时的缓存使用。为什么要加锁，因为在并发环境下，一个线程正在修改缓存，另一个线程在读缓存时，缓存数据很可能会被破坏;另外，使用锁可以控制超卖现像。下面我介绍常用的二种锁：读写锁和互斥锁。\n<!-- more -->\n# 读写锁\n缓存一般使用的情况应该是:\n* 只能由一个线程写，但可以多个线程读。\n* 在读操作时，不能同时让其它线程写，在写操作时，不能同时读。\n\n实现以上两种情况的锁称读写锁，读写锁有两种模式。\n* 读模式:可以有多个线程同时占有。\n* 写模式:一次只有一个线程可以占有。\n\n# 互斥锁\n在我面试题的代码中所有操作使用的是互斥锁，即保证lock上的代码同一时刻只被一个线程操作。这么做可以保证在任意时刻只有单个线程访问缓存，做到线程安全，但是这种方式效率并不高。原因如下:\n* 降低读的并发性，降低了系统使用效率。\n* 像限时抢购、秒杀这种高并发场景，应该要支持对不同的抢购商品并发下单，提高下单效率。\n\n# 限时抢购、秒杀并发场景的应用\n1.应为每个商品订单缓存建一个读写锁。\n2.在对商品下单时，应该对该商品加上写模式锁，保证该商品同一时刻只有一个用户下单，不会引起商品超卖。\n3.获取订单缓存数据时，应为该商品加上读模式锁，保证其它线程也可以读到缓存订单数据。\n\n\n\n\n","source":"_posts/lock.md","raw":"---\ntitle: 并发情况下锁的使用\ndate: 2016-2-26\ndesc: 缓存 锁\n---\n在[电商面试题](http://binyanbin.github.io/2016/02/18/interview-hishop/)中，我使用了锁来控制并发时的缓存使用。为什么要加锁，因为在并发环境下，一个线程正在修改缓存，另一个线程在读缓存时，缓存数据很可能会被破坏;另外，使用锁可以控制超卖现像。下面我介绍常用的二种锁：读写锁和互斥锁。\n<!-- more -->\n# 读写锁\n缓存一般使用的情况应该是:\n* 只能由一个线程写，但可以多个线程读。\n* 在读操作时，不能同时让其它线程写，在写操作时，不能同时读。\n\n实现以上两种情况的锁称读写锁，读写锁有两种模式。\n* 读模式:可以有多个线程同时占有。\n* 写模式:一次只有一个线程可以占有。\n\n# 互斥锁\n在我面试题的代码中所有操作使用的是互斥锁，即保证lock上的代码同一时刻只被一个线程操作。这么做可以保证在任意时刻只有单个线程访问缓存，做到线程安全，但是这种方式效率并不高。原因如下:\n* 降低读的并发性，降低了系统使用效率。\n* 像限时抢购、秒杀这种高并发场景，应该要支持对不同的抢购商品并发下单，提高下单效率。\n\n# 限时抢购、秒杀并发场景的应用\n1.应为每个商品订单缓存建一个读写锁。\n2.在对商品下单时，应该对该商品加上写模式锁，保证该商品同一时刻只有一个用户下单，不会引起商品超卖。\n3.获取订单缓存数据时，应为该商品加上读模式锁，保证其它线程也可以读到缓存订单数据。\n\n\n\n\n","slug":"lock","published":1,"updated":"2016-02-27T16:12:34.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2pzb000a8cqpob40k7l6"},{"title":"jmeter himall电商抢购业务简单测试","date":"2016-05-12T16:00:00.000Z","desc":"jmeter 电商抢购测试","_content":"Jmeter是一款比较好的测试工具，我以[Hishop](http://www.hishop.com.cn/)旗下[Himall](http://www.hishop.com.cn/products/himall/)(多用户商城产品)为例，使用jmeter对电商网站的抢购业务建立一个简单测试方案。\n## [himall](http://www.hishop.com.cn/products/himall/)抢购业务的测试\n测试要求:模拟1000用户同时登陆himall商城，同时购买固定活动商品库存，全部下单完成之后，去验证结果。\n整个测试摸拟过程为:\n* 登陆 \n* 频刷活动商品页面 \n* 下单\n<!-- more -->\n## JMeter设置\n整个测试的结构如下图\n\n![图](/img/jmeter-6.png)\n\n* 线程组:模拟用户的数量\n* 聚合报告:测试的性能数据\n* 查看结果树:具体每个请求的详细信息。\n* 一个事务控件器:定义从登陆到下单的所有http请求\n* HttpCookie管理器:登陆的用户信息在Cookie中，你需要它了保持cookie用户信息\n* 用户定义变量:记录这次测试指定活动的产品ID及库存ID\n\n1.设置模拟用户数1000\n![图](/img/jmeter-7.png)\n\n2.设置商品及库存ID\n![图](/img/jmeter-8.png)\nskuid为库存ID,productid为商品ID。此测试只操作单个库存\n\n3.设置账号数据\n![图](/img/jmeter-9.png)\n准备1000个用户名和账号，以.csv保存，用户名与密码以','隔开。\n\n4.设置登陆请求\n![图](/img/jmeter-10.png)\n设置登陆请求,ip和端口,路径。请求方法:post。重要的是BodyData的内容,其中包括用户名，密码及验证码。\n__CSVRead是一个读csv文件数据的方法。\n第一参数为目录:C:\\Users\\admin\\Desktop\\jmeterdata\\account.csv这是我本地的账户信息文件路径。\n第二参数指你要读第几列数据，列数由0开始。\ncheckCode 验证码验证\nkeep 是否保持登陆\n* 注意:需要在网站代码中注释掉验证环节才可以测试，否则你无法登陆成功。\n\n4.设置活动页面刷新请求\n![图](/img/jmeter-11.png)\n设置刷新活动页面次数.10次20次你随便设吧\n\n![图](/img/jmeter-12.png)\n刷活动设置比较简单，就是一个路径，${productid}代表是你自定义的产品ID,couts是购买数量。\n\n5.设置提交订单请求\n![图](/img/jmeter-13.png)\n定单提交页面也是一个路径，这个请求参数相对较多一些，最重要的是设置好库存ID\nintegral:使用积分,没有为0\ncouponIds:红包ID,没有为空\nskuIds:购买库存ID,${skuid}则是开始配置的库存ID\ncounts:购买数量\ncollpIds:组合购ID，没有为空\nrecieveAddressId:收货地区ID\ninvoiceType:发票类型 0 不要发票 1 增值税发票 2普通发票\n&invoiceTitle:发票抬头,没有为空\ninvoiceContext:发票内容，没有为空\nisCashOnDelivery:是否货到付款\n\n设置完成，你现在可以泡杯茶坐等结果。当然你也可以修改相应相关参数，如摸拟用户数，指定活动页面的刷新次数等，来看看结果会有哪些不同。\n\n","source":"_posts/jmeter-2.md","raw":"---\ntitle: jmeter himall电商抢购业务简单测试\ndate: 2016-5-13\ndesc: jmeter 电商抢购测试\n---\nJmeter是一款比较好的测试工具，我以[Hishop](http://www.hishop.com.cn/)旗下[Himall](http://www.hishop.com.cn/products/himall/)(多用户商城产品)为例，使用jmeter对电商网站的抢购业务建立一个简单测试方案。\n## [himall](http://www.hishop.com.cn/products/himall/)抢购业务的测试\n测试要求:模拟1000用户同时登陆himall商城，同时购买固定活动商品库存，全部下单完成之后，去验证结果。\n整个测试摸拟过程为:\n* 登陆 \n* 频刷活动商品页面 \n* 下单\n<!-- more -->\n## JMeter设置\n整个测试的结构如下图\n\n![图](/img/jmeter-6.png)\n\n* 线程组:模拟用户的数量\n* 聚合报告:测试的性能数据\n* 查看结果树:具体每个请求的详细信息。\n* 一个事务控件器:定义从登陆到下单的所有http请求\n* HttpCookie管理器:登陆的用户信息在Cookie中，你需要它了保持cookie用户信息\n* 用户定义变量:记录这次测试指定活动的产品ID及库存ID\n\n1.设置模拟用户数1000\n![图](/img/jmeter-7.png)\n\n2.设置商品及库存ID\n![图](/img/jmeter-8.png)\nskuid为库存ID,productid为商品ID。此测试只操作单个库存\n\n3.设置账号数据\n![图](/img/jmeter-9.png)\n准备1000个用户名和账号，以.csv保存，用户名与密码以','隔开。\n\n4.设置登陆请求\n![图](/img/jmeter-10.png)\n设置登陆请求,ip和端口,路径。请求方法:post。重要的是BodyData的内容,其中包括用户名，密码及验证码。\n__CSVRead是一个读csv文件数据的方法。\n第一参数为目录:C:\\Users\\admin\\Desktop\\jmeterdata\\account.csv这是我本地的账户信息文件路径。\n第二参数指你要读第几列数据，列数由0开始。\ncheckCode 验证码验证\nkeep 是否保持登陆\n* 注意:需要在网站代码中注释掉验证环节才可以测试，否则你无法登陆成功。\n\n4.设置活动页面刷新请求\n![图](/img/jmeter-11.png)\n设置刷新活动页面次数.10次20次你随便设吧\n\n![图](/img/jmeter-12.png)\n刷活动设置比较简单，就是一个路径，${productid}代表是你自定义的产品ID,couts是购买数量。\n\n5.设置提交订单请求\n![图](/img/jmeter-13.png)\n定单提交页面也是一个路径，这个请求参数相对较多一些，最重要的是设置好库存ID\nintegral:使用积分,没有为0\ncouponIds:红包ID,没有为空\nskuIds:购买库存ID,${skuid}则是开始配置的库存ID\ncounts:购买数量\ncollpIds:组合购ID，没有为空\nrecieveAddressId:收货地区ID\ninvoiceType:发票类型 0 不要发票 1 增值税发票 2普通发票\n&invoiceTitle:发票抬头,没有为空\ninvoiceContext:发票内容，没有为空\nisCashOnDelivery:是否货到付款\n\n设置完成，你现在可以泡杯茶坐等结果。当然你也可以修改相应相关参数，如摸拟用户数，指定活动页面的刷新次数等，来看看结果会有哪些不同。\n\n","slug":"jmeter-2","published":1,"updated":"2016-05-14T08:12:55.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2pzf000b8cqp93534f4f"},{"title":"jmeter 基础概念","date":"2016-03-11T16:00:00.000Z","desc":"jmeter 概念","_content":"\n最近做性能优化工作，同时要给自己的工作给一个总结。需要自己弄性能测试及编写性能测试报告。在别人推荐下使用JMeter对项目进行性能测试。JMeter可以进行配置和执行负载测试、性能测试和压力测试的工具。了解一下几个概念:\n* 负载测试: 这类测试使系统或者应用程序在预先设计好的极端场景下测试运行。这类测试用来评估系统或者程序在极端条件下的行为。\n* 性能测试: 这种测试被用来检测系统的性能表现，包括特定情况下，系统的响应能力和稳定性。\n* 压力测试: 这类测试通过载入更多的外部资源，并使系统组件超越其所设定的能力范围,试图使系统挂掉.\n<!-- more -->\nJMeter 的安装非常简单,从官方网站上下载，解压之后即可使用。运行命令在%JMETER_HOME%/bin下,对于 Windows用户来说,命令是jmeter.bat。运行前请检查JMeter的文档,查看是否具备相关的运行条件:JDK的版本要求是否满足.\n## Test Plan配置\n![基本配置](/img/jmeter-1.png)\n进去之后，你会看到Test Plan和WorkBench。这两个块东西没有太多区别，不同的是Test Plan是测试的相关配置，workbench可以帮你创建一个代理服务器帮Test Plan录制测试脚本。\n#### ThreadGroup 线程组\n一个线程组基本上是不同的测试计划元素的组合，它是一个测试计划的核心，它控制着基本核心参数。\n为了创建一个测试计划，首先你不得不去创建一个线程组，配置如下参数:线程数量，过渡时期，循环次数和正常情况或者错误情况下的行为：\n#### Samplers 采样器\n采样器用于发送请求到不同类型的服务器。它们是每一个测试计划的基本要素，一切都围绕这些采样器而工作：采样器执行请求，这些请求产生一个或多个响应，后续将被分析。\n#### Logic Controllers 逻辑控制器\n逻辑控制器允许你配置一个线程组内不同采样器的执行顺序。\n#### Listeners 监听器\n监听器提供不同的方式查看由采样器请求产生的结果。监听器以报表、树型结构、或简明的日志文件的形式分析结果。\n#### Timers 定时器\n定时器来定义请求之间的等待时间。如果不指定，JMeter会一个请求完成后立即执行下一个请求，没有任何等待时间。\n#### Assertions 断言\n断言通过验证采样器请求产生的响应，来验证测试计划的有效性。类似于单元测试断言，用来检测被测试应用程序的响应质量。\n#### Configuration nodes 配置节点\n配置节点可以将不同的参数传递给取样器请求。\n#### Pre processors 前置处理器\n前置处理器在采样器执行前被触发的元素。\n#### Post processors 后置处理器\n后置处理器是取样器被执行后被触发执行的元素。\n\n## WorkBench\n![非测试元素](/img/jmeter-2.png)\nWorkBench可以Add三个Non-test Elements:\n* Http Mirror Server 镜像的服务器\n其实就是一个代理服务器,它把所有接收到的请求原封不动地返回，这样就可以看到发出请求和响应的具体内容了。\n* Http(s) Test Script Recorder 脚本录制器\n也是一个代理服务器,它会把所有接受的请求全部记录到Test Plan配置中,你在测试中可以使用这些录制的脚本。\n\n## 测试计划元素执行顺序\n* 配置节点\n* 前置处理器\n* 定时器\n* 取样器\n* 后置处理器（只在有结果可用情况下执行）\n* 断言（只在有结果可用情况下执行）\n* 监听器（只在有结果可用情况下执行）\n\n## 性能指标\n* Label:定义的HTTP请求名称\n* Samples:表示这次测试中一共发出了多少个请求\n* Average:访问页面的平均响应时间 \n* Min:访问页面的最小响应时间\n* Max:访问页面的最大响应时间\n* Error%:错误的请求的数量/请求的总数\n* Throughpu:每秒完成的请求数\n* KB/Sec:每秒从服务器端接收到的数据量\n* Median:50％的用户响应时间\n* 90%Line:90％的用户响应时间\n* 95%Line:95％的用户响应时间\n* 99%Line:99％的用户响应时间\n时间指标的单位都是毫秒。\n\n## 第一个web性能测试\n我做了一个博客网站首页的性能测试，只设置ThreadGroup,Sampler,Listener三项就可以运行。\n\n#### ThreadGroup设置\n一个性能测试请求负载是基于一个线程组完成的，jmeter中每个测试计划至少需要包含一个线程组。Test Plan右键菜单可新增ThreadGroup(add->Threads->ThreadGroup);\n![ThreadGroup](/img/jmeter-3.png)\n* Number of Threads 线程数:虚拟用户数.一个虚拟用户占用一个进程或线程。\n* Ramp-up Period 准备时长:设置的虚拟用户数需要多长时间全部启动。\n* Loop Count 循环次数：每个线程发送请求的次数。\n\n#### Sample设置\n在ThreadGroup上右键菜单可新增HttpRequest（add->Sampler->HttpRequest).Sampler是与服务器进行交互的单元.一个Sampler通常进行三部分的工作：\n* 向服务器发送请求\n* 记录服务器的响应数据\n* 记录相应时间信息\n![HttpRequest](/img/jmeter-4.png)\n\n#### Listener设置\n脚本的主要部分设置完成后,需要通过某种方式获得性能测试中的测试结果。ThreadGroup上右键菜单可新增Listner（add->Listener->Aggregate Report).\n![HttpRequest](/img/jmeter-5.png)\n我最关心的是我的博客响应时间，数据显示客户的平均响应时间为:337毫秒,99%的用户在1985毫秒内完成，也就不超2秒。最少用户响应时间为149毫秒，最大用户响应时间为5020毫秒\n","source":"_posts/jmeter-1.md","raw":"---\ntitle: jmeter 基础概念\ndate: 2016-3-12\ndesc: jmeter 概念\n---\n\n最近做性能优化工作，同时要给自己的工作给一个总结。需要自己弄性能测试及编写性能测试报告。在别人推荐下使用JMeter对项目进行性能测试。JMeter可以进行配置和执行负载测试、性能测试和压力测试的工具。了解一下几个概念:\n* 负载测试: 这类测试使系统或者应用程序在预先设计好的极端场景下测试运行。这类测试用来评估系统或者程序在极端条件下的行为。\n* 性能测试: 这种测试被用来检测系统的性能表现，包括特定情况下，系统的响应能力和稳定性。\n* 压力测试: 这类测试通过载入更多的外部资源，并使系统组件超越其所设定的能力范围,试图使系统挂掉.\n<!-- more -->\nJMeter 的安装非常简单,从官方网站上下载，解压之后即可使用。运行命令在%JMETER_HOME%/bin下,对于 Windows用户来说,命令是jmeter.bat。运行前请检查JMeter的文档,查看是否具备相关的运行条件:JDK的版本要求是否满足.\n## Test Plan配置\n![基本配置](/img/jmeter-1.png)\n进去之后，你会看到Test Plan和WorkBench。这两个块东西没有太多区别，不同的是Test Plan是测试的相关配置，workbench可以帮你创建一个代理服务器帮Test Plan录制测试脚本。\n#### ThreadGroup 线程组\n一个线程组基本上是不同的测试计划元素的组合，它是一个测试计划的核心，它控制着基本核心参数。\n为了创建一个测试计划，首先你不得不去创建一个线程组，配置如下参数:线程数量，过渡时期，循环次数和正常情况或者错误情况下的行为：\n#### Samplers 采样器\n采样器用于发送请求到不同类型的服务器。它们是每一个测试计划的基本要素，一切都围绕这些采样器而工作：采样器执行请求，这些请求产生一个或多个响应，后续将被分析。\n#### Logic Controllers 逻辑控制器\n逻辑控制器允许你配置一个线程组内不同采样器的执行顺序。\n#### Listeners 监听器\n监听器提供不同的方式查看由采样器请求产生的结果。监听器以报表、树型结构、或简明的日志文件的形式分析结果。\n#### Timers 定时器\n定时器来定义请求之间的等待时间。如果不指定，JMeter会一个请求完成后立即执行下一个请求，没有任何等待时间。\n#### Assertions 断言\n断言通过验证采样器请求产生的响应，来验证测试计划的有效性。类似于单元测试断言，用来检测被测试应用程序的响应质量。\n#### Configuration nodes 配置节点\n配置节点可以将不同的参数传递给取样器请求。\n#### Pre processors 前置处理器\n前置处理器在采样器执行前被触发的元素。\n#### Post processors 后置处理器\n后置处理器是取样器被执行后被触发执行的元素。\n\n## WorkBench\n![非测试元素](/img/jmeter-2.png)\nWorkBench可以Add三个Non-test Elements:\n* Http Mirror Server 镜像的服务器\n其实就是一个代理服务器,它把所有接收到的请求原封不动地返回，这样就可以看到发出请求和响应的具体内容了。\n* Http(s) Test Script Recorder 脚本录制器\n也是一个代理服务器,它会把所有接受的请求全部记录到Test Plan配置中,你在测试中可以使用这些录制的脚本。\n\n## 测试计划元素执行顺序\n* 配置节点\n* 前置处理器\n* 定时器\n* 取样器\n* 后置处理器（只在有结果可用情况下执行）\n* 断言（只在有结果可用情况下执行）\n* 监听器（只在有结果可用情况下执行）\n\n## 性能指标\n* Label:定义的HTTP请求名称\n* Samples:表示这次测试中一共发出了多少个请求\n* Average:访问页面的平均响应时间 \n* Min:访问页面的最小响应时间\n* Max:访问页面的最大响应时间\n* Error%:错误的请求的数量/请求的总数\n* Throughpu:每秒完成的请求数\n* KB/Sec:每秒从服务器端接收到的数据量\n* Median:50％的用户响应时间\n* 90%Line:90％的用户响应时间\n* 95%Line:95％的用户响应时间\n* 99%Line:99％的用户响应时间\n时间指标的单位都是毫秒。\n\n## 第一个web性能测试\n我做了一个博客网站首页的性能测试，只设置ThreadGroup,Sampler,Listener三项就可以运行。\n\n#### ThreadGroup设置\n一个性能测试请求负载是基于一个线程组完成的，jmeter中每个测试计划至少需要包含一个线程组。Test Plan右键菜单可新增ThreadGroup(add->Threads->ThreadGroup);\n![ThreadGroup](/img/jmeter-3.png)\n* Number of Threads 线程数:虚拟用户数.一个虚拟用户占用一个进程或线程。\n* Ramp-up Period 准备时长:设置的虚拟用户数需要多长时间全部启动。\n* Loop Count 循环次数：每个线程发送请求的次数。\n\n#### Sample设置\n在ThreadGroup上右键菜单可新增HttpRequest（add->Sampler->HttpRequest).Sampler是与服务器进行交互的单元.一个Sampler通常进行三部分的工作：\n* 向服务器发送请求\n* 记录服务器的响应数据\n* 记录相应时间信息\n![HttpRequest](/img/jmeter-4.png)\n\n#### Listener设置\n脚本的主要部分设置完成后,需要通过某种方式获得性能测试中的测试结果。ThreadGroup上右键菜单可新增Listner（add->Listener->Aggregate Report).\n![HttpRequest](/img/jmeter-5.png)\n我最关心的是我的博客响应时间，数据显示客户的平均响应时间为:337毫秒,99%的用户在1985毫秒内完成，也就不超2秒。最少用户响应时间为149毫秒，最大用户响应时间为5020毫秒\n","slug":"jmeter-1","published":1,"updated":"2016-03-12T16:53:31.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2pzj000c8cqpnhnntfy7"},{"title":"Javascript模块化开发","date":"2016-03-20T16:00:00.000Z","desc":"Javascript  模块化","_content":"Javascript不算模块化编程语言，但是web开发需要团队开发和团队协做。现在javascript模块化开发已非常正熟，支持模块化开发的框架非常多。\n\n## 原始写法\n``` Javascript\n    function func1(){\n        ...\n    }\n\n    function func2(){\n        ...\n    };\n```\n只要把不同的函数简单地放在一个文件中，就算是一个模块，通常一个文件一个模块。\n<!-- more -->\n\n## jquery时代\n``` Javascript\n　　var module1 = (function ($, windows) {\n　　　　//...\n　　})(jQuery, windows);\n```\n通过立即执行匿名函数来达到封装的作用,如模块内部调用全局变量，则将其输入模块中。\n\n## commonjs时代\ncommonjs规范是目前JavaScript模块化的事实标准。支持commonjs规范的框架及程序比较多，如node,seajs.规范中最重要的二点:\n* require它是一个函数,引用其它模块使用require。\n* exports是一个对象，导出模块api使用exports，可供其它模块调用。\n当然除了这两点还有一些其它细节不一一介绍。下面看一个示例:\n\nmath.js\n``` Javascript\n    exports.add=function(x,y){\n        return x+y;\n    };\n```\nincrement.js\n``` Javascript\n    var add = require('math').add;\n    exports.increment = function (val){\n        return add(val,1);\n    }\n```\n\nprogram.js\n``` Javascript\n    var inc = require('increment').increment;\n    var a = 1;\n    inc(a); \n```\n\n","source":"_posts/javascript-base-4.md","raw":"---\ntitle: Javascript模块化开发\ndate: 2016-3-21\ndesc: Javascript  模块化 \n---\nJavascript不算模块化编程语言，但是web开发需要团队开发和团队协做。现在javascript模块化开发已非常正熟，支持模块化开发的框架非常多。\n\n## 原始写法\n``` Javascript\n    function func1(){\n        ...\n    }\n\n    function func2(){\n        ...\n    };\n```\n只要把不同的函数简单地放在一个文件中，就算是一个模块，通常一个文件一个模块。\n<!-- more -->\n\n## jquery时代\n``` Javascript\n　　var module1 = (function ($, windows) {\n　　　　//...\n　　})(jQuery, windows);\n```\n通过立即执行匿名函数来达到封装的作用,如模块内部调用全局变量，则将其输入模块中。\n\n## commonjs时代\ncommonjs规范是目前JavaScript模块化的事实标准。支持commonjs规范的框架及程序比较多，如node,seajs.规范中最重要的二点:\n* require它是一个函数,引用其它模块使用require。\n* exports是一个对象，导出模块api使用exports，可供其它模块调用。\n当然除了这两点还有一些其它细节不一一介绍。下面看一个示例:\n\nmath.js\n``` Javascript\n    exports.add=function(x,y){\n        return x+y;\n    };\n```\nincrement.js\n``` Javascript\n    var add = require('math').add;\n    exports.increment = function (val){\n        return add(val,1);\n    }\n```\n\nprogram.js\n``` Javascript\n    var inc = require('increment').increment;\n    var a = 1;\n    inc(a); \n```\n\n","slug":"javascript-base-4","published":1,"updated":"2016-03-21T14:25:18.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2pzn000d8cqp4bshl6tj"},{"title":"Javascript的面向对象编程","date":"2016-02-20T16:00:00.000Z","desc":"Javascript  面向对象","_content":"Javascript里的所有东西都是对象，可是它又不并像Java,C#。不是严格意义上的OOP语言。但是它可以实现OOP的效果。但在之前你需要了解哪些关键的知识点?\n\n## 关键知识点\n\n### this\n我们看下面这个使用this的例子\n\n``` Javascript\n    var obj = {\n        name:\"yanbin\",\n        showName :function(){\n            alert(this.name);\n        }\n    };\n\n    var other ={\n        name:\"changsha\",\n        showName:obj.showName\n    };\n```\nobj.showName()提示的是yanbin,obj.showName()提示的是changsha，this是指执行时当前的对象。\n<!-- more -->\n``` Javascript\n    function test(){\n        return this;\n    }\n```\n\n执行时函数不属于任何对象时,this表示window。(使用var定义的对象也属于window)\n\n### new\n在Javascript中,new一个函数它做了以下3件事:\n* 创建新对象。\n* 拷贝prototype到新对象。\n* 设置构造函数\n* 执行函数返回给新对象。\n请看下面这个示例\n``` Javascript\n    function func(){\n        this.name = 'yanbin';\n        this.showcity =function(){\n        \talert('changsha')\n    \t}\n    }\n    var  model =new func();\n```\n通过代码还原new的步骤\n``` Javascript\nvar newobj = {};\nnewobj.__proto__ = func.prototype;\nfunc.prototype.constructor = func;\np.apply(newobj)\nvar model = newobj;\n```\n这段代码我们需要搞清楚二个属性:\n* prototype:在定义一个新函数，都会给函数创建一个prototype属性，也就是原型对象，把它看成普通对象也行了，但它可以影响这个函数实例的__protype__.\n* \\__protype\\__:是函数实例的原型对象指针，每次new一个函数的时候都会给实例生成一个指针newobj.\\__proto\\__=func.protype。当函数的原型对象改变时，那么实例也会发生改变，因为\\__proto\\__只是指针，所以它也不能修改，只能对应的原型方法或属性访问它。\n弄清楚了这些我们就可以开始OPP实践了。\n\n## 封装示例\n``` Javascript\n    function person(name,sex,s)\n    {\n        this.name =name;\n        this.sex = sex;\n\n        function sayname()\n        {\n            alert(\"my name is \"+ name +\", i'm a \"+sex);\n        }\n\n        this.say =function()\n        {\n            sayname();\n        }\n\n        var secret = s;\n        this.getsecret = function(){\n            return secret;\n        }\n        this.setsecret = function(ss){\n            secret = ss;\n        }\n    }\n    var model =new Person('yanbin','man','test');\n```\nname,sex是公开属性,sayname是一个私有方法，say是一个公共方法。secret是一个私有属性,对它的赋值和取值则是通过getsecret和setsecret这二个方法。\n\n## 继承示例\n``` Javascript\n    function Man(n)\n    {\n        this.say = function()\n        {\n            alert(\"my name is:\"+ this.realname);\n        }\n       \n        this.realname = n;\n    }\n\n    Man.prototype = {\n        realname : this.realname,\n        say : this.say\n    }\n\n    function Employee(sex)\n    {\n        var sex = sex;\n        this.getsex = function(){\n           return sex;\n        }\n    }\n    \n    Employee.prototype = new Man('yanbin');\n    var model = new Employee(\"female\");\n```\nEmployee继承man的say方法和realname属性，Emplayee有一个私有属性sex和一个getsex方法。","source":"_posts/javascript-base-3.md","raw":"---\ntitle: Javascript的面向对象编程\ndate: 2016-2-21\ndesc: Javascript  面向对象 \n---\nJavascript里的所有东西都是对象，可是它又不并像Java,C#。不是严格意义上的OOP语言。但是它可以实现OOP的效果。但在之前你需要了解哪些关键的知识点?\n\n## 关键知识点\n\n### this\n我们看下面这个使用this的例子\n\n``` Javascript\n    var obj = {\n        name:\"yanbin\",\n        showName :function(){\n            alert(this.name);\n        }\n    };\n\n    var other ={\n        name:\"changsha\",\n        showName:obj.showName\n    };\n```\nobj.showName()提示的是yanbin,obj.showName()提示的是changsha，this是指执行时当前的对象。\n<!-- more -->\n``` Javascript\n    function test(){\n        return this;\n    }\n```\n\n执行时函数不属于任何对象时,this表示window。(使用var定义的对象也属于window)\n\n### new\n在Javascript中,new一个函数它做了以下3件事:\n* 创建新对象。\n* 拷贝prototype到新对象。\n* 设置构造函数\n* 执行函数返回给新对象。\n请看下面这个示例\n``` Javascript\n    function func(){\n        this.name = 'yanbin';\n        this.showcity =function(){\n        \talert('changsha')\n    \t}\n    }\n    var  model =new func();\n```\n通过代码还原new的步骤\n``` Javascript\nvar newobj = {};\nnewobj.__proto__ = func.prototype;\nfunc.prototype.constructor = func;\np.apply(newobj)\nvar model = newobj;\n```\n这段代码我们需要搞清楚二个属性:\n* prototype:在定义一个新函数，都会给函数创建一个prototype属性，也就是原型对象，把它看成普通对象也行了，但它可以影响这个函数实例的__protype__.\n* \\__protype\\__:是函数实例的原型对象指针，每次new一个函数的时候都会给实例生成一个指针newobj.\\__proto\\__=func.protype。当函数的原型对象改变时，那么实例也会发生改变，因为\\__proto\\__只是指针，所以它也不能修改，只能对应的原型方法或属性访问它。\n弄清楚了这些我们就可以开始OPP实践了。\n\n## 封装示例\n``` Javascript\n    function person(name,sex,s)\n    {\n        this.name =name;\n        this.sex = sex;\n\n        function sayname()\n        {\n            alert(\"my name is \"+ name +\", i'm a \"+sex);\n        }\n\n        this.say =function()\n        {\n            sayname();\n        }\n\n        var secret = s;\n        this.getsecret = function(){\n            return secret;\n        }\n        this.setsecret = function(ss){\n            secret = ss;\n        }\n    }\n    var model =new Person('yanbin','man','test');\n```\nname,sex是公开属性,sayname是一个私有方法，say是一个公共方法。secret是一个私有属性,对它的赋值和取值则是通过getsecret和setsecret这二个方法。\n\n## 继承示例\n``` Javascript\n    function Man(n)\n    {\n        this.say = function()\n        {\n            alert(\"my name is:\"+ this.realname);\n        }\n       \n        this.realname = n;\n    }\n\n    Man.prototype = {\n        realname : this.realname,\n        say : this.say\n    }\n\n    function Employee(sex)\n    {\n        var sex = sex;\n        this.getsex = function(){\n           return sex;\n        }\n    }\n    \n    Employee.prototype = new Man('yanbin');\n    var model = new Employee(\"female\");\n```\nEmployee继承man的say方法和realname属性，Emplayee有一个私有属性sex和一个getsex方法。","slug":"javascript-base-3","published":1,"updated":"2016-02-27T16:33:03.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2pzq000e8cqpctv8htyo"},{"title":"Javascript的匿名函数","date":"2016-02-19T16:00:00.000Z","desc":"Javascript  匿名函数","_content":"匿名函数在javascript中非常常见且实用，它最大的用途是创建闭包（这是JavaScript语言的特性之一），并且还可以构建命名空间，以减少全局变量的使用。javascript的框架这种用法随处可见。下面看二个例子，如何定义匿名函数。\n<!-- more -->\n``` Javascript\n\tvar f = function(t){\n        alert(t);\n    };\n\tf(\"abc\");\n```\n“=”右边的函数就是一个匿名函数，创造完毕函数后，又将该函数赋给了变量f。通过f再调用这个匿名函数。\n\n``` Javascript\n\t(function(t){\n\t\talert(t)\n    })(\"abc\");\n```\n这里创建了一个匿名函数(在第一个括号内)，第二个括号用于调用该匿名函数，并传入参数。\n这就是匿名函数常用的使用方式，通常用得最多的是第二种。\n\n前端人员一般为了避免声明了一些全局变量而污染，把代码放在一个“沙箱执行”，然后在暴露出命名空间（可以为API，函数，对象）,如Jquery:\n\n``` Javascript\n\t(function( window, undefined ) {\n\t    window.jQuery = window.$ = jQuery;\n\t})( window );\n```\n\n再如我想建一个自己的框架叫yb:\n\n``` Javascript\n\t(function(window,undefined){\n\t\tvar yb = {\n\t\t\tadd:function(){\n\t\t\t\talert(\"add\");\n\t\t\t},\n\t\t\tsub:function(){\n\t\t\t\talert(\"sub\");\n\t\t\t}\n\t\t};\n\t\twindow.yb = yb;\n\t})(window);\n```\n你的方法add和sub只能通过全局对象yb访问，这个是函数闭包规则决定的。如不能理解闭包请参见[函数的闭包](http://binyanbin.github.io/2016/01/03/javascript-base-1/);\n\n\n\n\n\n","source":"_posts/javascript-base-2.md","raw":"---\ntitle: Javascript的匿名函数 \ndate: 2016-2-20\ndesc: Javascript  匿名函数 \n---\n匿名函数在javascript中非常常见且实用，它最大的用途是创建闭包（这是JavaScript语言的特性之一），并且还可以构建命名空间，以减少全局变量的使用。javascript的框架这种用法随处可见。下面看二个例子，如何定义匿名函数。\n<!-- more -->\n``` Javascript\n\tvar f = function(t){\n        alert(t);\n    };\n\tf(\"abc\");\n```\n“=”右边的函数就是一个匿名函数，创造完毕函数后，又将该函数赋给了变量f。通过f再调用这个匿名函数。\n\n``` Javascript\n\t(function(t){\n\t\talert(t)\n    })(\"abc\");\n```\n这里创建了一个匿名函数(在第一个括号内)，第二个括号用于调用该匿名函数，并传入参数。\n这就是匿名函数常用的使用方式，通常用得最多的是第二种。\n\n前端人员一般为了避免声明了一些全局变量而污染，把代码放在一个“沙箱执行”，然后在暴露出命名空间（可以为API，函数，对象）,如Jquery:\n\n``` Javascript\n\t(function( window, undefined ) {\n\t    window.jQuery = window.$ = jQuery;\n\t})( window );\n```\n\n再如我想建一个自己的框架叫yb:\n\n``` Javascript\n\t(function(window,undefined){\n\t\tvar yb = {\n\t\t\tadd:function(){\n\t\t\t\talert(\"add\");\n\t\t\t},\n\t\t\tsub:function(){\n\t\t\t\talert(\"sub\");\n\t\t\t}\n\t\t};\n\t\twindow.yb = yb;\n\t})(window);\n```\n你的方法add和sub只能通过全局对象yb访问，这个是函数闭包规则决定的。如不能理解闭包请参见[函数的闭包](http://binyanbin.github.io/2016/01/03/javascript-base-1/);\n\n\n\n\n\n","slug":"javascript-base-2","published":1,"updated":"2016-02-22T02:16:39.892Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2pzs000f8cqpwuo6g2vb"},{"title":"Javascript的闭包","date":"2016-01-02T16:00:00.000Z","desc":"Javascript  闭包","_content":"闭包是Javascript的一个重点的概念，在开发过程中用得非常多，但是在了解闭包之前我们需要了解全局与局部的概念，下面来看这个例子。\n<!-- more -->\n``` Javascript\n\tvar global = 1;\n    function myfun()\n    {\n    \tvar my = 1;\n\t\tfunction infun()\n\t\t{\n\t\t\tvar in = 2;\n\t\t\tfunction innerfun()\n\t\t\t{\n\t\t\t\tvar inner = 2;\n\t\t\t}\n\t\t}\n\n\t\tfunction infun2()\n\t   ｛\n\t\t｝\n    }\n\n    function myfun2()\n    {\n\n    }\n```\n这是一个三层嵌套的函数。我对局部的了解是指函数的内部，局部对像就是指函数内部的变量及函数。全局对象就是没有定义在任何函数内的变量和函数。全局对象是window的子对象。\n\n在上面的这个程序中，全局对象有:\n*global变量\n*myfun函数\n*myfun2函数\n\nmyfun的内部对像有:\n*my变量\n*infun函数\n*infun2函数\n\ninfun的内部对像有:\n*in变量\n*innerfun函数\n以此类推。\n\n了解了局部与全局后，闭包就容易了解,它是指内层函数可以使用外层函数局部对象，外层函数不能使用内层函数的局部对象，这种规则就叫函数的闭包。\n从上面这个例子，我们就清楚在innerfun函数中，可以访问当前所有对像，因为它是最内层函数。而在infun函数中除了innerfun函数和它的内部变量inner不能访问外，其它的也都可以访问。\n大家都可以访问全局对象，因为它在最外层。这就是为什么很多js库总是建一个对象放到window下做全局对象，你只要引用就可以访问到它。\n\n补充:没有使用var进行定义的变量也是全局对象。例如:\n\n``` Javascript\n    function myfun()\n    {\n        var part =\"part variable\";\n        global  =\"global variable\";\n    }\n```\n\n\n\n\n\n","source":"_posts/javascript-base-1.md","raw":"---\ntitle: Javascript的闭包 \ndate: 2016-1-3\ndesc: Javascript  闭包\n---\n闭包是Javascript的一个重点的概念，在开发过程中用得非常多，但是在了解闭包之前我们需要了解全局与局部的概念，下面来看这个例子。\n<!-- more -->\n``` Javascript\n\tvar global = 1;\n    function myfun()\n    {\n    \tvar my = 1;\n\t\tfunction infun()\n\t\t{\n\t\t\tvar in = 2;\n\t\t\tfunction innerfun()\n\t\t\t{\n\t\t\t\tvar inner = 2;\n\t\t\t}\n\t\t}\n\n\t\tfunction infun2()\n\t   ｛\n\t\t｝\n    }\n\n    function myfun2()\n    {\n\n    }\n```\n这是一个三层嵌套的函数。我对局部的了解是指函数的内部，局部对像就是指函数内部的变量及函数。全局对象就是没有定义在任何函数内的变量和函数。全局对象是window的子对象。\n\n在上面的这个程序中，全局对象有:\n*global变量\n*myfun函数\n*myfun2函数\n\nmyfun的内部对像有:\n*my变量\n*infun函数\n*infun2函数\n\ninfun的内部对像有:\n*in变量\n*innerfun函数\n以此类推。\n\n了解了局部与全局后，闭包就容易了解,它是指内层函数可以使用外层函数局部对象，外层函数不能使用内层函数的局部对象，这种规则就叫函数的闭包。\n从上面这个例子，我们就清楚在innerfun函数中，可以访问当前所有对像，因为它是最内层函数。而在infun函数中除了innerfun函数和它的内部变量inner不能访问外，其它的也都可以访问。\n大家都可以访问全局对象，因为它在最外层。这就是为什么很多js库总是建一个对象放到window下做全局对象，你只要引用就可以访问到它。\n\n补充:没有使用var进行定义的变量也是全局对象。例如:\n\n``` Javascript\n    function myfun()\n    {\n        var part =\"part variable\";\n        global  =\"global variable\";\n    }\n```\n\n\n\n\n\n","slug":"javascript-base-1","published":1,"updated":"2016-02-21T14:51:30.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2pzx000g8cqpg1k1vukn"},{"title":"电商面试题","date":"2016-02-17T16:00:00.000Z","desc":"电商 抢购 超卖","_content":"15年年底去一家电商服务公司面试，其中有一道题目是如何解决电商站点商品秒杀的相关问题。[面试题目可以参见](https://github.com/hishopdc/dc2015)。固定的数据库结构下实现三个接口，查看、下单、付款。\n<!-- more -->\n## 主要问题:高并发查询及更新数据库\n解决的方案其实比较其实并不复杂，也很常规。无非就是用缓存队列实现批量更新数据库。把下单的数据放入队列中，然后批量更新到数据库中去。说起来比较简单，实践中还是踩了一些坑。\n\n### 主要实现逻辑\n\n订单处理类\n``` CSharp\n    /// <summary>\n    /// 订单缓存队列处理类\n    /// </summary>\n    public class OrderCacheQuene\n    {\n        /// <summary>\n        /// 订单队列缓存\n        /// </summary>\n        private static List<Order> _orders;\n        /// <summary>\n        /// 数据库操作接口\n        /// </summary>\n        private static IPromotion _service;\n        /// <summary>\n        /// 锁\n        /// </summary>\n        private static object _locker = new object();\n        /// <summary>\n        /// 队列处理线程\n        /// </summary>\n        private static Thread _thread;\n\n        /// <summary>\n        /// 订单队列启动\n        /// </summary>\n        public static void Start()\n        {\n            _thread = new Thread(new ThreadStart(OrderDispose));\n            _thread.Start();\n        }\n\n        /// <summary>\n        /// 缓存结束\n        /// </summary>\n        public static void End()\n        {\n            lock (_locker)\n            {\n                _thread.Abort();\n                _service.OrderTrans(_orders);\n                _orders.Clear();\n            }\n        }\n\n\n        /// <summary>\n        /// 下单\n        /// </summary>\n        public static string OrderBuy(Order o)\n        {\n            lock (_locker)\n            {\n                _orders.Add(o);\n            }\n            return o.OrderId;\n        }\n\n        /// <summary>\n        /// 支付\n        /// </summary>\n        public static bool OrderPay(RequestPay o, DateTime? paytime)\n        {\n            lock (_locker)\n            {\n            \tOrder order = null;\n                int index = _orders.FindIndex(t => t.OrderId == o.order_id && t.UserId == o.uid);\n                if (index >= 0)///已存在缓存中\n                {\n                    _orders[index].PayTime = paytime;\n                    return true;\n                }            \t\n                order = _service.GetOrder(o.order_id);\n                if (order == null)\n                    return false;\n                else///已存在数据库中\n                {\n                    order.PayTime = paytime;\n                    lock (_locker)\n                    {\n                        _orders.Add(order);\n                    }\n                    return true;\n                }\n            }\n        }\n\n\n        /// <summary>\n        /// 判断队列是否已满\n        /// </summary>\n        public static bool isFull()\n        {\n            return _orders.Count >= Constant.QueueMaxCount ? true : false;\n        }\n\n        /// <summary>\n        /// 订单队列处理事件\n        /// </summary>\n        private static void OrderDispose()\n        {\n            while (true)\n            {\n                //DateTime starttime = DateTime.Now;\n                lock (_locker)\n                {\n                   List<Order> orders =  _orders.Take(Constant.MaxOrderDispose).ToList();\n                    _service.OrderTrans(orders.ToList());//调用数据库接口处理订单\n                    foreach (Order o in orders)\n                        _orders.Remove(o);\n                }\n                Thread.Sleep(Constant.QueueDisposeTimeSpan);//每次处理完成休眠\n                //DateTime endtime = DateTime.Now;\n                //System.Diagnostics.Debug.WriteLine(\"Yanbin TimeSpan:\"+endtime.Subtract(starttime).Milliseconds);\n            }\n        }\n    }\n```\n\n缓存我直接使用的静态对像，效果是一样的。批量提交的方法是 _service.OrderTrans，在这里就不列出来，但是一些数据库操作。\n\n订单队列启动与结束\n\n``` CSharp\n    public class WebApiApplication : System.Web.HttpApplication\n    {\n        protected void Application_Start()\n        {\n            //订单队列初始化\n            OrderCacheQuene.Start();\n        }\n\n        protected void Application_End()\n        {\n            //结束处理\n            OrderCacheQuene.End();\n        }\n    }\n```\n\n### 坑1:超卖\n程序实现以后，我写了一个测试程序去跑它，跑到200线程时超卖了，思来想去之后发现是判断的问题，开始下单时的判断条件没有放到订单队列程序里面。因为并发大，所以有一些客户端请求下单的时候,程序判断是满足下单条件,但是还有一些客户端的请求正在响应，把订单加入缓存了，造成判断不一致，最终引起超卖。所以下单的条件判断需要加到锁里面，虽然对性能上有一些损耗，但是可以保证不会超卖。\n\n``` CSharp\n        /// <summary>\n        /// 下单\n        /// </summary>\n        public static string OrderBuy(Order o)\n        {\n\n            lock (_locker)\n            {\n\t            if (队列已满，已卖空，已下单等条件)\n\t            \treturn null;            \t\n                _orders.Add(o);\n            }\n            return o.OrderId;\n        }\n```\n\n### 坑2:效率坑\n做web接口，在.net的系统中当然用webapi,更种好处用过都知道，没想到在高并发的条件下效率不如handler。以下这些数据是在我这台旧的笔记本上测试出来的。\n\n|线程数|线程调用接口数|处理方式|说明|产生订单数|接口方式|完成时间(秒)|完成时间(分钟)|处理请求总数|平均每秒处理请求|\n|-------|-------|-------|-------|-------|-------|-------|-------|-------|\n|2000|100|只查询|2000人同时查100种商品|0|handler|650.5|10.84|199706|307.004|\n|2000|100|只查询|2000人同时查100种商品|0|api|1180.8|19.68|199747|169.162|\n|1000|50|只查询|1000人同时查50种商品|0|handler|86.3|1.44|49932|578.586|\n|1000|50|只查询|1000人同时查50种商品|0|api|103.9|1.73|49948|480.731|\n|2000|10|抢购|2000人抢100个订单|100|handler|81.9|1.37|40430|493.651|\n|2000|10|抢购|2000人抢100个订单|100|api|79.7|1.33|28738|360.577|\n|2000|50|并发购买|50个人同时买2000种不同商品|100000|Handler|3467|57.78299471|86.378|\n|2000|50|并发购买|50个人同时买2000种不同商品|100000|api|3638|60.63|299375|82.291|\n\n从上图可以看出，在高并发情况下webapi的性能确实不行。\n\n### 开发总结\n\n* 锁在高并发的情况下的使用，如何满足业务要求。\n* 缓存的使用，缓存与数据库之间的数据如何保持一致。\n* 对于大型电商网站，缓存队列需要设置上限，不然会引起内存问题，不过在这里不是这道题目的重点。\n\n[源码下载](https://github.com/binyanbin/interview/)\n\n","source":"_posts/interview-hishop.md","raw":"---\ntitle: 电商面试题\ndate: 2016-2-18\ndesc: 电商 抢购 超卖\n---\n15年年底去一家电商服务公司面试，其中有一道题目是如何解决电商站点商品秒杀的相关问题。[面试题目可以参见](https://github.com/hishopdc/dc2015)。固定的数据库结构下实现三个接口，查看、下单、付款。\n<!-- more -->\n## 主要问题:高并发查询及更新数据库\n解决的方案其实比较其实并不复杂，也很常规。无非就是用缓存队列实现批量更新数据库。把下单的数据放入队列中，然后批量更新到数据库中去。说起来比较简单，实践中还是踩了一些坑。\n\n### 主要实现逻辑\n\n订单处理类\n``` CSharp\n    /// <summary>\n    /// 订单缓存队列处理类\n    /// </summary>\n    public class OrderCacheQuene\n    {\n        /// <summary>\n        /// 订单队列缓存\n        /// </summary>\n        private static List<Order> _orders;\n        /// <summary>\n        /// 数据库操作接口\n        /// </summary>\n        private static IPromotion _service;\n        /// <summary>\n        /// 锁\n        /// </summary>\n        private static object _locker = new object();\n        /// <summary>\n        /// 队列处理线程\n        /// </summary>\n        private static Thread _thread;\n\n        /// <summary>\n        /// 订单队列启动\n        /// </summary>\n        public static void Start()\n        {\n            _thread = new Thread(new ThreadStart(OrderDispose));\n            _thread.Start();\n        }\n\n        /// <summary>\n        /// 缓存结束\n        /// </summary>\n        public static void End()\n        {\n            lock (_locker)\n            {\n                _thread.Abort();\n                _service.OrderTrans(_orders);\n                _orders.Clear();\n            }\n        }\n\n\n        /// <summary>\n        /// 下单\n        /// </summary>\n        public static string OrderBuy(Order o)\n        {\n            lock (_locker)\n            {\n                _orders.Add(o);\n            }\n            return o.OrderId;\n        }\n\n        /// <summary>\n        /// 支付\n        /// </summary>\n        public static bool OrderPay(RequestPay o, DateTime? paytime)\n        {\n            lock (_locker)\n            {\n            \tOrder order = null;\n                int index = _orders.FindIndex(t => t.OrderId == o.order_id && t.UserId == o.uid);\n                if (index >= 0)///已存在缓存中\n                {\n                    _orders[index].PayTime = paytime;\n                    return true;\n                }            \t\n                order = _service.GetOrder(o.order_id);\n                if (order == null)\n                    return false;\n                else///已存在数据库中\n                {\n                    order.PayTime = paytime;\n                    lock (_locker)\n                    {\n                        _orders.Add(order);\n                    }\n                    return true;\n                }\n            }\n        }\n\n\n        /// <summary>\n        /// 判断队列是否已满\n        /// </summary>\n        public static bool isFull()\n        {\n            return _orders.Count >= Constant.QueueMaxCount ? true : false;\n        }\n\n        /// <summary>\n        /// 订单队列处理事件\n        /// </summary>\n        private static void OrderDispose()\n        {\n            while (true)\n            {\n                //DateTime starttime = DateTime.Now;\n                lock (_locker)\n                {\n                   List<Order> orders =  _orders.Take(Constant.MaxOrderDispose).ToList();\n                    _service.OrderTrans(orders.ToList());//调用数据库接口处理订单\n                    foreach (Order o in orders)\n                        _orders.Remove(o);\n                }\n                Thread.Sleep(Constant.QueueDisposeTimeSpan);//每次处理完成休眠\n                //DateTime endtime = DateTime.Now;\n                //System.Diagnostics.Debug.WriteLine(\"Yanbin TimeSpan:\"+endtime.Subtract(starttime).Milliseconds);\n            }\n        }\n    }\n```\n\n缓存我直接使用的静态对像，效果是一样的。批量提交的方法是 _service.OrderTrans，在这里就不列出来，但是一些数据库操作。\n\n订单队列启动与结束\n\n``` CSharp\n    public class WebApiApplication : System.Web.HttpApplication\n    {\n        protected void Application_Start()\n        {\n            //订单队列初始化\n            OrderCacheQuene.Start();\n        }\n\n        protected void Application_End()\n        {\n            //结束处理\n            OrderCacheQuene.End();\n        }\n    }\n```\n\n### 坑1:超卖\n程序实现以后，我写了一个测试程序去跑它，跑到200线程时超卖了，思来想去之后发现是判断的问题，开始下单时的判断条件没有放到订单队列程序里面。因为并发大，所以有一些客户端请求下单的时候,程序判断是满足下单条件,但是还有一些客户端的请求正在响应，把订单加入缓存了，造成判断不一致，最终引起超卖。所以下单的条件判断需要加到锁里面，虽然对性能上有一些损耗，但是可以保证不会超卖。\n\n``` CSharp\n        /// <summary>\n        /// 下单\n        /// </summary>\n        public static string OrderBuy(Order o)\n        {\n\n            lock (_locker)\n            {\n\t            if (队列已满，已卖空，已下单等条件)\n\t            \treturn null;            \t\n                _orders.Add(o);\n            }\n            return o.OrderId;\n        }\n```\n\n### 坑2:效率坑\n做web接口，在.net的系统中当然用webapi,更种好处用过都知道，没想到在高并发的条件下效率不如handler。以下这些数据是在我这台旧的笔记本上测试出来的。\n\n|线程数|线程调用接口数|处理方式|说明|产生订单数|接口方式|完成时间(秒)|完成时间(分钟)|处理请求总数|平均每秒处理请求|\n|-------|-------|-------|-------|-------|-------|-------|-------|-------|\n|2000|100|只查询|2000人同时查100种商品|0|handler|650.5|10.84|199706|307.004|\n|2000|100|只查询|2000人同时查100种商品|0|api|1180.8|19.68|199747|169.162|\n|1000|50|只查询|1000人同时查50种商品|0|handler|86.3|1.44|49932|578.586|\n|1000|50|只查询|1000人同时查50种商品|0|api|103.9|1.73|49948|480.731|\n|2000|10|抢购|2000人抢100个订单|100|handler|81.9|1.37|40430|493.651|\n|2000|10|抢购|2000人抢100个订单|100|api|79.7|1.33|28738|360.577|\n|2000|50|并发购买|50个人同时买2000种不同商品|100000|Handler|3467|57.78299471|86.378|\n|2000|50|并发购买|50个人同时买2000种不同商品|100000|api|3638|60.63|299375|82.291|\n\n从上图可以看出，在高并发情况下webapi的性能确实不行。\n\n### 开发总结\n\n* 锁在高并发的情况下的使用，如何满足业务要求。\n* 缓存的使用，缓存与数据库之间的数据如何保持一致。\n* 对于大型电商网站，缓存队列需要设置上限，不然会引起内存问题，不过在这里不是这道题目的重点。\n\n[源码下载](https://github.com/binyanbin/interview/)\n\n","slug":"interview-hishop","published":1,"updated":"2016-03-23T14:20:24.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2q00000h8cqp2kbphg81"},{"title":"Himall集群版解决方案及性能测试结果","date":"2016-06-06T16:00:00.000Z","desc":"分布式架构 微服务","_content":"## 架构设计\n集中架构设计出于系统的可扩展性、可维护性以及成本等多方面的因素考虑，逐渐被放弃，转而采用分布式的架构设计。常用分布式架构采用按模块纵向分解的方式,然后纵向分解中的某些模块仍有可能是一个复杂且庞大的业务，需要继续进行拆分。每个模块又由许多个微服务完成业务功能，微服务可独部署弹性伸缩。下图为Himall分布式集群版的整体架构设计:\n\n![图](http://binyanbin.github.io/img/hishop-11.png)\n\n## 部署图\n\n![图](http://binyanbin.github.io/img/hishop-12.png)\n\n## 标准部署方案的业务支撑能力\n\n| 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） | 日均最大PV（11小时峰值测试）|\n|-----|-----|-----|-----|\n| 3000 | 4秒内 | 2000 | 约7920万 |\n\n## 标准集群部署配置\n\n| 硬件（设施） | 配置 | 数量 |\n|-------|-------|-------|\n| SLB负载均衡服务器 | 依实际流量付费 | 5 |\n| 前端应用服务器 | Intel Xeon E5-2430 2.2GHz 8G RAM 64位Win 2008 R2 | 3 ~ 6 |\n| 后端应用服务器 | Intel Xeon E5-2430 2.2GHz 8G RAM 64位Win 2008 R2 | 6 ~ 10 |\n| CDN内容加速 | 依图片及视频等资源的容量和使用量付费 |    |\t\n| Redis集群 | 热点内容缓存 | 按使用收费 |\n| DRDS | 按使用收费\t|       |\n\n## 标准配置性能测试数据\n| 服务器 | 说明 |\n|------|------|\n| 测试服务器 | 一台ECS 系统:centOS 测试软件:Jmeter |\n| 测试对象Himall | 标准集群阿里云部署 |\n\n####  浏览首页\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-13.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-14.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） |\n|-----|-----|-----|-----|\n| 首页 | 3000 | 0.42秒 | 3550 |\n\n#### 浏览商品详情页\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-15.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-16.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） |\n|-----|-----|-----|-----|\n| 商品浏览 | 3000 | 3.16秒 | 660 |\n\n#### 商品搜索\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-17.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-18.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） | 关键字数 |\n|-----|-----|-----|-----|\n| 商品搜索 | 3000 | 1.125秒 | 1534.1 | 100 |\n\n#### 用户登陆\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-19.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-20.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） |\n|-----|-----|-----|-----|\n| 用户登陆 | 2000 | 4.283秒 | 349 |\n\n#### 下单\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-21.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-22.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） |\n|-----|-----|-----|-----|\n| 下单 | 1000 | 4.657秒 | 189.1 |\n\n#### 下单流程\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-23.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-24.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） |\n|-----|-----|-----|-----|\n| 购买商品流程 | 1000 | 15.657秒 | 176.8 |\n","source":"_posts/hishop-3.md","raw":"---\ntitle: Himall集群版解决方案及性能测试结果\ndate: 2016-6-7\ndesc: 分布式架构 微服务\n---\n## 架构设计\n集中架构设计出于系统的可扩展性、可维护性以及成本等多方面的因素考虑，逐渐被放弃，转而采用分布式的架构设计。常用分布式架构采用按模块纵向分解的方式,然后纵向分解中的某些模块仍有可能是一个复杂且庞大的业务，需要继续进行拆分。每个模块又由许多个微服务完成业务功能，微服务可独部署弹性伸缩。下图为Himall分布式集群版的整体架构设计:\n\n![图](http://binyanbin.github.io/img/hishop-11.png)\n\n## 部署图\n\n![图](http://binyanbin.github.io/img/hishop-12.png)\n\n## 标准部署方案的业务支撑能力\n\n| 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） | 日均最大PV（11小时峰值测试）|\n|-----|-----|-----|-----|\n| 3000 | 4秒内 | 2000 | 约7920万 |\n\n## 标准集群部署配置\n\n| 硬件（设施） | 配置 | 数量 |\n|-------|-------|-------|\n| SLB负载均衡服务器 | 依实际流量付费 | 5 |\n| 前端应用服务器 | Intel Xeon E5-2430 2.2GHz 8G RAM 64位Win 2008 R2 | 3 ~ 6 |\n| 后端应用服务器 | Intel Xeon E5-2430 2.2GHz 8G RAM 64位Win 2008 R2 | 6 ~ 10 |\n| CDN内容加速 | 依图片及视频等资源的容量和使用量付费 |    |\t\n| Redis集群 | 热点内容缓存 | 按使用收费 |\n| DRDS | 按使用收费\t|       |\n\n## 标准配置性能测试数据\n| 服务器 | 说明 |\n|------|------|\n| 测试服务器 | 一台ECS 系统:centOS 测试软件:Jmeter |\n| 测试对象Himall | 标准集群阿里云部署 |\n\n####  浏览首页\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-13.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-14.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） |\n|-----|-----|-----|-----|\n| 首页 | 3000 | 0.42秒 | 3550 |\n\n#### 浏览商品详情页\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-15.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-16.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） |\n|-----|-----|-----|-----|\n| 商品浏览 | 3000 | 3.16秒 | 660 |\n\n#### 商品搜索\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-17.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-18.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） | 关键字数 |\n|-----|-----|-----|-----|\n| 商品搜索 | 3000 | 1.125秒 | 1534.1 | 100 |\n\n#### 用户登陆\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-19.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-20.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） |\n|-----|-----|-----|-----|\n| 用户登陆 | 2000 | 4.283秒 | 349 |\n\n#### 下单\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-21.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-22.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） |\n|-----|-----|-----|-----|\n| 下单 | 1000 | 4.657秒 | 189.1 |\n\n#### 下单流程\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-23.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-24.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） |\n|-----|-----|-----|-----|\n| 购买商品流程 | 1000 | 15.657秒 | 176.8 |\n","slug":"hishop-3","published":1,"updated":"2016-06-07T12:52:42.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2q03000i8cqpmmkf5rej"},{"title":"Himall架构方案总结","date":"2016-06-04T16:00:00.000Z","desc":"分布式架构 微服务","_content":"这段时间一直做[Himall](http://www.hishop.com.cn/products/himall/)的架构优化，也一直思考什么样的架构设计更合适大型商城系统或者是大型业务系统。从早期的集中化架构到现在的分布式架构，中间经历的各种问题，现在做一个总结。\n<!-- more -->\n## 集中化架构\n![图](/img/hishop-7.png)\nHimall早期功能比较少，而且业务相对简单。经过一段时间的开发，一个简单的应用诞生了。同时，集中式设计毫无争议的成为了团队的选择。但是，随着几次迭代开发之后，功能越来越多，业务越来越复杂，这种架构的缺点也渐渐地浮出了水面：\n1. 系统的可维护性受到影响，尤其是那些大型应用\n多人开发的一个复杂的应用系统，团队人数越多,开发人员必然层次不一，规范难统一，系统模块之间的耦合非常重,模块之间太多相互依赖，非常容易出问题。\n2. 团队开发效率低，协调工作非常多\n任何改动都会牵涉到多个业务模块,不可能所有开发人员能熟习所有模块，需要与其它业务模块开发人员沟通协调。\n3. 负载均衡不能充分发挥作用\n集中化架构下的应用即使你做负载均衡，服务器的性能会被所有功能平摊。不能实现服务器性能最大化，也不合适针对特定业务进行特别优化。\n最终，曾经轻量简洁的应用将会变成一代又一代开发者的噩梦。\n\n## 分布式架构\nHimall必须寻找到一种方式，将轻量并且质量较好的那部分模块保留下来。也就是找到一个可持续发展的架构，并且在许多次功能迭代开发之后依旧能够让开发人员保持高效开发的开发方式。\n \n### 纵向分解\n![图](/img/hishop-8.png)\n这是一个非常自然而通用的方法，把所有的功能集中到单一的应用中，不如将应用分解成了多个垂直的小模块，它们相互独立，互不影响,独立部署,通过REST请求来传递信息。\n\n在模块之间共享代码是严令禁止的。当然，在特殊的情况下，如果我们需要分享代码，我们会建公共模块来解决该问题。依就以REST请求来访问代码。如日志功能，配置功能等\n\n这些模块同样不能共享一个数据库架构，因为这样做会导致模块间的紧密耦合：数据结构的改变会使得一个模块不能够被独立的部署。对于共享数据部分，我们也建立一个公共数据库来解决这个问题，定期或不定期把数据同步到公共数据库中，汇总数据。这个同步工作由Daemon去完成。\n\n但是一个垂直模块仍旧可能成为一个相对大型的集中化应用。\n就拿订单来说，订单不仅包括了商品信息，库存验证，会员的积分使用或等及规则，还有商家的各种促销信息，才能算出订单价格，这样订单才可以支付。一个订单模块做下来依就是一个相对大型的集中化应用。因此我们需要继续对垂直模块进行拆分。\n\n### 微服务\n![图](/img/hishop-9.jpg)\n通过分布式架构继续将模块分解成多个模块。\n在这种情况下，应用不仅仅被垂直分解，同时还会被水平分解。这种架构中，请求到达应用后，对请求的处理会被分布于多个微服务中，然后每一微服务产生的结果汇总一个响应，发送回请求者。\n每一个微服务，仅仅集中于一个业务模块中的几个功能,从而达到高内聚低耦合的目的，并且它结构清晰，一个开发者能够很轻松的掌握它。\n\n一个模块由一个或多个微服务组成,模块之间的调用全由微服务接口完成，每个微服务自带数据存储,可以独立部署。模块可折，微服务可合，这种架构灵活性非常高。\n\n#### 微服务负载均衡\n由于微服务粒度划分较细，使用负载均衡更能按需扩展那些性能较差的微服务，发挥服务器的最大性能价值。\n\n![图](/img/hishop-10.jpg)\n\n在负载均衡中，不同实例的服务通常会分时使用同一个数据库，数据库因此成为了系统的瓶颈，这时我们采用性能更高的nosql数据库，如mongodb。不同微服务使用不同数据库并不会对系造成影响。\n\n#### 优点\n* 微服务非常小，微服务不需要重量级框架和过多的设计，代码相对简单。\n* 他们能够被独立的部署。因此持续交付或者持续部署变得非常的简单。\n* 开发者能够为每一个服务选择最适合的开发语言和数据库。不用担心对项目产生影响。\n* 每个微服务可以独立测试，易于找出性能瓶颈。\n\n#### 需要解决的问题\n* 因为微服务数据较大，布署难度加大，需要建立一套更方便的部署机制。\n* 同样需要建立统一的日志管理模块，方便找查问题。\n* 同样需要统一配置信息管理.\n* 公共数据的读写问题，如公共缓存，公共数据库。建立一套有效且高性的方案，来解决读写冲突。\n\n虽然这些只是这段时间的经验总结，Himall也未完成达到我们所期望的状态，但是我们会继续朝这个访问努力。经过1-2年的迭代之后，我们的架构会更加成熟，经验变得更加丰富。\n\n","source":"_posts/hishop-2.md","raw":"---\ntitle: Himall架构方案总结\ndate: 2016-6-5\ndesc: 分布式架构 微服务\n---\n这段时间一直做[Himall](http://www.hishop.com.cn/products/himall/)的架构优化，也一直思考什么样的架构设计更合适大型商城系统或者是大型业务系统。从早期的集中化架构到现在的分布式架构，中间经历的各种问题，现在做一个总结。\n<!-- more -->\n## 集中化架构\n![图](/img/hishop-7.png)\nHimall早期功能比较少，而且业务相对简单。经过一段时间的开发，一个简单的应用诞生了。同时，集中式设计毫无争议的成为了团队的选择。但是，随着几次迭代开发之后，功能越来越多，业务越来越复杂，这种架构的缺点也渐渐地浮出了水面：\n1. 系统的可维护性受到影响，尤其是那些大型应用\n多人开发的一个复杂的应用系统，团队人数越多,开发人员必然层次不一，规范难统一，系统模块之间的耦合非常重,模块之间太多相互依赖，非常容易出问题。\n2. 团队开发效率低，协调工作非常多\n任何改动都会牵涉到多个业务模块,不可能所有开发人员能熟习所有模块，需要与其它业务模块开发人员沟通协调。\n3. 负载均衡不能充分发挥作用\n集中化架构下的应用即使你做负载均衡，服务器的性能会被所有功能平摊。不能实现服务器性能最大化，也不合适针对特定业务进行特别优化。\n最终，曾经轻量简洁的应用将会变成一代又一代开发者的噩梦。\n\n## 分布式架构\nHimall必须寻找到一种方式，将轻量并且质量较好的那部分模块保留下来。也就是找到一个可持续发展的架构，并且在许多次功能迭代开发之后依旧能够让开发人员保持高效开发的开发方式。\n \n### 纵向分解\n![图](/img/hishop-8.png)\n这是一个非常自然而通用的方法，把所有的功能集中到单一的应用中，不如将应用分解成了多个垂直的小模块，它们相互独立，互不影响,独立部署,通过REST请求来传递信息。\n\n在模块之间共享代码是严令禁止的。当然，在特殊的情况下，如果我们需要分享代码，我们会建公共模块来解决该问题。依就以REST请求来访问代码。如日志功能，配置功能等\n\n这些模块同样不能共享一个数据库架构，因为这样做会导致模块间的紧密耦合：数据结构的改变会使得一个模块不能够被独立的部署。对于共享数据部分，我们也建立一个公共数据库来解决这个问题，定期或不定期把数据同步到公共数据库中，汇总数据。这个同步工作由Daemon去完成。\n\n但是一个垂直模块仍旧可能成为一个相对大型的集中化应用。\n就拿订单来说，订单不仅包括了商品信息，库存验证，会员的积分使用或等及规则，还有商家的各种促销信息，才能算出订单价格，这样订单才可以支付。一个订单模块做下来依就是一个相对大型的集中化应用。因此我们需要继续对垂直模块进行拆分。\n\n### 微服务\n![图](/img/hishop-9.jpg)\n通过分布式架构继续将模块分解成多个模块。\n在这种情况下，应用不仅仅被垂直分解，同时还会被水平分解。这种架构中，请求到达应用后，对请求的处理会被分布于多个微服务中，然后每一微服务产生的结果汇总一个响应，发送回请求者。\n每一个微服务，仅仅集中于一个业务模块中的几个功能,从而达到高内聚低耦合的目的，并且它结构清晰，一个开发者能够很轻松的掌握它。\n\n一个模块由一个或多个微服务组成,模块之间的调用全由微服务接口完成，每个微服务自带数据存储,可以独立部署。模块可折，微服务可合，这种架构灵活性非常高。\n\n#### 微服务负载均衡\n由于微服务粒度划分较细，使用负载均衡更能按需扩展那些性能较差的微服务，发挥服务器的最大性能价值。\n\n![图](/img/hishop-10.jpg)\n\n在负载均衡中，不同实例的服务通常会分时使用同一个数据库，数据库因此成为了系统的瓶颈，这时我们采用性能更高的nosql数据库，如mongodb。不同微服务使用不同数据库并不会对系造成影响。\n\n#### 优点\n* 微服务非常小，微服务不需要重量级框架和过多的设计，代码相对简单。\n* 他们能够被独立的部署。因此持续交付或者持续部署变得非常的简单。\n* 开发者能够为每一个服务选择最适合的开发语言和数据库。不用担心对项目产生影响。\n* 每个微服务可以独立测试，易于找出性能瓶颈。\n\n#### 需要解决的问题\n* 因为微服务数据较大，布署难度加大，需要建立一套更方便的部署机制。\n* 同样需要建立统一的日志管理模块，方便找查问题。\n* 同样需要统一配置信息管理.\n* 公共数据的读写问题，如公共缓存，公共数据库。建立一套有效且高性的方案，来解决读写冲突。\n\n虽然这些只是这段时间的经验总结，Himall也未完成达到我们所期望的状态，但是我们会继续朝这个访问努力。经过1-2年的迭代之后，我们的架构会更加成熟，经验变得更加丰富。\n\n","slug":"hishop-2","published":1,"updated":"2016-06-06T07:22:52.565Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2q06000j8cqpbb0ohb71"},{"title":"浅谈Himall商城限时购设计","date":"2016-04-20T16:00:00.000Z","desc":"抢购 并发下单","_content":"互联网正在高速发展，使用互联网服务的用户越多，高并发的场景也变得越来越多。[Himall](http://www.hishop.com.cn/products/himall/)限时购功能则是一个典型的短时间高并发场景。虽然我们解决问题的具体技术方案可能千差万别，但是遇到的挑战却是相似的，因此解决问题的思路也异曲同工。\n什么是限时购?限时购跟大部分电商抢购业务相同,即限时且限量抢购。不管小米还是华为，或是其它电商公司，对抢购业务运营总是最为火爆，每发一款新品，都限量发售，每次搞的大家心里痒痒的。抢购太火爆有时引起站点打不开，崩溃了;还有就是卖出的数量比设置可购买的数量要多。那么问题来了：我们如何在设计中如何解决。通常我们需要从设计中考虑以下问题:\n* 针对高并发，我们如何解耦后端压力，特别是数据库的压力。\n* 如何保障库存可靠。\n<!-- more -->\n\n我们可以试想一下抢购时哪些页面会请求最多。抢购之前人们通常会通常刷页面等待，一般在抢购开始前一点时间会频繁刷新抢购倒数的页面或购买详情页面。抢购开始以后前一段时间下单的人会很多。付款并发量相对较小，通常订单在下单后几小时内都能付款，缓解了并发压力。针对以上问题及场景，我们做了以下处理，增加限时购缓存订单系统，去支持限时购高并发处理，并保持限时购业务的可靠性。\n![图1](/img/hishop-1.png)\n\n[Hiamll](http://www.hishop.com.cn/products/himall/)在2.3版本做了如下改进:\n1.引入Redis做缓存。\n2.在用户抢购开始前频繁刷页面时,系统只从缓存中取商品数据，解耦了数据库查询的压力。\n3.用户下单时系统只把订单数据存入订单缓存队列后然后告诉用户你的订单正在处理。然后由Redis Pub/Sub服务通知Web服务器，服务器把库存订单进行串行化处理，解耦数据库并发下单压力，保证库存可靠。\n4.支付功能保持原来实现不变。\n\n具体实现如下:\n买家前端查询限时购商品数据时只走缓存。\n![图2](/img/hishop-2.png)\n卖家后台更新限时购或库存信息时需同步更新数据库及缓存。\n![图3](/img/hishop-3.png)\n系统为每个正在开卖的限时购商品库存创建锁，买家对某库存下单时锁住该库存的下单操作，每一个商品库存只允许一个会员下单，下单的订单数据直接加入订单缓存后告诉买家[您的订单正在处理,请稍等]。然后通过Redis Pub/Sub服务通知服务器处理订单，将订单按库存串行化处理，订单处理完成后，则更新限时购订单缓存的处理状态。\n![图4](/img/hishop-4.png)\n买家得知订单正在处理后，则不断查询缓存的订单处理状态。直到获取订单处理结果，下单成功则进行支付页面，失败则提示失败原因并引导买家重新下单。\n![图5](/img/hishop-5.png)\n最后就是在Web服务启动时，需要对限时购订单缓存系统初始化，把商品数据加入缓存中，并处理上次未处理完成的订单。\n![图6](/img/hishop-6.png)\n\n总结:无论你用什么方式处理性能问题，性能优化的核心思想是分治。这种思想在日常生活中无处不在，大家都知道一次做不了的事，就分多次做，这就是分治。","source":"_posts/hishop-1.md","raw":"---\ntitle: 浅谈Himall商城限时购设计\ndate: 2016-4-21\ndesc: 抢购 并发下单 \n---\n互联网正在高速发展，使用互联网服务的用户越多，高并发的场景也变得越来越多。[Himall](http://www.hishop.com.cn/products/himall/)限时购功能则是一个典型的短时间高并发场景。虽然我们解决问题的具体技术方案可能千差万别，但是遇到的挑战却是相似的，因此解决问题的思路也异曲同工。\n什么是限时购?限时购跟大部分电商抢购业务相同,即限时且限量抢购。不管小米还是华为，或是其它电商公司，对抢购业务运营总是最为火爆，每发一款新品，都限量发售，每次搞的大家心里痒痒的。抢购太火爆有时引起站点打不开，崩溃了;还有就是卖出的数量比设置可购买的数量要多。那么问题来了：我们如何在设计中如何解决。通常我们需要从设计中考虑以下问题:\n* 针对高并发，我们如何解耦后端压力，特别是数据库的压力。\n* 如何保障库存可靠。\n<!-- more -->\n\n我们可以试想一下抢购时哪些页面会请求最多。抢购之前人们通常会通常刷页面等待，一般在抢购开始前一点时间会频繁刷新抢购倒数的页面或购买详情页面。抢购开始以后前一段时间下单的人会很多。付款并发量相对较小，通常订单在下单后几小时内都能付款，缓解了并发压力。针对以上问题及场景，我们做了以下处理，增加限时购缓存订单系统，去支持限时购高并发处理，并保持限时购业务的可靠性。\n![图1](/img/hishop-1.png)\n\n[Hiamll](http://www.hishop.com.cn/products/himall/)在2.3版本做了如下改进:\n1.引入Redis做缓存。\n2.在用户抢购开始前频繁刷页面时,系统只从缓存中取商品数据，解耦了数据库查询的压力。\n3.用户下单时系统只把订单数据存入订单缓存队列后然后告诉用户你的订单正在处理。然后由Redis Pub/Sub服务通知Web服务器，服务器把库存订单进行串行化处理，解耦数据库并发下单压力，保证库存可靠。\n4.支付功能保持原来实现不变。\n\n具体实现如下:\n买家前端查询限时购商品数据时只走缓存。\n![图2](/img/hishop-2.png)\n卖家后台更新限时购或库存信息时需同步更新数据库及缓存。\n![图3](/img/hishop-3.png)\n系统为每个正在开卖的限时购商品库存创建锁，买家对某库存下单时锁住该库存的下单操作，每一个商品库存只允许一个会员下单，下单的订单数据直接加入订单缓存后告诉买家[您的订单正在处理,请稍等]。然后通过Redis Pub/Sub服务通知服务器处理订单，将订单按库存串行化处理，订单处理完成后，则更新限时购订单缓存的处理状态。\n![图4](/img/hishop-4.png)\n买家得知订单正在处理后，则不断查询缓存的订单处理状态。直到获取订单处理结果，下单成功则进行支付页面，失败则提示失败原因并引导买家重新下单。\n![图5](/img/hishop-5.png)\n最后就是在Web服务启动时，需要对限时购订单缓存系统初始化，把商品数据加入缓存中，并处理上次未处理完成的订单。\n![图6](/img/hishop-6.png)\n\n总结:无论你用什么方式处理性能问题，性能优化的核心思想是分治。这种思想在日常生活中无处不在，大家都知道一次做不了的事，就分多次做，这就是分治。","slug":"hishop-1","published":1,"updated":"2016-05-14T08:17:14.810Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2q09000k8cqptdd916ig"},{"title":"如何用hexo上做个blog站点","date":"2016-01-01T16:00:00.000Z","desc":"hexo blog","_content":"2016年起，我要写博客了!各种博客网站都不合我意，最后用hexo+github搭了一个博客网站，全免费，还可以把开源项目放在里面，关键完全可以自己控制，入门虽然有一点难度，但是熟习以后使用起来其实相当简单. [了解关于hexo更多信息](http://hexo.io/docs/). [hexo常见问题](http://hexo.io/docs/troubleshooting.html) 你也可以在[GitHub](https://github.com/hexojs/hexo/issues)上提问.\n\n## 开启\n\n### 创建新blog\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n<!-- more -->\n### 启动web服务器\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### 发布站点\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n\n\n一切看上去就是那么简单。但是用hexo做博客网站，你还需要懂一点nodejs,markdown语法，如果你想把网站放到github上，你还需要了解点git shell。\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: 如何用hexo上做个blog站点\ndate: 2016-1-2\ndesc: hexo blog\n---\n2016年起，我要写博客了!各种博客网站都不合我意，最后用hexo+github搭了一个博客网站，全免费，还可以把开源项目放在里面，关键完全可以自己控制，入门虽然有一点难度，但是熟习以后使用起来其实相当简单. [了解关于hexo更多信息](http://hexo.io/docs/). [hexo常见问题](http://hexo.io/docs/troubleshooting.html) 你也可以在[GitHub](https://github.com/hexojs/hexo/issues)上提问.\n\n## 开启\n\n### 创建新blog\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n<!-- more -->\n### 启动web服务器\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### 发布站点\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n\n\n一切看上去就是那么简单。但是用hexo做博客网站，你还需要懂一点nodejs,markdown语法，如果你想把网站放到github上，你还需要了解点git shell。\n\n","slug":"hello-world","published":1,"updated":"2016-02-20T02:09:40.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2q0c000l8cqpg5hhioip"},{"title":"golang是不是后端开发神器","date":"2016-05-07T16:00:00.000Z","desc":"golang","_content":"周末有人介绍golang很合适后端开发，随即把之前C实现的静态资源下载功能(读取服务器上的静态资源文件内容返回给客户端)改成golang实现。然后对比一下效果。\n\n## 实现对比\n同样使用标准库,golang实现代码+注释只需要123行,C实现代码+注释412行，golang代码量只有C的1/3。\n\n## 测试对比\n我使用的是jmeter测试，首先测试c实现的服务,分别用100,200,300线程并发，每线程访问10。测试数据如下:\n![c](/img/go-1.png)\n\n![c](/img/go-2.png)\n\n![c](/img/go-3.png)\nC版实现越测数据越看不下去了，出错率越来越大。接着我测golang实现，我分别用300线程，1000线程和5000线程并发，每线程访问10次。测试数据如下:\n![c](/img/go-4.png)\n\n![c](/img/go-5.png)\n\n![c](/img/go-6.png)\n除了响应时间延长，其它都比较稳定，出错率全为0.难道这是传说中的后端神器，难道老板再也不用担心网站访问人数太多当机了，难道我也转golang开发。\n<!-- more -->\n\n## golang实现\n\n``` go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nvar realPath string //当前程序运行目录\n\n/*\nwww路由，请求处理 w:response  r:request\n*/\nfunc staticResource(w http.ResponseWriter, r *http.Request) {\n\tfmt.Println(\"url:\" + r.RequestURI)\n\tif r.Method == \"get\" || r.Method == \"GET\" {\n\t\tdisposeGet(w, r)\n\t} else if r.Method == \"post\" || r.Method == \"POST\" {\n\t\tdisposePost(w, r)\n\t} else {\n\t\tw.WriteHeader(501)\n\t\tw.Write([]byte(\"<HTML><HEAD><TITLE>Method Not Implemented</TITLE></HEAD><BODY><P>HTTP request method not supported.</BODY></HTML>\"))\n\t}\n}\n\n/*\n取字串 s:字符串 l:取到多少位\n*/\nfunc substr(s string, l int) string {\n\tif len(s) <= l {\n\t\treturn s\n\t}\n\tss, sl, rl, rs := \"\", 0, 0, []rune(s)\n\tfor _, r := range rs {\n\t\trint := int(r)\n\t\tif rint < 128 {\n\t\t\trl = 1\n\t\t} else {\n\t\t\trl = 2\n\t\t}\n\t\tif sl+rl > l {\n\t\t\tbreak\n\t\t}\n\t\tsl += rl\n\t\tss += string(r)\n\t}\n\treturn ss\n}\n\n/*\nget获取静态资源 w: response r: request\n*/\nfunc disposeGet(w http.ResponseWriter, r *http.Request) {\n\trequest_type := r.URL.Path[strings.LastIndex(r.URL.Path, \".\"):]\n\tswitch request_type { //文件类型判断\n\tcase \".html\":\n\t\tw.Header().Set(\"content-type\", \"text/html\")\n\tcase \".htm\":\n\t\tw.Header().Set(\"content-type\", \"text/html\")\n\tcase \".css\":\n\t\tw.Header().Set(\"content-type\", \"text/css\")\n\tcase \".js\":\n\t\tw.Header().Set(\"content-type\", \"text/javascript\")\n\tcase \".png\":\n\t\tw.Header().Set(\"content-type\", \"image/png\")\n\tcase \".gif\":\n\t\tw.Header().Set(\"content-type\", \"image/gif\")\n\tcase \".jpg\":\n\t\tw.Header().Set(\"content-type\", \"image/jpeg\")\n\tdefault:\n\t}\n\tfin, err := os.Open(realPath + r.URL.Path)\n\tdefer fin.Close()\n\tif err != nil { //未找到静态资源文件\n\t\tif request_type == \".html\" || request_type == \".htm\" { //未找到html文件\n\t\t\tw.WriteHeader(404)\n\t\t\tfmt.Println(\"static resource:\", err)\n\t\t\tw.Write([]byte(\"<HTML><TITLE>Not Found</TITLE><BODY><P>The server could not fulfill.your request be.is unavailable or nonexistent.</BODY></HTML>\"))\n\t\t}\n\t}\n\tfd, _ := ioutil.ReadAll(fin)\n\tw.Write(fd)\n}\n\n/*\npost上传静态资源 w: response r: request\n*/\nfunc disposePost(w http.ResponseWriter, r *http.Request) {\n\t//未实现\n}\n\n/*\n程序入口\n*/\nfunc main() {\n\t//获取程序当前路径\n\tfile, _ := exec.LookPath(os.Args[0])\n\tpath, _ := filepath.Abs(file)\n\t//命令行参数处理\n\targ_num := len(os.Args)\n\tif arg_num == 2 {\n\t\tport := os.Args[1] //第一个参数为端口号\n\t\tfmt.Println(\"http server start port:\" + port)\n\t\t//取前当前目录\n\t\trealPath = substr(path, strings.LastIndex(path, \"\\\\\"))\n\t\tflag.Parse()\n\t\t//请求处理\n\t\thttp.HandleFunc(\"/www/\", staticResource)\n\t\terr := http.ListenAndServe(\":\"+port, nil)\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"服务器出错:\", err)\n\t\t}\n\t} else {\n\t\tfmt.Println(\"参数错误，程序退出\")\n\t}\n}\n\n```\n\n\n","source":"_posts/go-1.md","raw":"---\ntitle: golang是不是后端开发神器\ndate: 2016-5-8\ndesc: golang\n---\n周末有人介绍golang很合适后端开发，随即把之前C实现的静态资源下载功能(读取服务器上的静态资源文件内容返回给客户端)改成golang实现。然后对比一下效果。\n\n## 实现对比\n同样使用标准库,golang实现代码+注释只需要123行,C实现代码+注释412行，golang代码量只有C的1/3。\n\n## 测试对比\n我使用的是jmeter测试，首先测试c实现的服务,分别用100,200,300线程并发，每线程访问10。测试数据如下:\n![c](/img/go-1.png)\n\n![c](/img/go-2.png)\n\n![c](/img/go-3.png)\nC版实现越测数据越看不下去了，出错率越来越大。接着我测golang实现，我分别用300线程，1000线程和5000线程并发，每线程访问10次。测试数据如下:\n![c](/img/go-4.png)\n\n![c](/img/go-5.png)\n\n![c](/img/go-6.png)\n除了响应时间延长，其它都比较稳定，出错率全为0.难道这是传说中的后端神器，难道老板再也不用担心网站访问人数太多当机了，难道我也转golang开发。\n<!-- more -->\n\n## golang实现\n\n``` go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nvar realPath string //当前程序运行目录\n\n/*\nwww路由，请求处理 w:response  r:request\n*/\nfunc staticResource(w http.ResponseWriter, r *http.Request) {\n\tfmt.Println(\"url:\" + r.RequestURI)\n\tif r.Method == \"get\" || r.Method == \"GET\" {\n\t\tdisposeGet(w, r)\n\t} else if r.Method == \"post\" || r.Method == \"POST\" {\n\t\tdisposePost(w, r)\n\t} else {\n\t\tw.WriteHeader(501)\n\t\tw.Write([]byte(\"<HTML><HEAD><TITLE>Method Not Implemented</TITLE></HEAD><BODY><P>HTTP request method not supported.</BODY></HTML>\"))\n\t}\n}\n\n/*\n取字串 s:字符串 l:取到多少位\n*/\nfunc substr(s string, l int) string {\n\tif len(s) <= l {\n\t\treturn s\n\t}\n\tss, sl, rl, rs := \"\", 0, 0, []rune(s)\n\tfor _, r := range rs {\n\t\trint := int(r)\n\t\tif rint < 128 {\n\t\t\trl = 1\n\t\t} else {\n\t\t\trl = 2\n\t\t}\n\t\tif sl+rl > l {\n\t\t\tbreak\n\t\t}\n\t\tsl += rl\n\t\tss += string(r)\n\t}\n\treturn ss\n}\n\n/*\nget获取静态资源 w: response r: request\n*/\nfunc disposeGet(w http.ResponseWriter, r *http.Request) {\n\trequest_type := r.URL.Path[strings.LastIndex(r.URL.Path, \".\"):]\n\tswitch request_type { //文件类型判断\n\tcase \".html\":\n\t\tw.Header().Set(\"content-type\", \"text/html\")\n\tcase \".htm\":\n\t\tw.Header().Set(\"content-type\", \"text/html\")\n\tcase \".css\":\n\t\tw.Header().Set(\"content-type\", \"text/css\")\n\tcase \".js\":\n\t\tw.Header().Set(\"content-type\", \"text/javascript\")\n\tcase \".png\":\n\t\tw.Header().Set(\"content-type\", \"image/png\")\n\tcase \".gif\":\n\t\tw.Header().Set(\"content-type\", \"image/gif\")\n\tcase \".jpg\":\n\t\tw.Header().Set(\"content-type\", \"image/jpeg\")\n\tdefault:\n\t}\n\tfin, err := os.Open(realPath + r.URL.Path)\n\tdefer fin.Close()\n\tif err != nil { //未找到静态资源文件\n\t\tif request_type == \".html\" || request_type == \".htm\" { //未找到html文件\n\t\t\tw.WriteHeader(404)\n\t\t\tfmt.Println(\"static resource:\", err)\n\t\t\tw.Write([]byte(\"<HTML><TITLE>Not Found</TITLE><BODY><P>The server could not fulfill.your request be.is unavailable or nonexistent.</BODY></HTML>\"))\n\t\t}\n\t}\n\tfd, _ := ioutil.ReadAll(fin)\n\tw.Write(fd)\n}\n\n/*\npost上传静态资源 w: response r: request\n*/\nfunc disposePost(w http.ResponseWriter, r *http.Request) {\n\t//未实现\n}\n\n/*\n程序入口\n*/\nfunc main() {\n\t//获取程序当前路径\n\tfile, _ := exec.LookPath(os.Args[0])\n\tpath, _ := filepath.Abs(file)\n\t//命令行参数处理\n\targ_num := len(os.Args)\n\tif arg_num == 2 {\n\t\tport := os.Args[1] //第一个参数为端口号\n\t\tfmt.Println(\"http server start port:\" + port)\n\t\t//取前当前目录\n\t\trealPath = substr(path, strings.LastIndex(path, \"\\\\\"))\n\t\tflag.Parse()\n\t\t//请求处理\n\t\thttp.HandleFunc(\"/www/\", staticResource)\n\t\terr := http.ListenAndServe(\":\"+port, nil)\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"服务器出错:\", err)\n\t\t}\n\t} else {\n\t\tfmt.Println(\"参数错误，程序退出\")\n\t}\n}\n\n```\n\n\n","slug":"go-1","published":1,"updated":"2016-05-14T08:17:48.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2q0f000m8cqpzps8woi7"},{"title":"英语入门视频推荐","date":"2016-05-13T16:00:00.000Z","desc":"英语学习","_content":"坚持学习英语也有一年多时间，除了在线外教学习，还看一些原版英语课程和英语电视剧，下面我分享2个非常非常非常合适初学者的系列视频'Learn English with Jennifer'和'extro English'。\n<!-- more -->\n## Learn English with Jennifer\n![Learn English with Jennifer](/img/english-1.png)\n一个美国英语教师教授一个俄罗斯人英语的教学视频，只有英文字幕，不用看字幕也很容易看懂听懂，非常合适初学者，作为入门视频课程非常合适。\n[观看地址](http://video.1speaking.com/view/index335.html)\n\n## extro English\n![extro English](/img/english-2.jpg)\n这是一个搞笑情景剧,描述几个年轻人浪漫而搞笑的生活故事,可以让你从头笑到尾,只有英文字幕,超级易懂,适合初级或中级能力的学习,对于提高口语和听力具有很好的帮助。\n[观看地址](http://video.1speaking.com/view/index418.html)","source":"_posts/english-2.md","raw":"---\ntitle: 英语入门视频推荐\ndate: 2016-5-14\ndesc: 英语学习\n---\n坚持学习英语也有一年多时间，除了在线外教学习，还看一些原版英语课程和英语电视剧，下面我分享2个非常非常非常合适初学者的系列视频'Learn English with Jennifer'和'extro English'。\n<!-- more -->\n## Learn English with Jennifer\n![Learn English with Jennifer](/img/english-1.png)\n一个美国英语教师教授一个俄罗斯人英语的教学视频，只有英文字幕，不用看字幕也很容易看懂听懂，非常合适初学者，作为入门视频课程非常合适。\n[观看地址](http://video.1speaking.com/view/index335.html)\n\n## extro English\n![extro English](/img/english-2.jpg)\n这是一个搞笑情景剧,描述几个年轻人浪漫而搞笑的生活故事,可以让你从头笑到尾,只有英文字幕,超级易懂,适合初级或中级能力的学习,对于提高口语和听力具有很好的帮助。\n[观看地址](http://video.1speaking.com/view/index418.html)","slug":"english-2","published":1,"updated":"2016-05-24T11:31:31.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2q0h000n8cqpqwbiawre"},{"title":"英语入门视频推荐","date":"2016-05-05T16:00:00.000Z","desc":"英语学习","_content":"坚持学习英语也有一年多时间，除了在线外教学习，还看一些原版英语课程和英语电视剧，下面我分享2个非常非常非常合适初学者的系列视频'Learn English with Jennifer'和'extro English'。\n<!-- more -->\n## Learn English with Jennifer\n![Learn English with Jennifer](/img/english-1.png)\n一个美国英语教师教授一个俄罗斯人英语的教学视频，只有英文字幕，不用看字幕也很容易看懂听懂，非常合适初学者，作为入门视频课程非常合适。\n[观看地址](http://video.1speaking.com/view/index335.html)\n\n## extro English\n![extro English](/img/english-2.jpg)\n这是一个搞笑情景剧,描述几个年轻人浪漫而搞笑的生活故事,可以让你从头笑到尾,只有英文字幕,超级易懂,适合初级或中级能力的学习,对于提高口语和听力具有很好的帮助。\n[观看地址](http://video.1speaking.com/view/index418.html)","source":"_posts/english-1.md","raw":"---\ntitle: 英语入门视频推荐\ndate: 2016-5-6\ndesc: 英语学习\n---\n坚持学习英语也有一年多时间，除了在线外教学习，还看一些原版英语课程和英语电视剧，下面我分享2个非常非常非常合适初学者的系列视频'Learn English with Jennifer'和'extro English'。\n<!-- more -->\n## Learn English with Jennifer\n![Learn English with Jennifer](/img/english-1.png)\n一个美国英语教师教授一个俄罗斯人英语的教学视频，只有英文字幕，不用看字幕也很容易看懂听懂，非常合适初学者，作为入门视频课程非常合适。\n[观看地址](http://video.1speaking.com/view/index335.html)\n\n## extro English\n![extro English](/img/english-2.jpg)\n这是一个搞笑情景剧,描述几个年轻人浪漫而搞笑的生活故事,可以让你从头笑到尾,只有英文字幕,超级易懂,适合初级或中级能力的学习,对于提高口语和听力具有很好的帮助。\n[观看地址](http://video.1speaking.com/view/index418.html)","slug":"english-1","published":1,"updated":"2016-05-08T15:14:11.662Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2q0k000o8cqpa7rpexuu"},{"title":"C windows版开源http服务","date":"2016-04-16T16:00:00.000Z","desc":"mingw socket","_content":"\n## minhttpd\n\n[minihttpd](https://github.com/binyanbin/minihttpd)一个超小型静态资源http服务器,,去掉注释及空行的剩余代码量小于300行。可支持windows和linux gcc编译。\n\n#### 功能及目的\n\n此服务的功能仅支持静态资源上传与下载，如图片,js,html,css等静态资源，以此作为单独静态资源服务器使用,使静态资源与web主服务器分离。这个服务也可以让你更了解http服务器的运作方式及基本原理,也是用纯C开发网络服务的一个示例。\n\n#### windwos MinGW编译:\n``` bash\ngcc -o http http.c -l wsock32\n```\n\n#### 站点搭建\n站点搭建:\n创建站点目录，把http.exe复制到目录下，创建www目录并把网站的所有静态页面copy到目录下。\n启动服务\n``` bash\nhttp 8080\n```\n\n#### 历史\nv0.1.0 第一个版本，支持动词get及html。 [2016-4-17]\nv0.1.1 支持图片(最大为1m),css。[2016-5-4]\n\n[源码查看](https://github.com/binyanbin/minihttpd)\n\n","source":"_posts/c-7.md","raw":"---\ntitle: C windows版开源http服务\ndate: 2016-4-17\ndesc: mingw socket\n---\n\n## minhttpd\n\n[minihttpd](https://github.com/binyanbin/minihttpd)一个超小型静态资源http服务器,,去掉注释及空行的剩余代码量小于300行。可支持windows和linux gcc编译。\n\n#### 功能及目的\n\n此服务的功能仅支持静态资源上传与下载，如图片,js,html,css等静态资源，以此作为单独静态资源服务器使用,使静态资源与web主服务器分离。这个服务也可以让你更了解http服务器的运作方式及基本原理,也是用纯C开发网络服务的一个示例。\n\n#### windwos MinGW编译:\n``` bash\ngcc -o http http.c -l wsock32\n```\n\n#### 站点搭建\n站点搭建:\n创建站点目录，把http.exe复制到目录下，创建www目录并把网站的所有静态页面copy到目录下。\n启动服务\n``` bash\nhttp 8080\n```\n\n#### 历史\nv0.1.0 第一个版本，支持动词get及html。 [2016-4-17]\nv0.1.1 支持图片(最大为1m),css。[2016-5-4]\n\n[源码查看](https://github.com/binyanbin/minihttpd)\n\n","slug":"c-7","published":1,"updated":"2016-05-06T13:58:24.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2q0n000p8cqpok20wc9j"},{"title":"C语言之socket 简易客户端","date":"2016-04-12T16:00:00.000Z","desc":"mingw socket","_content":"昨天做了一个简易服务端，今天尝试做一个简易客户端，东西比较少，很顺利就完成了。客户端socket操作步骤:1.创建socket 2.连接服务端 3.接收服务端返回数据\n# 函数\n1.连接:\nint connect(int fd, const struct sockaddr* addr, socklen_t address_len));\nfd：套接字描述符。\naddr：返回连接着的地址\naddress_len：确定address缓冲区的长度\n返回值：如果函数执行成功，返回值为0，否则为-1。\n\n2.接收\nint recv(SOCKET socket, char FAR* buf, int len, int flags);\nsocket：一个标识已连接套接口的描述字。\nbuf：用于接收数据的缓冲区。\nlen：缓冲区长度。\nflags：指定调用方式。\n返回值：若无错误发生,recv()返回读入的字节数.如果连接已中止，返回0.否则的话,返回SOCKET_ERROR错误.\n\n<!-- more -->\n# 服务端示例\n新建client.c文件\n``` C\n#define MINGW32\n \n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n \n#ifdef MINGW32\n#include <winsock2.h>\n#else\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#endif\n \n#define MAXLINE 1024\n \nint main(int argc,char **argv) \n{\n\tint sockfd,n;\n\tchar receline[MAXLINE+1];\n\tstruct sockaddr_in serveraddr;\n\n\t//输入参数太少，退出\n\tif(argc != 2) \n\t{ \n\t\tprintf(\"Usage :%s IP_address\\n\", argv[0]);\n\t\texit(0);\n\t}\n\n\t#ifdef MINGW32\n\t//Winsows下启用socket\n\tWSADATA wsadata;\n\tif(WSAStartup(MAKEWORD(1,1),&wsadata)==SOCKET_ERROR)\n\t{\n\t\tprintf(\"WSAStartup() fail\\n\");\n\t\texit(0);\n\t}\n\t#endif\n\n\t//建立socket\n\tif((sockfd=socket(AF_INET,SOCK_STREAM,0))==-1)\n\t{\n\t\tprintf(\"socket() fail\\n\");\n\t\texit(0);\n\t}\n\n\t//设置协议及Port\n\tmemset(&serveraddr,0,sizeof(serveraddr));\n\tserveraddr.sin_family = AF_INET;\n\tserveraddr.sin_port=htons(1024);\n\n\t//设置IP\n\tserveraddr.sin_addr.s_addr=inet_addr(argv[1]);\n\n\t//连接\n\tif(connect(sockfd,(struct sockaddr *)&serveraddr,sizeof(serveraddr))==-1)\n\t{\n\t\tprintf(\"connect() fail\\n\");\n\t\texit(0);\n\t}\n\n\t//读取数据并输入到标准输出\n\t#ifdef MINGW32\n\twhile((n=recv(sockfd,receline,MAXLINE,0))>0)\n\t#else\n\twhile((n=read(sockfd,receline,MAXLINE))>0)\n\t#endif\n\t{ \n\t\treceline[n]=0;\n\t\tif(fputs(receline,stdout)==EOF)\n\t\t{\n\t\t\tprintf(\"fputs() error\\r\\n\");\n\t\t}\n\t}\n\n\t//没有获取数据\n\tif(n<0) \n\t{\n\t\tprintf(\"read() fail\\n\");\n\t}\n\n\t#ifdef MINGW32\n\t//Winsows下关闭socket\n\tclosesocket(sockfd);\n\tWSACleanup();\n\t#endif\n\n\texit(0);\n}\n```\n编译:gcc -g -o client client.c -l wsock32\n执行:\n服务端 server\n客户端连接 client 127.0.0.1\n\n","source":"_posts/c-6.md","raw":"---\ntitle: C语言之socket 简易客户端\ndate: 2016-4-13\ndesc: mingw socket\n---\n昨天做了一个简易服务端，今天尝试做一个简易客户端，东西比较少，很顺利就完成了。客户端socket操作步骤:1.创建socket 2.连接服务端 3.接收服务端返回数据\n# 函数\n1.连接:\nint connect(int fd, const struct sockaddr* addr, socklen_t address_len));\nfd：套接字描述符。\naddr：返回连接着的地址\naddress_len：确定address缓冲区的长度\n返回值：如果函数执行成功，返回值为0，否则为-1。\n\n2.接收\nint recv(SOCKET socket, char FAR* buf, int len, int flags);\nsocket：一个标识已连接套接口的描述字。\nbuf：用于接收数据的缓冲区。\nlen：缓冲区长度。\nflags：指定调用方式。\n返回值：若无错误发生,recv()返回读入的字节数.如果连接已中止，返回0.否则的话,返回SOCKET_ERROR错误.\n\n<!-- more -->\n# 服务端示例\n新建client.c文件\n``` C\n#define MINGW32\n \n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n \n#ifdef MINGW32\n#include <winsock2.h>\n#else\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#endif\n \n#define MAXLINE 1024\n \nint main(int argc,char **argv) \n{\n\tint sockfd,n;\n\tchar receline[MAXLINE+1];\n\tstruct sockaddr_in serveraddr;\n\n\t//输入参数太少，退出\n\tif(argc != 2) \n\t{ \n\t\tprintf(\"Usage :%s IP_address\\n\", argv[0]);\n\t\texit(0);\n\t}\n\n\t#ifdef MINGW32\n\t//Winsows下启用socket\n\tWSADATA wsadata;\n\tif(WSAStartup(MAKEWORD(1,1),&wsadata)==SOCKET_ERROR)\n\t{\n\t\tprintf(\"WSAStartup() fail\\n\");\n\t\texit(0);\n\t}\n\t#endif\n\n\t//建立socket\n\tif((sockfd=socket(AF_INET,SOCK_STREAM,0))==-1)\n\t{\n\t\tprintf(\"socket() fail\\n\");\n\t\texit(0);\n\t}\n\n\t//设置协议及Port\n\tmemset(&serveraddr,0,sizeof(serveraddr));\n\tserveraddr.sin_family = AF_INET;\n\tserveraddr.sin_port=htons(1024);\n\n\t//设置IP\n\tserveraddr.sin_addr.s_addr=inet_addr(argv[1]);\n\n\t//连接\n\tif(connect(sockfd,(struct sockaddr *)&serveraddr,sizeof(serveraddr))==-1)\n\t{\n\t\tprintf(\"connect() fail\\n\");\n\t\texit(0);\n\t}\n\n\t//读取数据并输入到标准输出\n\t#ifdef MINGW32\n\twhile((n=recv(sockfd,receline,MAXLINE,0))>0)\n\t#else\n\twhile((n=read(sockfd,receline,MAXLINE))>0)\n\t#endif\n\t{ \n\t\treceline[n]=0;\n\t\tif(fputs(receline,stdout)==EOF)\n\t\t{\n\t\t\tprintf(\"fputs() error\\r\\n\");\n\t\t}\n\t}\n\n\t//没有获取数据\n\tif(n<0) \n\t{\n\t\tprintf(\"read() fail\\n\");\n\t}\n\n\t#ifdef MINGW32\n\t//Winsows下关闭socket\n\tclosesocket(sockfd);\n\tWSACleanup();\n\t#endif\n\n\texit(0);\n}\n```\n编译:gcc -g -o client client.c -l wsock32\n执行:\n服务端 server\n客户端连接 client 127.0.0.1\n\n","slug":"c-6","published":1,"updated":"2016-04-17T06:47:53.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2q0s000q8cqpd55xo6m9"},{"title":"C语言之socket 简易服务端","date":"2016-04-11T16:00:00.000Z","desc":"mingw socket","_content":"今年有两个目标，一个是做开源项目，第二个是用C写一个网络服务。C写网络服务Socket是基础，首先需要了解socket的用法。服务端socket操作步骤:1.创建socket,2.绑定地址及端口,3.接收请求,4.发送数据。\n# 函数\n1.创建socket:\nint socket(int domain, int type, int protocol);\ndomain：协议域\ntype：指定Socket类型。\nprotocol：指定协议。\n返回值：如果调用成功就返回新创建的套接字的描述符，如果失败就返回-1。\n\n2.绑定地址级端口\nint bind(SOCKET socket, const struct sockaddr* address, socklen_t address_len);\n参数说明：\nsocket：是一个套接字描述符。\naddress：是一个sockaddr结构指针，该结构中包含了要结合的地址和端口号。\naddress_len：确定address缓冲区的长度。\n返回值：如果函数执行成功，返回值为0，否则为SOCKET_ERROR。\n\n3.接收连接请求\nint accept( int fd, struct socketaddr* addr, socklen_t* len);\n参数说明：\nfd：套接字描述符。\naddr：返回连接着的地址\nlen：接收返回地址的缓冲区长度\n返回值：成功返回客户端的文件描述符，失败返回-1。\n\n4.发送数据\nint send(int fd, const void * msg, int len, unsigned int falgs);\nfd：套接字描述符。\nmsg: 数据内容。\nlen: 数据长度。\n返回值：成功则返回实际传送出去的字符数, 失败返回-1.\n\n<!-- more -->\n# 服务端示例\n新建server.c文件\n``` C\n#define MINGW32\n \n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n \n#ifdef MINGW32\n#include <winsock2.h>\n#else\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#endif\n \n#define LISTENQ 10\n \nint main(int argc,char *argv[])\n{\n\t//serverfd服务端套接字描述符，connectfd客户端套接字描述符\n\tint serverfd,connectfd;\n\tstruct sockaddr_in serveraddr;\n\tchar buff[1024];\n\ttime_t tlick;\n\tint iRet;\n\n\t#ifdef MINGW32\n\t//Winsows下启用socket\n\tWSADATA wsadata;\n\tif(WSAStartup(MAKEWORD(1,1),&wsadata)==SOCKET_ERROR)\n\t{\n\t\tprintf(\"WSAStartup() fail\\n\");\n\t\texit(0);\n\t}\n\t#endif\n\n\t//新建server socket\n\tprintf(\"socket()\\n\");\n\t//SOCK_STREAM提供面向连接的稳定数据传输，即TCP协议\n\tserverfd=socket(AF_INET,SOCK_STREAM,0);\n\tif(serverfd==-1)\n\t{\n\t\tprintf(\"socket() fail\\n\");\n\t\texit(0);\n\t}\n\n\t//清零\n\tmemset(&serveraddr,0,sizeof(serveraddr));\n\n\t//设置协议 AF_INET:ipv4地址（32位的）与端口号（16位的）的组合\n\tserveraddr.sin_family=AF_INET;\n\t//设置IP 127.0.0.1\n\tserveraddr.sin_addr.s_addr=inet_addr(\"127.0.0.1\");\n\t//设置Port\n\tserveraddr.sin_port=htons(1024);\n\n\t//绑定端口，监听1024端口的任何请求\n\tprintf(\"bind()\\n\");\n\tiRet=bind(serverfd,(struct sockaddr*)&serveraddr,sizeof(serveraddr));\n\tif(iRet==-1)\n\t{\n\t\tprintf(\"bind() fail\\n\");\n\t\texit(0);\n\t}\n\n\t//监听端口，最大并发数10\n\tprintf(\"listen()\\n\");\n\tiRet=listen(serverfd,LISTENQ);\n\tif(iRet==-1)\n\t{\n\t\tprintf(\"listen() fail\\n\");\n\t\texit(0);\n\t}\n\n\t//接受请求，发送主机时间\n\tfor(;;)\n\t{\n\t\tprintf(\"Waiting for connection...\\n\");\n\t\t//接受请求\n\t\tconnectfd=accept(serverfd,(struct sockaddr*)NULL,NULL);\n\t\t//获取时间 \n\t\ttlick=time(NULL);\n\t\t//格式化时间 \n\t\tsnprintf(buff,sizeof(buff),\"From mys:\\n%s\",ctime(&tlick));\n\t\t//写入时间\n\t\t//关闭请求\n\t\t#ifdef MINGW32\n\t\tsend(connectfd,buff,strlen(buff),0);\n\t\tclosesocket(connectfd);\n\t\t#else\n\t\twrite(connectfd,buff,strlen(buff));\n\t\tclose(connectfd);\n\t\t#endif\n\t}\n\n\t#ifdef MINGW32\n\t//Winsows下关闭socket\n\tclosesocket(serverfd);\n\tWSACleanup();\n\t#endif\n\n\t//退出\n\texit(0);\n}\n\n```\n编译:gcc -g -o server server.c -l wsock32\n\n如果你装了MinGW,你也可以尝试一下。","source":"_posts/c-5.md","raw":"---\ntitle: C语言之socket 简易服务端\ndate: 2016-4-12\ndesc: mingw socket\n---\n今年有两个目标，一个是做开源项目，第二个是用C写一个网络服务。C写网络服务Socket是基础，首先需要了解socket的用法。服务端socket操作步骤:1.创建socket,2.绑定地址及端口,3.接收请求,4.发送数据。\n# 函数\n1.创建socket:\nint socket(int domain, int type, int protocol);\ndomain：协议域\ntype：指定Socket类型。\nprotocol：指定协议。\n返回值：如果调用成功就返回新创建的套接字的描述符，如果失败就返回-1。\n\n2.绑定地址级端口\nint bind(SOCKET socket, const struct sockaddr* address, socklen_t address_len);\n参数说明：\nsocket：是一个套接字描述符。\naddress：是一个sockaddr结构指针，该结构中包含了要结合的地址和端口号。\naddress_len：确定address缓冲区的长度。\n返回值：如果函数执行成功，返回值为0，否则为SOCKET_ERROR。\n\n3.接收连接请求\nint accept( int fd, struct socketaddr* addr, socklen_t* len);\n参数说明：\nfd：套接字描述符。\naddr：返回连接着的地址\nlen：接收返回地址的缓冲区长度\n返回值：成功返回客户端的文件描述符，失败返回-1。\n\n4.发送数据\nint send(int fd, const void * msg, int len, unsigned int falgs);\nfd：套接字描述符。\nmsg: 数据内容。\nlen: 数据长度。\n返回值：成功则返回实际传送出去的字符数, 失败返回-1.\n\n<!-- more -->\n# 服务端示例\n新建server.c文件\n``` C\n#define MINGW32\n \n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n \n#ifdef MINGW32\n#include <winsock2.h>\n#else\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#endif\n \n#define LISTENQ 10\n \nint main(int argc,char *argv[])\n{\n\t//serverfd服务端套接字描述符，connectfd客户端套接字描述符\n\tint serverfd,connectfd;\n\tstruct sockaddr_in serveraddr;\n\tchar buff[1024];\n\ttime_t tlick;\n\tint iRet;\n\n\t#ifdef MINGW32\n\t//Winsows下启用socket\n\tWSADATA wsadata;\n\tif(WSAStartup(MAKEWORD(1,1),&wsadata)==SOCKET_ERROR)\n\t{\n\t\tprintf(\"WSAStartup() fail\\n\");\n\t\texit(0);\n\t}\n\t#endif\n\n\t//新建server socket\n\tprintf(\"socket()\\n\");\n\t//SOCK_STREAM提供面向连接的稳定数据传输，即TCP协议\n\tserverfd=socket(AF_INET,SOCK_STREAM,0);\n\tif(serverfd==-1)\n\t{\n\t\tprintf(\"socket() fail\\n\");\n\t\texit(0);\n\t}\n\n\t//清零\n\tmemset(&serveraddr,0,sizeof(serveraddr));\n\n\t//设置协议 AF_INET:ipv4地址（32位的）与端口号（16位的）的组合\n\tserveraddr.sin_family=AF_INET;\n\t//设置IP 127.0.0.1\n\tserveraddr.sin_addr.s_addr=inet_addr(\"127.0.0.1\");\n\t//设置Port\n\tserveraddr.sin_port=htons(1024);\n\n\t//绑定端口，监听1024端口的任何请求\n\tprintf(\"bind()\\n\");\n\tiRet=bind(serverfd,(struct sockaddr*)&serveraddr,sizeof(serveraddr));\n\tif(iRet==-1)\n\t{\n\t\tprintf(\"bind() fail\\n\");\n\t\texit(0);\n\t}\n\n\t//监听端口，最大并发数10\n\tprintf(\"listen()\\n\");\n\tiRet=listen(serverfd,LISTENQ);\n\tif(iRet==-1)\n\t{\n\t\tprintf(\"listen() fail\\n\");\n\t\texit(0);\n\t}\n\n\t//接受请求，发送主机时间\n\tfor(;;)\n\t{\n\t\tprintf(\"Waiting for connection...\\n\");\n\t\t//接受请求\n\t\tconnectfd=accept(serverfd,(struct sockaddr*)NULL,NULL);\n\t\t//获取时间 \n\t\ttlick=time(NULL);\n\t\t//格式化时间 \n\t\tsnprintf(buff,sizeof(buff),\"From mys:\\n%s\",ctime(&tlick));\n\t\t//写入时间\n\t\t//关闭请求\n\t\t#ifdef MINGW32\n\t\tsend(connectfd,buff,strlen(buff),0);\n\t\tclosesocket(connectfd);\n\t\t#else\n\t\twrite(connectfd,buff,strlen(buff));\n\t\tclose(connectfd);\n\t\t#endif\n\t}\n\n\t#ifdef MINGW32\n\t//Winsows下关闭socket\n\tclosesocket(serverfd);\n\tWSACleanup();\n\t#endif\n\n\t//退出\n\texit(0);\n}\n\n```\n编译:gcc -g -o server server.c -l wsock32\n\n如果你装了MinGW,你也可以尝试一下。","slug":"c-5","published":1,"updated":"2016-04-17T06:47:56.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2q0x000r8cqp2wtjas36"},{"title":"C语言之函数库","date":"2016-03-30T16:00:00.000Z","desc":"标准库 运行库 编译器","_content":"为什么写C的需要了解更多系统方面的知识，我们可以从C语言的函数库说起。\n\n# C标准库\nC标准库，顾名思义既然是标准，就是由标准组织制定的。C标准库就是任何平台都可以使用的基本C语言库。\n标准库是C标准定义了一系列常用的函数，称为C库函数。C标准仅仅定义了函数原型，并没有提供实现。因此这个任务留给了各个支持C语言标准的编译器。你只使用标准库写的代码可以跨平台使用。\n\n# 运行库\n它由不同操作系统不同开发平台提供不同的C运行库。但是C运行库的部分实现是基于C标准库的，即C运行库是各个操作系统各个开发工具根据自身平台开发的库，某种程度上，可以说C运行库是C标准库的一个扩展库，只是加了很多C标准库所没有的与平台相关的或者不相关的库接口函数。\n一个运行库包括以下功能:\n1.启动与退出：包括入口函数及入口函数所依赖的其他函数等。\n2.标准函数：由C语言标准规定的C语言标准库所拥有的函数实现。（C标准库）\n3.I/O：I/O功能的封装和实现，参见上一节中I/O初始化部分。\n4.堆：堆的封装和实现，参见上一节中堆初始化部分。\n5.语言实现：语言中一些特殊功能的实现。\n6.调试：实现调试功能的代码。\n\n* 运行库是平台相关的，因为它与操作系统结合得非常紧密。C语言的运行库从某种程度上来讲是C语言的程序和不同操作系统平台之间的抽象层，它将不同的操作系统API抽象成相同的库函数。比如我们可以在不同的操作系统平台下使用fread来读取文件，而事实上fread(标准库函数)在不同的操作系统平台下的实现是不同的，但作为运行库的使用者我们不需要关心这一点。\n* 虽然各个平台下的C语言运行库提供了很多功能，但很多时候它们毕竟有限，比如用户的权限控制等都不是属于标准的C语言运行库。于是我们不得不通过其他的办法，诸如绕过C语言运行库直接调用操作系统API或使用其他的库。\n* linux和Windows平台下的两个主要C语言运行库分别为glibc（GNU C Library）和MSVCRT（Microsoft Visual C Run-time），我们在下面将会分别介绍它们。值得注意的是，像线程操作这样的功能并不是标准的C语言运行库的一部分，但是glibc和MSVCRT都包含了线程操作的库函数。比如glibc有一个可选的pthread库中的pthread_create()函数可以用来创建线程；而MSVCRT中可以使用_beginthread()函数来创建线程。所以glibc和MSVCRT事实上是标准C语言运行库的超集，它们各自对C标准库进行了一些扩展。\n![关系图](/img/c-6.jpg)","source":"_posts/c-4.md","raw":"---\ntitle: C语言之函数库\ndate: 2016-3-31\ndesc: 标准库 运行库 编译器\n---\n为什么写C的需要了解更多系统方面的知识，我们可以从C语言的函数库说起。\n\n# C标准库\nC标准库，顾名思义既然是标准，就是由标准组织制定的。C标准库就是任何平台都可以使用的基本C语言库。\n标准库是C标准定义了一系列常用的函数，称为C库函数。C标准仅仅定义了函数原型，并没有提供实现。因此这个任务留给了各个支持C语言标准的编译器。你只使用标准库写的代码可以跨平台使用。\n\n# 运行库\n它由不同操作系统不同开发平台提供不同的C运行库。但是C运行库的部分实现是基于C标准库的，即C运行库是各个操作系统各个开发工具根据自身平台开发的库，某种程度上，可以说C运行库是C标准库的一个扩展库，只是加了很多C标准库所没有的与平台相关的或者不相关的库接口函数。\n一个运行库包括以下功能:\n1.启动与退出：包括入口函数及入口函数所依赖的其他函数等。\n2.标准函数：由C语言标准规定的C语言标准库所拥有的函数实现。（C标准库）\n3.I/O：I/O功能的封装和实现，参见上一节中I/O初始化部分。\n4.堆：堆的封装和实现，参见上一节中堆初始化部分。\n5.语言实现：语言中一些特殊功能的实现。\n6.调试：实现调试功能的代码。\n\n* 运行库是平台相关的，因为它与操作系统结合得非常紧密。C语言的运行库从某种程度上来讲是C语言的程序和不同操作系统平台之间的抽象层，它将不同的操作系统API抽象成相同的库函数。比如我们可以在不同的操作系统平台下使用fread来读取文件，而事实上fread(标准库函数)在不同的操作系统平台下的实现是不同的，但作为运行库的使用者我们不需要关心这一点。\n* 虽然各个平台下的C语言运行库提供了很多功能，但很多时候它们毕竟有限，比如用户的权限控制等都不是属于标准的C语言运行库。于是我们不得不通过其他的办法，诸如绕过C语言运行库直接调用操作系统API或使用其他的库。\n* linux和Windows平台下的两个主要C语言运行库分别为glibc（GNU C Library）和MSVCRT（Microsoft Visual C Run-time），我们在下面将会分别介绍它们。值得注意的是，像线程操作这样的功能并不是标准的C语言运行库的一部分，但是glibc和MSVCRT都包含了线程操作的库函数。比如glibc有一个可选的pthread库中的pthread_create()函数可以用来创建线程；而MSVCRT中可以使用_beginthread()函数来创建线程。所以glibc和MSVCRT事实上是标准C语言运行库的超集，它们各自对C标准库进行了一些扩展。\n![关系图](/img/c-6.jpg)","slug":"c-4","published":1,"updated":"2016-03-31T15:52:03.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2q10000s8cqpwbsnnnhy"},{"title":"C语言之由内存模型说起","date":"2016-03-24T16:00:00.000Z","desc":"内存模型 内存管理 指针 字符串","_content":"说起内存模型，那就先要介绍程序运行时是如何管理内存的。\n程序运行时:\n* 系统先把物理硬盘代码load到内存\n* 系统再把c代码分成四个区\n* 系统再找到main函数入口执行\n## 程序的四区模型\n![效果](/img/c-3.png)\n<!-- more -->\n一个由C编译的程序的内存分配通常由以下几块组成:\n1 栈区(stack)由编译器自动分配释放,存放函数的参数值,局部变量的值等。其操作方式类似于数据结构中的栈。\n2 堆区(heap):一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。\n3 全局区：主要包括静态全局区和常量区，程序结束后由系统释放。\n静态区(static):全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域,未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。\n常量区:常量字符串就是放在这里的。\n4 代码区：存放函数体的二进制代码。\n示例:\n``` C\nchar*fa()\n{\n    char*pa = \"123456\";//pa指针在栈区，“123456”在常量区，该函数调用完后指针变量pa就被释放了\n    char*p = NULL;//指针变量p在栈中分配4字节\n    p=(char*)malloc(100);//本函数在这里开辟了一块堆区的内存空间，并把地址赋值给p\n    strcpy(p, \"wudunxiong 1234566\");//把常量区的字符串拷贝到堆区\n    return p;//返回给主调函数fb()，相对fa来说fb是主调函数，相对main来说，fa(),fb()都是被调用函数\n}\n```\n由此可以得知，当一个程序运行时，他的全局区，代码区基本是固定不变的，堆区与全局区和代码区均由系统控制。开发人员需对堆区内存进行管理。在现代开发语言(java,c#,javascript等)里,堆区内存管理都是由垃圾回收器处理的。\n\n## 内存管理基础:指针\n指针是一个变量,其值为另一个变量的地址,即内存位置的直接地址。就像其他变量或常量一样,您必须在使用指针存储其他变量地址之前,对其进行声明。指针变量声明的一般形式为：type *var-name;\n示例如下:\n``` C\n#include <stdio.h>\nint main ()\n{\n   int  var = 20;   /* 实际变量的声明 */\n   int  *ip;        /* 指针变量的声明 */\n   ip = &var;  /* 在指针变量中存储 var 的地址 */\n   printf(\"Address of var variable: %x\\n\", &var  );\n   /* 在指针变量中存储的地址 */\n   printf(\"Address stored in ip variable: %x\\n\", ip );\n   /* 使用指针访问值 */\n   printf(\"Value of *ip variable: %d\\n\", *ip );\n   return 0;\n}\n```\n## 字符串\n在C语言中,字符串实际上是使用null字符 '\\0' 终止的一维字符数组.因此,一个以null尾的字符串,包含了组成字符串的字符.\n下面的声明和初始化创建了一个\"Hello\"字符串.由于在数组的末尾存储了空字符,所以字符数组的大小比单词\"Hello\"的字符数多一个。\n![效果](/img/c-4.jpg)\n\nc语言标准库没有常用的字符串方法，如indexOf,lastIndexOf,trim,lTrim,rTrim等方法。如是我就自己尝试实现，中间用了几个标准库函数:strcpy字符串拷贝，strcat字符串连接，这个方法不能直接用，C中的字符串内存不是自动扩展需要自己申请,strcat是把第二个字符串copy到第一个字符串结尾，需要第一个字符串分配的内存足够多，不然无法连接。strstr查找相同的字符串，返回的又是地址。整个代码全是内存操作，自已申请的内存一定要记得释放，对于用惯了现代语言的人来说，这真是相当虐心啊。\n![效果](/img/c-5.jpg)\n还是看代码吧\n``` C\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h> \nint main(void)\n{\n    ///方法定义\n    char* join(char  *s1,char *s2);\n    int indexOf(char *str1,char *str2);\n    int lastIndexOf(char *str1,char *str2);\n    char* ltrim(char *str);\n    char* rtrim(char *str);\n    char* trim(char *str);\n    //测试数据准备\n    char *first;\n    char *second;\n    char *indexstr;\n    char *third;\n    char *show;\n    first = \"binyanbin website is \";\n    second = \"http://binyanbin.github.io\";\n    indexstr = \"bin\";\n    third = \"  binyanbin trim test \";\n    //测试结果输出\n    show = join(first,second);\n    printf(\"join(\\\"%s\\\",\\\"%s\\\")=\\\"%s\\\"\\n\",first,second,show);\n    free(show);\n    printf(\"indexOf(\\\"%s\\\",\\\"%s\\\")=%d\\n\",second,indexstr,indexOf(second,indexstr));\n    printf(\"lastIndexOf(\\\"%s\\\",\\\"%s\\\")=%d\\n\",second,indexstr,lastIndexOf(second,indexstr));\n    show = ltrim(third);\n    printf(\"ltrim(\\\"%s\\\")=\\\"%s\\\"\\n\",third,show);\n    free(show);\n    show = rtrim(third);\n    printf(\"rtrim(\\\"%s\\\")=\\\"%s\\\"\\n\",third,show);\n    show = trim(third);\n    printf(\"trim(\\\"%s\\\")=\\\"%s\\\"\",third,show);\n    free(show);\n}\n\n//字符串连接\nchar* join(char  *s1,char *s2)\n{\n    //分布内存\n    char *result = malloc(strlen(s1)+strlen(s2)+1);\n    if (result==NULL) \n        exit(0);//内存为空退出\n    //拷贝s1到result\n    strcpy(result, s1);\n    //s2加到result尾部  \n    strcat(result, s2);  \n    return result;  \n}\n//字符串查询最开始位置\nint indexOf(char *str1,char *str2)  \n{  \n    char *p=str1;  \n    int i=0;  \n    //p是一个地址，找到相同字符串的地址\n    p=strstr(str1,str2);  \n    if(p==NULL)  \n        return -1;  \n    else{  \n        //是不是同一个地址了，是同一地址则找到字符串\n        while(str1!=p)\n        {  \n            str1++;  \n            i++;  \n        }  \n    }  \n    return i;  \n} \n\n//查询最后位置\nint lastIndexOf(char *str1,char *str2)  \n{  \n    char *p=str1;  \n    int i=0;\n    int len=strlen(str2);  \n    p=strstr(str1,str2);  \n    if(p==NULL)return -1;\n    //未找到字符串地址为空则跳出循环  \n    while(p!=NULL)  \n    { \n        //跳过已找的地址 \n        for(;str1!=p;str1++)\n            i++;  \n        p=p+len;\n        //找出下一个同样字符串的地址  \n        p=strstr(p,str2);  \n    }  \n    return i;  \n} \n\n//删除左空格 \nchar* ltrim(char *param)  \n{\n    //申请存储，不修改参数内存的数据\n    char *str = malloc(strlen(param)+1); \n    strcpy(str, param); \n    int i=0,j,len=strlen(str);  \n    while(str[i]!='\\0')  \n    {\n        //32:空格,9:横向制表符\n        if(str[i]!=32&&str[i]!=9)\n            break;\n        i++;  \n    }  \n    if(i!=0)  \n    //将后面的字符顺势前移,补充删掉的空白位置\n    for(j=0;j<=len-i;j++)  \n    {     \n        str[j]=str[j+i];\n    }  \n    return str; \n}  \n//删除右空格\nchar* rtrim(char *param)  \n{\n    char *str = malloc(strlen(param)+1);    \n    strcpy(str, param); \n    char *p=str;  \n    int i=strlen(str)-1;  \n    while(i>=0)  \n    {  \n        if(p[i]!=32&&p[i]!=9)\n            break;  \n        i--;  \n    }  \n    str[++i]='\\0';\n    return str;  \n}\n//删除左右空格\nchar* trim(char *str)\n{\n    char* temp = ltrim(str);\n    char* result = rtrim(temp);\n    free(temp);\n    return result;\n}  \n```\n","source":"_posts/c-3.md","raw":"---\ntitle: C语言之由内存模型说起\ndate: 2016-3-25\ndesc: 内存模型 内存管理 指针 字符串\n---\n说起内存模型，那就先要介绍程序运行时是如何管理内存的。\n程序运行时:\n* 系统先把物理硬盘代码load到内存\n* 系统再把c代码分成四个区\n* 系统再找到main函数入口执行\n## 程序的四区模型\n![效果](/img/c-3.png)\n<!-- more -->\n一个由C编译的程序的内存分配通常由以下几块组成:\n1 栈区(stack)由编译器自动分配释放,存放函数的参数值,局部变量的值等。其操作方式类似于数据结构中的栈。\n2 堆区(heap):一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。\n3 全局区：主要包括静态全局区和常量区，程序结束后由系统释放。\n静态区(static):全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域,未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。\n常量区:常量字符串就是放在这里的。\n4 代码区：存放函数体的二进制代码。\n示例:\n``` C\nchar*fa()\n{\n    char*pa = \"123456\";//pa指针在栈区，“123456”在常量区，该函数调用完后指针变量pa就被释放了\n    char*p = NULL;//指针变量p在栈中分配4字节\n    p=(char*)malloc(100);//本函数在这里开辟了一块堆区的内存空间，并把地址赋值给p\n    strcpy(p, \"wudunxiong 1234566\");//把常量区的字符串拷贝到堆区\n    return p;//返回给主调函数fb()，相对fa来说fb是主调函数，相对main来说，fa(),fb()都是被调用函数\n}\n```\n由此可以得知，当一个程序运行时，他的全局区，代码区基本是固定不变的，堆区与全局区和代码区均由系统控制。开发人员需对堆区内存进行管理。在现代开发语言(java,c#,javascript等)里,堆区内存管理都是由垃圾回收器处理的。\n\n## 内存管理基础:指针\n指针是一个变量,其值为另一个变量的地址,即内存位置的直接地址。就像其他变量或常量一样,您必须在使用指针存储其他变量地址之前,对其进行声明。指针变量声明的一般形式为：type *var-name;\n示例如下:\n``` C\n#include <stdio.h>\nint main ()\n{\n   int  var = 20;   /* 实际变量的声明 */\n   int  *ip;        /* 指针变量的声明 */\n   ip = &var;  /* 在指针变量中存储 var 的地址 */\n   printf(\"Address of var variable: %x\\n\", &var  );\n   /* 在指针变量中存储的地址 */\n   printf(\"Address stored in ip variable: %x\\n\", ip );\n   /* 使用指针访问值 */\n   printf(\"Value of *ip variable: %d\\n\", *ip );\n   return 0;\n}\n```\n## 字符串\n在C语言中,字符串实际上是使用null字符 '\\0' 终止的一维字符数组.因此,一个以null尾的字符串,包含了组成字符串的字符.\n下面的声明和初始化创建了一个\"Hello\"字符串.由于在数组的末尾存储了空字符,所以字符数组的大小比单词\"Hello\"的字符数多一个。\n![效果](/img/c-4.jpg)\n\nc语言标准库没有常用的字符串方法，如indexOf,lastIndexOf,trim,lTrim,rTrim等方法。如是我就自己尝试实现，中间用了几个标准库函数:strcpy字符串拷贝，strcat字符串连接，这个方法不能直接用，C中的字符串内存不是自动扩展需要自己申请,strcat是把第二个字符串copy到第一个字符串结尾，需要第一个字符串分配的内存足够多，不然无法连接。strstr查找相同的字符串，返回的又是地址。整个代码全是内存操作，自已申请的内存一定要记得释放，对于用惯了现代语言的人来说，这真是相当虐心啊。\n![效果](/img/c-5.jpg)\n还是看代码吧\n``` C\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h> \nint main(void)\n{\n    ///方法定义\n    char* join(char  *s1,char *s2);\n    int indexOf(char *str1,char *str2);\n    int lastIndexOf(char *str1,char *str2);\n    char* ltrim(char *str);\n    char* rtrim(char *str);\n    char* trim(char *str);\n    //测试数据准备\n    char *first;\n    char *second;\n    char *indexstr;\n    char *third;\n    char *show;\n    first = \"binyanbin website is \";\n    second = \"http://binyanbin.github.io\";\n    indexstr = \"bin\";\n    third = \"  binyanbin trim test \";\n    //测试结果输出\n    show = join(first,second);\n    printf(\"join(\\\"%s\\\",\\\"%s\\\")=\\\"%s\\\"\\n\",first,second,show);\n    free(show);\n    printf(\"indexOf(\\\"%s\\\",\\\"%s\\\")=%d\\n\",second,indexstr,indexOf(second,indexstr));\n    printf(\"lastIndexOf(\\\"%s\\\",\\\"%s\\\")=%d\\n\",second,indexstr,lastIndexOf(second,indexstr));\n    show = ltrim(third);\n    printf(\"ltrim(\\\"%s\\\")=\\\"%s\\\"\\n\",third,show);\n    free(show);\n    show = rtrim(third);\n    printf(\"rtrim(\\\"%s\\\")=\\\"%s\\\"\\n\",third,show);\n    show = trim(third);\n    printf(\"trim(\\\"%s\\\")=\\\"%s\\\"\",third,show);\n    free(show);\n}\n\n//字符串连接\nchar* join(char  *s1,char *s2)\n{\n    //分布内存\n    char *result = malloc(strlen(s1)+strlen(s2)+1);\n    if (result==NULL) \n        exit(0);//内存为空退出\n    //拷贝s1到result\n    strcpy(result, s1);\n    //s2加到result尾部  \n    strcat(result, s2);  \n    return result;  \n}\n//字符串查询最开始位置\nint indexOf(char *str1,char *str2)  \n{  \n    char *p=str1;  \n    int i=0;  \n    //p是一个地址，找到相同字符串的地址\n    p=strstr(str1,str2);  \n    if(p==NULL)  \n        return -1;  \n    else{  \n        //是不是同一个地址了，是同一地址则找到字符串\n        while(str1!=p)\n        {  \n            str1++;  \n            i++;  \n        }  \n    }  \n    return i;  \n} \n\n//查询最后位置\nint lastIndexOf(char *str1,char *str2)  \n{  \n    char *p=str1;  \n    int i=0;\n    int len=strlen(str2);  \n    p=strstr(str1,str2);  \n    if(p==NULL)return -1;\n    //未找到字符串地址为空则跳出循环  \n    while(p!=NULL)  \n    { \n        //跳过已找的地址 \n        for(;str1!=p;str1++)\n            i++;  \n        p=p+len;\n        //找出下一个同样字符串的地址  \n        p=strstr(p,str2);  \n    }  \n    return i;  \n} \n\n//删除左空格 \nchar* ltrim(char *param)  \n{\n    //申请存储，不修改参数内存的数据\n    char *str = malloc(strlen(param)+1); \n    strcpy(str, param); \n    int i=0,j,len=strlen(str);  \n    while(str[i]!='\\0')  \n    {\n        //32:空格,9:横向制表符\n        if(str[i]!=32&&str[i]!=9)\n            break;\n        i++;  \n    }  \n    if(i!=0)  \n    //将后面的字符顺势前移,补充删掉的空白位置\n    for(j=0;j<=len-i;j++)  \n    {     \n        str[j]=str[j+i];\n    }  \n    return str; \n}  \n//删除右空格\nchar* rtrim(char *param)  \n{\n    char *str = malloc(strlen(param)+1);    \n    strcpy(str, param); \n    char *p=str;  \n    int i=strlen(str)-1;  \n    while(i>=0)  \n    {  \n        if(p[i]!=32&&p[i]!=9)\n            break;  \n        i--;  \n    }  \n    str[++i]='\\0';\n    return str;  \n}\n//删除左右空格\nchar* trim(char *str)\n{\n    char* temp = ltrim(str);\n    char* result = rtrim(temp);\n    free(temp);\n    return result;\n}  \n```\n","slug":"c-3","published":1,"updated":"2016-04-28T13:39:46.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2q14000t8cqp6uouz6mq"},{"title":"C语言之个性化termial","date":"2016-03-23T16:00:00.000Z","desc":"gcc 个性化cmd 个性化terminal","_content":"很多牛人有自己的个性化的命令行，为什么我没有呢?晚上我就写了一个。效果如下:\n![效果](/img/c-1.png)\n<!-- more -->\n## 图形实现\n图形是使用C打出来的，就当练手。\n``` C\n#include <stdio.h>\n#include <stdlib.h>\nint main(void)\n{\n    int i,j;\n    for (i=0; i<6; i++) {\n        for (j=6;j>i ;j-- ) {\n            printf(\" \");\n        }\n        for (j=0; j<=i; j++) {\n            printf(\"*\");\n        }\n        if (i==5)\n            printf(\"    write by binyanbin\");\n        else\n            printf(\"\\n\");\n    }\n    system(\"c:\");\n}\n```\n然后用gcc编译成exe。\n\n## cmd快捷方式\n新建快捷方式，输入C:\\Windows\\System32\\cmd.exe /k \"C:\\yanbin\\mycmd.exe\"。最后为你编译exe的位置。\n![cmd快捷方式](/img/c-2.png)\n这个cmd快捷方式就是你的个性terminal，当然你也可以打印出更漂亮的图形做你的terminal。\n\n\n","source":"_posts/c-2.md","raw":"---\ntitle: C语言之个性化termial\ndate: 2016-3-24\ndesc: gcc 个性化cmd 个性化terminal\n---\n很多牛人有自己的个性化的命令行，为什么我没有呢?晚上我就写了一个。效果如下:\n![效果](/img/c-1.png)\n<!-- more -->\n## 图形实现\n图形是使用C打出来的，就当练手。\n``` C\n#include <stdio.h>\n#include <stdlib.h>\nint main(void)\n{\n    int i,j;\n    for (i=0; i<6; i++) {\n        for (j=6;j>i ;j-- ) {\n            printf(\" \");\n        }\n        for (j=0; j<=i; j++) {\n            printf(\"*\");\n        }\n        if (i==5)\n            printf(\"    write by binyanbin\");\n        else\n            printf(\"\\n\");\n    }\n    system(\"c:\");\n}\n```\n然后用gcc编译成exe。\n\n## cmd快捷方式\n新建快捷方式，输入C:\\Windows\\System32\\cmd.exe /k \"C:\\yanbin\\mycmd.exe\"。最后为你编译exe的位置。\n![cmd快捷方式](/img/c-2.png)\n这个cmd快捷方式就是你的个性terminal，当然你也可以打印出更漂亮的图形做你的terminal。\n\n\n","slug":"c-2","published":1,"updated":"2016-03-25T14:46:11.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2q17000u8cqp8a4fn44u"},{"title":"C语言之编译器GCC","date":"2016-03-22T16:00:00.000Z","desc":"gcc","_content":"## 为什么是C\n\n很多牛B的开源项目都是C实现的，如redis,nginx,memcache,node等等。主要原因是C语言比较简单(相对C++来说)，编译器稳定可靠。C如果借鉴一些良好设计,C一样可以写的很好，如果习惯了，开发效率未必会比C++低。那么C怎么编译呢?\n\n## GCC\nGCC(GNU Compiler Collection)，GNU编译器集合,是一套由 GNU 开发的编程语言编译器。其中包括了ANSI C Compiler。在现在遍地都是IDE的时代，很多开发人员都忘了怎么用cli去编译程序。gcc编译过程是分为四个阶段进行的，即预处理(也称预编译,Preprocessing)、编译(Compilation)、汇编(Assembly)和连接(Linking)。\n<!-- more -->\n#### 预处理\n``` bash\ngcc -E test.c -o test.i\n```\n可以输出test.i文件中存放着test.c经预处理之后的代码。打开test.i文件，看一看，就明白了。\n\n#### 编译\n``` bash\ngcc -S test.i -o test.s\n```\n预处理之后，可直接对生成的test.i文件编译，生成汇编代码。\n\n#### 汇编\n``` bash\ngcc -c test.s -o test.o\n```\n汇编器可以将汇编代码编译为目标文件。\n\n#### 连接\n``` bash\ngcc test.o -o test\n```\ngcc连接器是gas提供的，负责将程序的目标文件与所需的所有附加的目标文件连接起来，最终生成可执行文件。附加的目标文件包括静态连接库和动态连接库。\n\n#### 简单编译\n一步到位:\n``` bash\ngcc test.c -o test\n```\n\n#### 多个程序文件的编译\n通常整个程序是由多个源文件组成的，相应地也就形成了多个编译单元，使用GCC能够很好地管理这些编译单元。\n``` bash\ngcc -c test1.c -o test1.o\ngcc -c test2.c -o test2.o\ngcc test1.o test2.o -o test\n```\n\n## MakeFile\n同样IDE的开发人员估计一般都不知道，IDE都为你做了这个工作。一个软件的代码文件是非常多的，如果你要自己一个个去写编译规则是相当复杂的。那么makefile就是解决整个软件的编译规则。一个软件项目中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作。makefile带来的好处就是——“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大的提高了效率。\n\n## MinGW\nMinGW是指只用自由软件来生成纯粹的Win32可执行文件的编译环境，它是Minimalist GNU on Windows的略称。\n\n#### 下载MinGW\n到Sourceforge(http://sourceforge.net/project/showfiles.php?group_id=2435)下载一个MinGW.exe。\n\n#### 环境变量的配置\na.在PATH的值中加入“C:\\MinGW\\bin”。这是寻找gcc编译器的路径。如果PATH中还有其他内容，需要用英文状态下分号进行分割\nb.新建LIBRARY_PATH变量，在其值中加入“C:\\MinGW\\lib”。这是标准库存放的路径。\nc.新建C_INCLUDE_PATH变量，在其值中加入“C:\\MinGW\\include”。这是Include查找头文件的路径。\n\n#### 验证gcc是否正常运行\n在cmd控制台窗口下面,输入gcc -v.若已经成功安装好,会显示gcc的版本信息。","source":"_posts/c-1.md","raw":"---\ntitle: C语言之编译器GCC\ndate: 2016-3-23\ndesc: gcc\n---\n## 为什么是C\n\n很多牛B的开源项目都是C实现的，如redis,nginx,memcache,node等等。主要原因是C语言比较简单(相对C++来说)，编译器稳定可靠。C如果借鉴一些良好设计,C一样可以写的很好，如果习惯了，开发效率未必会比C++低。那么C怎么编译呢?\n\n## GCC\nGCC(GNU Compiler Collection)，GNU编译器集合,是一套由 GNU 开发的编程语言编译器。其中包括了ANSI C Compiler。在现在遍地都是IDE的时代，很多开发人员都忘了怎么用cli去编译程序。gcc编译过程是分为四个阶段进行的，即预处理(也称预编译,Preprocessing)、编译(Compilation)、汇编(Assembly)和连接(Linking)。\n<!-- more -->\n#### 预处理\n``` bash\ngcc -E test.c -o test.i\n```\n可以输出test.i文件中存放着test.c经预处理之后的代码。打开test.i文件，看一看，就明白了。\n\n#### 编译\n``` bash\ngcc -S test.i -o test.s\n```\n预处理之后，可直接对生成的test.i文件编译，生成汇编代码。\n\n#### 汇编\n``` bash\ngcc -c test.s -o test.o\n```\n汇编器可以将汇编代码编译为目标文件。\n\n#### 连接\n``` bash\ngcc test.o -o test\n```\ngcc连接器是gas提供的，负责将程序的目标文件与所需的所有附加的目标文件连接起来，最终生成可执行文件。附加的目标文件包括静态连接库和动态连接库。\n\n#### 简单编译\n一步到位:\n``` bash\ngcc test.c -o test\n```\n\n#### 多个程序文件的编译\n通常整个程序是由多个源文件组成的，相应地也就形成了多个编译单元，使用GCC能够很好地管理这些编译单元。\n``` bash\ngcc -c test1.c -o test1.o\ngcc -c test2.c -o test2.o\ngcc test1.o test2.o -o test\n```\n\n## MakeFile\n同样IDE的开发人员估计一般都不知道，IDE都为你做了这个工作。一个软件的代码文件是非常多的，如果你要自己一个个去写编译规则是相当复杂的。那么makefile就是解决整个软件的编译规则。一个软件项目中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作。makefile带来的好处就是——“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大的提高了效率。\n\n## MinGW\nMinGW是指只用自由软件来生成纯粹的Win32可执行文件的编译环境，它是Minimalist GNU on Windows的略称。\n\n#### 下载MinGW\n到Sourceforge(http://sourceforge.net/project/showfiles.php?group_id=2435)下载一个MinGW.exe。\n\n#### 环境变量的配置\na.在PATH的值中加入“C:\\MinGW\\bin”。这是寻找gcc编译器的路径。如果PATH中还有其他内容，需要用英文状态下分号进行分割\nb.新建LIBRARY_PATH变量，在其值中加入“C:\\MinGW\\lib”。这是标准库存放的路径。\nc.新建C_INCLUDE_PATH变量，在其值中加入“C:\\MinGW\\include”。这是Include查找头文件的路径。\n\n#### 验证gcc是否正常运行\n在cmd控制台窗口下面,输入gcc -v.若已经成功安装好,会显示gcc的版本信息。","slug":"c-1","published":1,"updated":"2016-03-25T13:22:02.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2q1a000v8cqpo1sy11b6"},{"title":"C#由内存模型说性能2 数组与集合","date":"2016-05-01T16:00:00.000Z","desc":"gc C# 性能优化 集合","_content":"由于.net不会实时回收内存，那么.net对数组与集合是内存的是怎么处理的\n\n## 数组与集合\n大家都知道数组必须指定大小，而且大小一但指定就不能更改了，也就是说数组不能动态的增加容量，那么对于一些需要动态增加容量的需求是实现不了的。实现动态扩容的需求都是通过集合,如List,Dictionary,ArrayList.\n<!-- more -->\n\n## 集合如何实现动态扩容\n拿ArrayList和List为例,实际的代码大概如下:\n\n``` CSharp\n/// <summary>\n/// 增加元素\n/// </summary>\npublic virtual int Add(object value)\n{\n\t//超出集合大小\n    if (this._size == this._items.Length)\n    {\n        this.EnsureCapacity(this._size + 1);\n    }\n    this._items[this._size] = value;\n    this._version++;\n    return this._size++;\n}\n/// <summary>\n/// 设置容量大小 默认容量为4,超出容量则扩容2倍\n/// </summary>\nprivate void EnsureCapacity(int min)\n{\n    if (this._items.Length < min)\n    {\n    \t//默认容量为4,超出容量则扩容2倍\n        int num = (this._items.Length == 0) ? 4 : (this._items.Length * 2);\n        if (num < min)\n        {\n            num = min;\n        }\n        this.Capacity = num;\n    }\n}\n/// <summary>\n/// 设置容量大小\n/// </summary>\npublic virtual int Capacity\n{\n    get\n    {\n        return this._items.Length;\n    }\n    set\n    {\n        if (value != this._items.Length)\n        {\n            if (value < this._size)\n            {\n                throw new ArgumentOutOfRangeException(\"value\", Environment.GetResourceString(\"ArgumentOutOfRange_SmallCapacity\"));\n            }\n            if (value > 0)\n            {\n                object[] array = new object[value];//重新分配内存\n                if (this._size > 0) \n                {\n                    Array.Copy(this._items, 0, array, 0, this._size); \n                }\n                this._items = array;\n                return; \n            } \n            this._items = new object[4]; \n        } \n    } \n}\n```\n\n测试\n\n``` CSharp\nList<int> list = new List<int>();//list.Capacity=0\nlist.Add(new int());//list.Capacity=4\nlist.Add(new int());//list.Capacity=4\nlist.Add(new int());//list.Capacity=4\nlist.Add(new int());//list.Capacity=4\nlist.Add(new int());//list.Capacity=8\n```\n\n## 总结\n* 无论是List,ArrayList或其它集合,不过是对Array的一层包装,也由此可以断定集合的性能肯定不如Array。\n* 集合的扩容过程增加CPU的损耗和GC的压力，对于问题的严重性就取决于实际应用的场合，如果在高并发的应用下存在大量这操作那问题就变得严重多了。\n* 使用:对集合初始化的时候指定容量,如果可以直接使用Array代替集合。","source":"_posts/CSharp-2.md","raw":"---\ntitle: C#由内存模型说性能2 数组与集合\ndate: 2016-5-2\ndesc: gc C# 性能优化 集合\n---\n由于.net不会实时回收内存，那么.net对数组与集合是内存的是怎么处理的\n\n## 数组与集合\n大家都知道数组必须指定大小，而且大小一但指定就不能更改了，也就是说数组不能动态的增加容量，那么对于一些需要动态增加容量的需求是实现不了的。实现动态扩容的需求都是通过集合,如List,Dictionary,ArrayList.\n<!-- more -->\n\n## 集合如何实现动态扩容\n拿ArrayList和List为例,实际的代码大概如下:\n\n``` CSharp\n/// <summary>\n/// 增加元素\n/// </summary>\npublic virtual int Add(object value)\n{\n\t//超出集合大小\n    if (this._size == this._items.Length)\n    {\n        this.EnsureCapacity(this._size + 1);\n    }\n    this._items[this._size] = value;\n    this._version++;\n    return this._size++;\n}\n/// <summary>\n/// 设置容量大小 默认容量为4,超出容量则扩容2倍\n/// </summary>\nprivate void EnsureCapacity(int min)\n{\n    if (this._items.Length < min)\n    {\n    \t//默认容量为4,超出容量则扩容2倍\n        int num = (this._items.Length == 0) ? 4 : (this._items.Length * 2);\n        if (num < min)\n        {\n            num = min;\n        }\n        this.Capacity = num;\n    }\n}\n/// <summary>\n/// 设置容量大小\n/// </summary>\npublic virtual int Capacity\n{\n    get\n    {\n        return this._items.Length;\n    }\n    set\n    {\n        if (value != this._items.Length)\n        {\n            if (value < this._size)\n            {\n                throw new ArgumentOutOfRangeException(\"value\", Environment.GetResourceString(\"ArgumentOutOfRange_SmallCapacity\"));\n            }\n            if (value > 0)\n            {\n                object[] array = new object[value];//重新分配内存\n                if (this._size > 0) \n                {\n                    Array.Copy(this._items, 0, array, 0, this._size); \n                }\n                this._items = array;\n                return; \n            } \n            this._items = new object[4]; \n        } \n    } \n}\n```\n\n测试\n\n``` CSharp\nList<int> list = new List<int>();//list.Capacity=0\nlist.Add(new int());//list.Capacity=4\nlist.Add(new int());//list.Capacity=4\nlist.Add(new int());//list.Capacity=4\nlist.Add(new int());//list.Capacity=4\nlist.Add(new int());//list.Capacity=8\n```\n\n## 总结\n* 无论是List,ArrayList或其它集合,不过是对Array的一层包装,也由此可以断定集合的性能肯定不如Array。\n* 集合的扩容过程增加CPU的损耗和GC的压力，对于问题的严重性就取决于实际应用的场合，如果在高并发的应用下存在大量这操作那问题就变得严重多了。\n* 使用:对集合初始化的时候指定容量,如果可以直接使用Array代替集合。","slug":"CSharp-2","published":1,"updated":"2016-05-24T11:36:20.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2q1e000w8cqp1w2dojtn"},{"title":".net由内存模型说性能1","date":"2016-04-29T16:00:00.000Z","desc":"gc C# 性能优化","_content":".net不必手工管理内存，但要编写高性能的代码，就仍需理解后面发生的事情。\n\n## 内存模型:堆与栈\nC#内存主要有两类：Stack和Heap\nStack叫做栈区，由编译器自动分配释放，存放函数的参数值，局部变量的值等。\nHeap则称之为堆区，由开发人员申请内存，在垃圾回收器的控制下工作。\n![效果](/img/CSharp-1.jpg)\n\n<!-- more -->\n## 值类型与引用类型\n值类型的数据和内存在同一个位置，而引用类型是一个指向内存的指针。也就是对Stack和Heap的实际使用。\n![效果](/img/CSharp-2.jpg)\n![效果](/img/CSharp-3.jpg)\n除了Object和String,其它都是值类型。值类型的性能要略优于引用类型，它只需要一次访问内存就可拿到数据。\n\n## 装箱与拆箱\n值类型与引用类型进行类型转换时会产生装箱和拆箱操作。\n![效果](/img/CSharp-4.jpg)\n非必要时尽量避免这类操作，会对性能一定的影响。\n\n## 垃圾回收器GC\n垃圾回收器为什么不会立即回收对象?\n对象不再被引用时,如果立即删除,堆上的自由空间就会分散开来，给新对象分配内存就会很难处理,程序必须搜索整个堆才能找到一块足够大的内存块来存储整个新对象。\n整个heap中对象的引用关系错综复杂（交叉引用、循环引用），形成复杂的graph。heap对应有一个Roots，它能使程序在heap之外可以找到的各种入口点。root包括:全局对象、静态变量、局部对象、函数调用参数、当前CPU寄存器中的对象指针。\n下面可以通过一组图片来进一步了解GC的工作。黄色代表还在引用的对象，灰色代表没有引用的对象。\n现在内存使用已达到阀值,GC需要清理内存，下图就是GC整个清理的过程。\n![效果](/img/CSharp-5.gif)\n![效果](/img/CSharp-6.gif)\n![效果](/img/CSharp-7.gif)\n![效果](/img/CSharp-8.gif)\nGC回收内存是一种非常耗费性能的工作，减少不必要的内存使用有助于提高GC性能\n\n## 传参的优化\n如果我们要将一个非常大的值类型数据(如数据量大的struct类型)入栈，它会占用非常大的内存空间，而且会占有过多的处理器资源来进行拷贝复制。\n``` CSharp\npublic struct ConstNum\n{\n\tlong a,b,c,d,e,f,g,h,i,j,k;\n}\n\npublic  void Go()\n{\n\tConstNum x = new ConstNum();\n\tDo(x);\n}\n\npublic  void Do(ConstNum x)\n{\n\t//do something\n}\n```\n可以将struct改为class。实例对象之后则是引用类型。或使用ref关键字将方法改为Do(ref ConstNum x)，也可以达到引用类型的作用。\n\n## 静态\n有一个Dude类，你需要实例化多个对像使用。\n``` CSharp\nClass Dude\n{\n\tprivate _name =\"test\";\n\tpublic void SayHello()\n\t{\n\t\t//DoSomething\n\t}\n}\n```\n![效果](/img/CSharp-9.gif)\n你可以使用静态方法,以达到内存节省的目的。\n``` CSharp\nClass Dude\n{\n\tprivate _name =\"test\";\n\tpublic static void SayHello()\n\t{\n\t\t//DoSomething\n\t}\n}\n```\n![效果](/img/CSharp-10.gif)\n实际项目中使用单例模式来达到省内存的目的。\n\n## IDisposable与析构函数\n托管的资源只能由CG回收。而非托管的资源可以通过实现IDisposable进行释放。\n``` CSharp\npublic class CDisposable : IDisposable\n{\n    //析构函数，编译后变成 protected void Finalize()，GC会在回收对象前会调用调用该方法 \n    ~CDisposable() \n    { \n        Dispose(false); \n    } \n\n    //通过实现该接口，显式地释放对象，只针对非托管对象。\n    void Dispose() \n    { \n        Dispose(true); \n    } \n\n}\n```\n\nDispose调用\n\n``` CSharp\nUsing(MyClass myObj = new CDisposable())\n{ \n\t//DoSomething\n}\n```\n\n或者直接调myObj.Dispose();\n\n\n## 字符串的内存规则\nstring是引用类型，但string的值是不可变，但你改变string值的时候会对新值重新分配内存,老值仍驻留在内存中。\n\n```CSharp\nstring a = \"1234\";\na += \"5678\";\nConsole.ReadLine();\n```\n\n看起来我们似乎已经把a的值从“1234”改为了“12345678”，实际上并没有改变。因为string的值是无法修改不了了。堆中其实存在着两个字符串对象。字符串“1234”仍然在内存中驻留。\n\nstring容易引起内存驻留，但我们仍有办法减少内存使用。\n\n``` CSharp\nstring str1 = \"ABCD1234\";\nstring str2 = \"ABCD1234\";\nstring str3 = \"ABCD\" + \"1234\"; \nstring str4 = \"1234\";\nstring str5 = \"ABCD\" + str4;\nobject.ReferenceEquals(str1, str2) == True；\nobject.ReferenceEquals(str1, str3) == True；\nobject.ReferenceEquals(str1, str5) == False\n```\n通过上面比较，字符串都驻留在内存。尽量使用字符串相加来代替字符串变量和字符创相加，这样可以使用重复利用字符串驻留，减少内存使用。\n\n``` CSharp\nstring str3 = \"ABCD\" + \"1234\"; \n```\n\n对string作频繁的操作使用StringBuilder或string.format(也是StringBuilder实现)处理。\nStringBuilder内部维护一个字符数组，而不是一个string来避免string操作带来的新的string的创建。\n\n``` CSharp\nStringBuilder sb = new StringBuilder();\nsb.Append(str1);\nsb.Append(str2);\nsb.Append(str3);\n``` \n\n``` CSharp\nstring sb = string.format(\"{0}{1}{2}\",str1,str2,str3);\n``` \n\n相当于sb = str1 + str2 + str3;\n\n4.高效地进行string的比较操作\n对象之间的比较有比较Value和比较Reference之说。一般地对Reference进行比较的速度最快，因为只需要比较一下是不是同一地址就行了。\nobject.ReferenceEquals和string. Compare就是引用比较的方法。","source":"_posts/CSharp-1.md","raw":"---\ntitle: .net由内存模型说性能1\ndate: 2016-4-30\ndesc: gc C# 性能优化\n---\n.net不必手工管理内存，但要编写高性能的代码，就仍需理解后面发生的事情。\n\n## 内存模型:堆与栈\nC#内存主要有两类：Stack和Heap\nStack叫做栈区，由编译器自动分配释放，存放函数的参数值，局部变量的值等。\nHeap则称之为堆区，由开发人员申请内存，在垃圾回收器的控制下工作。\n![效果](/img/CSharp-1.jpg)\n\n<!-- more -->\n## 值类型与引用类型\n值类型的数据和内存在同一个位置，而引用类型是一个指向内存的指针。也就是对Stack和Heap的实际使用。\n![效果](/img/CSharp-2.jpg)\n![效果](/img/CSharp-3.jpg)\n除了Object和String,其它都是值类型。值类型的性能要略优于引用类型，它只需要一次访问内存就可拿到数据。\n\n## 装箱与拆箱\n值类型与引用类型进行类型转换时会产生装箱和拆箱操作。\n![效果](/img/CSharp-4.jpg)\n非必要时尽量避免这类操作，会对性能一定的影响。\n\n## 垃圾回收器GC\n垃圾回收器为什么不会立即回收对象?\n对象不再被引用时,如果立即删除,堆上的自由空间就会分散开来，给新对象分配内存就会很难处理,程序必须搜索整个堆才能找到一块足够大的内存块来存储整个新对象。\n整个heap中对象的引用关系错综复杂（交叉引用、循环引用），形成复杂的graph。heap对应有一个Roots，它能使程序在heap之外可以找到的各种入口点。root包括:全局对象、静态变量、局部对象、函数调用参数、当前CPU寄存器中的对象指针。\n下面可以通过一组图片来进一步了解GC的工作。黄色代表还在引用的对象，灰色代表没有引用的对象。\n现在内存使用已达到阀值,GC需要清理内存，下图就是GC整个清理的过程。\n![效果](/img/CSharp-5.gif)\n![效果](/img/CSharp-6.gif)\n![效果](/img/CSharp-7.gif)\n![效果](/img/CSharp-8.gif)\nGC回收内存是一种非常耗费性能的工作，减少不必要的内存使用有助于提高GC性能\n\n## 传参的优化\n如果我们要将一个非常大的值类型数据(如数据量大的struct类型)入栈，它会占用非常大的内存空间，而且会占有过多的处理器资源来进行拷贝复制。\n``` CSharp\npublic struct ConstNum\n{\n\tlong a,b,c,d,e,f,g,h,i,j,k;\n}\n\npublic  void Go()\n{\n\tConstNum x = new ConstNum();\n\tDo(x);\n}\n\npublic  void Do(ConstNum x)\n{\n\t//do something\n}\n```\n可以将struct改为class。实例对象之后则是引用类型。或使用ref关键字将方法改为Do(ref ConstNum x)，也可以达到引用类型的作用。\n\n## 静态\n有一个Dude类，你需要实例化多个对像使用。\n``` CSharp\nClass Dude\n{\n\tprivate _name =\"test\";\n\tpublic void SayHello()\n\t{\n\t\t//DoSomething\n\t}\n}\n```\n![效果](/img/CSharp-9.gif)\n你可以使用静态方法,以达到内存节省的目的。\n``` CSharp\nClass Dude\n{\n\tprivate _name =\"test\";\n\tpublic static void SayHello()\n\t{\n\t\t//DoSomething\n\t}\n}\n```\n![效果](/img/CSharp-10.gif)\n实际项目中使用单例模式来达到省内存的目的。\n\n## IDisposable与析构函数\n托管的资源只能由CG回收。而非托管的资源可以通过实现IDisposable进行释放。\n``` CSharp\npublic class CDisposable : IDisposable\n{\n    //析构函数，编译后变成 protected void Finalize()，GC会在回收对象前会调用调用该方法 \n    ~CDisposable() \n    { \n        Dispose(false); \n    } \n\n    //通过实现该接口，显式地释放对象，只针对非托管对象。\n    void Dispose() \n    { \n        Dispose(true); \n    } \n\n}\n```\n\nDispose调用\n\n``` CSharp\nUsing(MyClass myObj = new CDisposable())\n{ \n\t//DoSomething\n}\n```\n\n或者直接调myObj.Dispose();\n\n\n## 字符串的内存规则\nstring是引用类型，但string的值是不可变，但你改变string值的时候会对新值重新分配内存,老值仍驻留在内存中。\n\n```CSharp\nstring a = \"1234\";\na += \"5678\";\nConsole.ReadLine();\n```\n\n看起来我们似乎已经把a的值从“1234”改为了“12345678”，实际上并没有改变。因为string的值是无法修改不了了。堆中其实存在着两个字符串对象。字符串“1234”仍然在内存中驻留。\n\nstring容易引起内存驻留，但我们仍有办法减少内存使用。\n\n``` CSharp\nstring str1 = \"ABCD1234\";\nstring str2 = \"ABCD1234\";\nstring str3 = \"ABCD\" + \"1234\"; \nstring str4 = \"1234\";\nstring str5 = \"ABCD\" + str4;\nobject.ReferenceEquals(str1, str2) == True；\nobject.ReferenceEquals(str1, str3) == True；\nobject.ReferenceEquals(str1, str5) == False\n```\n通过上面比较，字符串都驻留在内存。尽量使用字符串相加来代替字符串变量和字符创相加，这样可以使用重复利用字符串驻留，减少内存使用。\n\n``` CSharp\nstring str3 = \"ABCD\" + \"1234\"; \n```\n\n对string作频繁的操作使用StringBuilder或string.format(也是StringBuilder实现)处理。\nStringBuilder内部维护一个字符数组，而不是一个string来避免string操作带来的新的string的创建。\n\n``` CSharp\nStringBuilder sb = new StringBuilder();\nsb.Append(str1);\nsb.Append(str2);\nsb.Append(str3);\n``` \n\n``` CSharp\nstring sb = string.format(\"{0}{1}{2}\",str1,str2,str3);\n``` \n\n相当于sb = str1 + str2 + str3;\n\n4.高效地进行string的比较操作\n对象之间的比较有比较Value和比较Reference之说。一般地对Reference进行比较的速度最快，因为只需要比较一下是不是同一地址就行了。\nobject.ReferenceEquals和string. Compare就是引用比较的方法。","slug":"CSharp-1","published":1,"updated":"2016-05-11T13:46:39.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip5h2q1m000x8cqprsyyggs0"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}